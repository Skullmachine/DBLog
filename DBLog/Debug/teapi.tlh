// Created by Microsoft (R) C/C++ Compiler Version 10.00.40219.01 (6730b23a).
//
// c:\program files (x86)\national instruments\teststand 4.2.1\components\models\teststandmodels\database\dblog\debug\teapi.tlh
//
// C++ source equivalent of Win32 type library ..\..\bin\teapi.dll
// compiler-generated file created 03/17/16 at 23:41:59 - DO NOT EDIT!

#pragma once
#pragma pack(push, 8)

#include <comdef.h>

namespace TS {

//
// Forward references and typedefs
//

struct __declspec(uuid("b2794ef3-c0b6-11d0-939c-0020af68e893"))
/* LIBID */ __TS;
enum PropertyValueTypes;
enum FindFilePromptOptions;
enum FindFileSearchListOptions;
enum FindPathStatusValues;
enum StepGroups;
enum TSError;
enum ModuleLoadOptions;
enum ModuleUnloadOptions;
enum ModelOptions;
enum EvalPrecondOptions;
enum WindowActivationOptions;
enum BatchSynchronizationOptions;
enum SeqFileBatchSynchronizationOptions;
enum LicenseTypes;
enum SwitchExecOperations;
enum SwitchExecOperationOrders;
enum SwitchExecLifetimes;
enum SwitchExecMulticonnectModes;
enum UIMessageCodes;
enum RTEOptions;
enum ReportConversion;
enum SequenceTypes;
enum SequenceDefaultValueScopes;
enum ExecutionRunStates;
enum ExecutionTerminationStates;
enum WriteFileFormat;
enum FileVersionAutoIncrement;
enum TypeVersionAutoIncrement;
enum TypeCategories;
enum TypeConflictHandlerTypes;
enum PropertyObjectFileTypes;
enum WorkspaceObjectTypes;
enum SourceControlCommands;
enum MsgBoxTypes;
enum DecimalPointLocalizationOptions;
enum SequenceFileTypes;
enum InternalOptions;
enum SpecifyStepsByUniqueIdOptions;
enum TimeLimitActions;
enum TimeLimitTypes;
enum TimeLimitOperations;
enum WatchExpressionBreakType;
enum InteractiveBranchModes;
enum ToolMenuTypes;
enum SearchDirectoryTypes;
enum CallbackTypes;
enum TokenCode;
enum OutputMessageSeverityTypes;
enum PropertyObjectElements;
enum LocationKinds;
enum EditKinds;
enum PerformActionOptions;
enum FileWritingFormats;
enum PromptResults;
enum CodeTemplateTypes;
enum CopyLocationsOptions;
enum ApplicationSites;
enum ApplicationLicenses;
enum CheckedStates;
enum TestStandPaths;
enum AllowAutomaticTypeConflictResolutionOptions;
enum CPUAffinityForNewThreadOptions;
struct __declspec(uuid("8d8769a0-09c0-11d1-93bd-0020af68e893"))
/* dual interface */ PropertyObject;
struct __declspec(uuid("9f2dbe40-1dbc-11d3-afa0-006097b79ef5"))
/* dual interface */ PropertyObjectFile;
struct __declspec(uuid("1650f0b0-da52-11d3-afdd-006097b79ef5"))
/* dual interface */ TypeUsageList;
struct __declspec(uuid("609f0003-3088-4c01-bf77-a0d485bf40ba"))
/* dual interface */ SearchResults;
struct __declspec(uuid("8d572800-fe22-4c5e-b75d-77ef446ac196"))
/* dual interface */ SearchMatch;
struct __declspec(uuid("606104e9-6ede-469c-a1fc-181acc1856bc"))
/* dual interface */ PropertyObjectType;
struct __declspec(uuid("65a60a52-3e57-4707-be4b-8d00bc08e32f"))
/* dual interface */ ArrayDimensions;
struct __declspec(uuid("dff35f37-1d59-4c02-b96f-28bf2e72ce91"))
/* dual interface */ ReportSection;
struct __declspec(uuid("b21e4047-6875-4ea0-9eae-6086bf665066"))
/* dual interface */ ReportSections;
struct __declspec(uuid("b2794ef5-c0b6-11d0-939c-0020af68e893"))
/* dual interface */ IEngine;
struct __declspec(uuid("b2794ef9-c0b6-11d0-939c-0020af68e893"))
/* dual interface */ SequenceFile;
struct __declspec(uuid("b2794ef7-c0b6-11d0-939c-0020af68e893"))
/* dual interface */ Sequence;
struct __declspec(uuid("b86de3e1-c234-11d0-939c-0020af68e893"))
/* dual interface */ Step;
struct __declspec(uuid("39b81800-2fe4-11d3-afac-006097b79ef5"))
/* dual interface */ StepType;
struct __declspec(uuid("56b1c191-2944-4e90-852a-b9c7a3d601bc"))
/* dual interface */ Module;
struct __declspec(uuid("6c9ce610-603f-11d1-93c8-0020af68e893"))
/* dual interface */ Adapter;
struct __declspec(uuid("5db79c28-1f4c-429f-98a3-06e49d0557a3"))
/* dual interface */ UnmappedArgumentValues;
struct __declspec(uuid("03f58680-9dae-409e-a2c0-da86d840c103"))
/* dual interface */ UnmappedArgumentValue;
struct __declspec(uuid("5d5238ad-d7f8-44fa-96fd-65ee662f1358"))
/* dual interface */ CodeTemplates;
struct __declspec(uuid("e4f56060-0d05-4aee-8778-d4907340edd2"))
/* dual interface */ CodeTemplate;
struct __declspec(uuid("afb3481e-e079-4be6-ad65-8452ac2f8639"))
/* dual interface */ AdditionalResults;
struct __declspec(uuid("5055d4d5-1339-4d93-bcbe-92fe24e4b228"))
/* dual interface */ AdditionalResult;
struct __declspec(uuid("7dc7e990-18dc-11d1-93be-0020af68e893"))
/* dual interface */ Execution;
struct __declspec(uuid("6ad5e6e0-5c69-11d1-93c6-0020af68e893"))
/* dual interface */ Thread;
struct __declspec(uuid("6427d0e0-e410-11d0-93b4-0020af68e893"))
/* dual interface */ SequenceContext;
struct __declspec(uuid("17de8180-c3da-11d1-a3eb-006008ca11d4"))
/* dual interface */ InteractiveContext;
struct __declspec(uuid("608ba280-c332-11d1-a3eb-006008ca11d4"))
/* dual interface */ InteractiveArgs;
struct __declspec(uuid("c9e948a0-acfc-11d1-8de0-006097053485"))
/* dual interface */ Report;
struct __declspec(uuid("37157015-3906-4071-919e-a896e12769d5"))
/* dual interface */ StepAdditionalResults;
struct __declspec(uuid("1bf6bec0-be7d-11d1-a3eb-006008ca11d4"))
/* dual interface */ EditArgs;
struct __declspec(uuid("eaab7fb0-70d8-11d1-af2e-006097b79ef5"))
/* dual interface */ User;
struct __declspec(uuid("46b7b2c4-263e-11d2-aa63-00c04f991648"))
/* dual interface */ RExecutor;
struct __declspec(uuid("529f6ed0-6681-11d1-93c9-0020af68e893"))
/* dual interface */ UIMessage;
struct __declspec(uuid("eedba160-05ae-11d4-afe8-006097b79ef5"))
/* dual interface */ UsersFile;
struct __declspec(uuid("42a5aef0-5a44-11d3-afbc-006097b79ef5"))
/* dual interface */ WorkspaceFile;
struct __declspec(uuid("42a5aef1-5a44-11d3-afbc-006097b79ef5"))
/* dual interface */ WorkspaceObject;
struct __declspec(uuid("933b1124-610f-40bd-bef6-cc93f8ac0b49"))
/* dual interface */ WatchExpressions;
struct __declspec(uuid("33934441-1561-4327-936c-712921d63b48"))
/* dual interface */ WatchExpression;
struct __declspec(uuid("c5b9c8ef-3cbb-485b-b7f4-02bb1ebcd676"))
/* dual interface */ SearchDirectories;
struct __declspec(uuid("88283700-cbb1-441e-bbed-f4e8267b0cf1"))
/* dual interface */ SearchDirectory;
struct __declspec(uuid("fb6264d6-05b4-40cb-902d-46834d109c76"))
/* dual interface */ ExternalReportViewers;
struct __declspec(uuid("bb1aac62-b7c6-49b4-8b5b-3616edd86c7a"))
/* dual interface */ ExternalReportViewer;
struct __declspec(uuid("e7495e94-98e0-4d89-bfea-3f850f0a0399"))
/* dual interface */ Expression;
struct __declspec(uuid("776c8a16-3de3-4a67-8961-b2f3010aa77a"))
/* dual interface */ EvaluationTypes;
struct __declspec(uuid("88b00fa9-d5b1-419b-a0b0-931cddbf9295"))
/* dual interface */ StationOptions;
struct __declspec(uuid("ff1ebd91-216f-411b-bf3a-fc6447f61bb9"))
/* dual interface */ Images;
struct __declspec(uuid("a4834f0b-a6a7-4485-b306-afc7607e81cf"))
/* dual interface */ EditTimeMenuItems;
struct __declspec(uuid("3da95120-a5c4-44ff-aa5b-36e18a90669d"))
/* dual interface */ EditTimeMenuItem;
struct __declspec(uuid("a3fee070-b084-4180-b146-f2fd0123a4c0"))
/* dual interface */ RunTimeMenuItems;
struct __declspec(uuid("69ce5662-711d-4f78-9b8a-d84d6866ca06"))
/* dual interface */ RunTimeMenuItem;
struct __declspec(uuid("8f02b14c-d72e-4ab7-b54e-e8716680bec8"))
/* dual interface */ SequenceFileDiffer;
struct __declspec(uuid("4223bc15-3914-4773-a5f0-ff9d301b2b8c"))
/* dual interface */ SequenceFileDifferenceSection;
struct __declspec(uuid("4920e6d7-28f8-4ef1-a575-191ddfd4bc1d"))
/* dual interface */ SequenceFileDifferenceSections;
struct __declspec(uuid("c9b8bbfc-3700-4c2f-846f-f5238737585e"))
/* dual interface */ Locations;
struct __declspec(uuid("85c7d475-d930-44b0-bf82-12d2623b727f"))
/* dual interface */ Location;
struct __declspec(uuid("a071c978-6f28-40f6-be02-372509e82322"))
/* dual interface */ UndoItemCreator;
struct __declspec(uuid("3d76a5a7-7d09-4399-b5d6-d2bc1639ca1e"))
/* dual interface */ IUndoItem;
struct __declspec(uuid("1156cb21-82b9-4d4f-9e0c-3f6d6ad97b88"))
/* dual interface */ UndoStack;
struct __declspec(uuid("a5202cc1-e147-498f-850a-aa4bfbf888b3"))
/* dual interface */ UndoItems;
struct __declspec(uuid("69609941-7977-4671-bab7-1ba8b0e59511"))
/* dual interface */ OutputMessages;
struct __declspec(uuid("e0c302d5-19c9-4926-9fa8-5a3705a6c3e4"))
/* dual interface */ OutputMessage;
struct __declspec(uuid("75109edf-cdfc-4d12-a461-971dc9089859"))
/* dual interface */ FileInformation;
struct __declspec(uuid("062dd318-9615-4295-9aea-ed9421670fbe"))
/* dual interface */ Utility;
struct __declspec(uuid("7f73e909-96cc-4198-91b9-dd828ff9d348"))
/* dual interface */ SelectedBreakpointItem;
struct __declspec(uuid("bb011cb0-d2dd-11d0-93a7-0020af68e893"))
/* dispinterface */ _TEEngineEvents;
struct __declspec(uuid("2859a043-521d-45f5-af97-4322486abe26"))
/* dual interface */ InputStream;
struct /* coclass */ Engine;

//
// Smart pointer typedef declarations
//

_COM_SMARTPTR_TYPEDEF(SearchMatch, __uuidof(SearchMatch));
_COM_SMARTPTR_TYPEDEF(SearchResults, __uuidof(SearchResults));
_COM_SMARTPTR_TYPEDEF(ArrayDimensions, __uuidof(ArrayDimensions));
_COM_SMARTPTR_TYPEDEF(PropertyObjectType, __uuidof(PropertyObjectType));
_COM_SMARTPTR_TYPEDEF(CodeTemplate, __uuidof(CodeTemplate));
_COM_SMARTPTR_TYPEDEF(CodeTemplates, __uuidof(CodeTemplates));
_COM_SMARTPTR_TYPEDEF(SearchDirectory, __uuidof(SearchDirectory));
_COM_SMARTPTR_TYPEDEF(SearchDirectories, __uuidof(SearchDirectories));
_COM_SMARTPTR_TYPEDEF(ExternalReportViewer, __uuidof(ExternalReportViewer));
_COM_SMARTPTR_TYPEDEF(ExternalReportViewers, __uuidof(ExternalReportViewers));
_COM_SMARTPTR_TYPEDEF(EvaluationTypes, __uuidof(EvaluationTypes));
_COM_SMARTPTR_TYPEDEF(StationOptions, __uuidof(StationOptions));
_COM_SMARTPTR_TYPEDEF(Images, __uuidof(Images));
_COM_SMARTPTR_TYPEDEF(Location, __uuidof(Location));
_COM_SMARTPTR_TYPEDEF(FileInformation, __uuidof(FileInformation));
_COM_SMARTPTR_TYPEDEF(Utility, __uuidof(Utility));
_COM_SMARTPTR_TYPEDEF(_TEEngineEvents, __uuidof(_TEEngineEvents));
_COM_SMARTPTR_TYPEDEF(InputStream, __uuidof(InputStream));
_COM_SMARTPTR_TYPEDEF(PropertyObject, __uuidof(PropertyObject));
_COM_SMARTPTR_TYPEDEF(TypeUsageList, __uuidof(TypeUsageList));
_COM_SMARTPTR_TYPEDEF(PropertyObjectFile, __uuidof(PropertyObjectFile));
_COM_SMARTPTR_TYPEDEF(Adapter, __uuidof(Adapter));
_COM_SMARTPTR_TYPEDEF(User, __uuidof(User));
_COM_SMARTPTR_TYPEDEF(UsersFile, __uuidof(UsersFile));
_COM_SMARTPTR_TYPEDEF(WorkspaceObject, __uuidof(WorkspaceObject));
_COM_SMARTPTR_TYPEDEF(WorkspaceFile, __uuidof(WorkspaceFile));
_COM_SMARTPTR_TYPEDEF(Expression, __uuidof(Expression));
_COM_SMARTPTR_TYPEDEF(ReportSection, __uuidof(ReportSection));
_COM_SMARTPTR_TYPEDEF(ReportSections, __uuidof(ReportSections));
_COM_SMARTPTR_TYPEDEF(Report, __uuidof(Report));
_COM_SMARTPTR_TYPEDEF(IEngine, __uuidof(IEngine));
_COM_SMARTPTR_TYPEDEF(SequenceFile, __uuidof(SequenceFile));
_COM_SMARTPTR_TYPEDEF(SelectedBreakpointItem, __uuidof(SelectedBreakpointItem));
_COM_SMARTPTR_TYPEDEF(Sequence, __uuidof(Sequence));
_COM_SMARTPTR_TYPEDEF(InteractiveArgs, __uuidof(InteractiveArgs));
_COM_SMARTPTR_TYPEDEF(InteractiveContext, __uuidof(InteractiveContext));
_COM_SMARTPTR_TYPEDEF(Step, __uuidof(Step));
_COM_SMARTPTR_TYPEDEF(StepType, __uuidof(StepType));
_COM_SMARTPTR_TYPEDEF(Module, __uuidof(Module));
_COM_SMARTPTR_TYPEDEF(UnmappedArgumentValues, __uuidof(UnmappedArgumentValues));
_COM_SMARTPTR_TYPEDEF(UnmappedArgumentValue, __uuidof(UnmappedArgumentValue));
_COM_SMARTPTR_TYPEDEF(AdditionalResults, __uuidof(AdditionalResults));
_COM_SMARTPTR_TYPEDEF(AdditionalResult, __uuidof(AdditionalResult));
_COM_SMARTPTR_TYPEDEF(StepAdditionalResults, __uuidof(StepAdditionalResults));
_COM_SMARTPTR_TYPEDEF(Execution, __uuidof(Execution));
_COM_SMARTPTR_TYPEDEF(EditArgs, __uuidof(EditArgs));
_COM_SMARTPTR_TYPEDEF(RExecutor, __uuidof(RExecutor));
_COM_SMARTPTR_TYPEDEF(Thread, __uuidof(Thread));
_COM_SMARTPTR_TYPEDEF(SequenceContext, __uuidof(SequenceContext));
_COM_SMARTPTR_TYPEDEF(UIMessage, __uuidof(UIMessage));
_COM_SMARTPTR_TYPEDEF(WatchExpression, __uuidof(WatchExpression));
_COM_SMARTPTR_TYPEDEF(WatchExpressions, __uuidof(WatchExpressions));
_COM_SMARTPTR_TYPEDEF(Locations, __uuidof(Locations));
_COM_SMARTPTR_TYPEDEF(OutputMessage, __uuidof(OutputMessage));
_COM_SMARTPTR_TYPEDEF(OutputMessages, __uuidof(OutputMessages));
_COM_SMARTPTR_TYPEDEF(EditTimeMenuItems, __uuidof(EditTimeMenuItems));
_COM_SMARTPTR_TYPEDEF(EditTimeMenuItem, __uuidof(EditTimeMenuItem));
_COM_SMARTPTR_TYPEDEF(RunTimeMenuItems, __uuidof(RunTimeMenuItems));
_COM_SMARTPTR_TYPEDEF(RunTimeMenuItem, __uuidof(RunTimeMenuItem));
_COM_SMARTPTR_TYPEDEF(SequenceFileDiffer, __uuidof(SequenceFileDiffer));
_COM_SMARTPTR_TYPEDEF(SequenceFileDifferenceSection, __uuidof(SequenceFileDifferenceSection));
_COM_SMARTPTR_TYPEDEF(SequenceFileDifferenceSections, __uuidof(SequenceFileDifferenceSections));
_COM_SMARTPTR_TYPEDEF(UndoItemCreator, __uuidof(UndoItemCreator));
_COM_SMARTPTR_TYPEDEF(IUndoItem, __uuidof(IUndoItem));
_COM_SMARTPTR_TYPEDEF(UndoItems, __uuidof(UndoItems));
_COM_SMARTPTR_TYPEDEF(UndoStack, __uuidof(UndoStack));

//
// Type library items
//
    const LPSTR SeqFileCback_PreStep = (char*) "SequenceFilePreStep";
    const LPSTR SeqFileCback_PostStep = (char*) "SequenceFilePostStep";
    const LPSTR SeqFileCback_PreInteractive = (char*) "SequenceFilePreInteractive";
    const LPSTR SeqFileCback_PostInteractive = (char*) "SequenceFilePostInteractive";
    const LPSTR SeqFileCback_Load = (char*) "SequenceFileLoad";
    const LPSTR SeqFileCback_Unload = (char*) "SequenceFileUnload";
    const LPSTR SeqFileCback_PostResultListEntry = (char*) "SequenceFilePostResultListEntry";
    const LPSTR SeqFileCback_PostStepRuntimeError = (char*) "SequenceFilePostStepRuntimeError";
    const LPSTR SeqFileCback_PostStepFailure = (char*) "SequenceFilePostStepFailure";
    const LPSTR DefModCback_PreUUT = (char*) "PreUUT";
    const LPSTR DefModCback_PostUUT = (char*) "PostUUT";
    const LPSTR DefModCback_PreUUTLoop = (char*) "PreUUTLoop";
    const LPSTR DefModCback_PostUUTLoop = (char*) "PostUUTLoop";
    const LPSTR DefModCback_ModifyRptEntry = (char*) "ModifyReportEntry";
    const LPSTR DefModCback_ReportOptions = (char*) "ReportOptions";
    const LPSTR DefModCback_TestReport = (char*) "TestReport";
    const LPSTR StdCVIAdapterKeyName = (char*) "C/CVI Std Prototype Adapter";
    const LPSTR FlexCAdapterKeyName = (char*) "DLL Flexible Prototype Adapter";
    const LPSTR LVAdapterKeyName = (char*) "G Std Prototype Adapter";
    const LPSTR GAdapterKeyName = (char*) "G Std Prototype Adapter";
    const LPSTR SequenceAdapterKeyName = (char*) "Sequence Adapter";
    const LPSTR AutomationAdapterKeyName = (char*) "Automation Adapter";
    const LPSTR NoneAdapterKeyName = (char*) "None Adapter";
    const LPSTR HTBasicAdapterKeyName = (char*) "HTBasic Adapter";
    const LPSTR FlexLVAdapterKeyName = (char*) "G Flexible VI Adapter";
    const LPSTR FlexCVIAdapterKeyName = (char*) "C/CVI Flexible Prototype Adapter";
    const LPSTR DotNetAdapterKeyname = (char*) "DotNet Adapter";
    const LPSTR StepType_Action = (char*) "Action";
    const LPSTR StepType_Goto = (char*) "Goto";
    const LPSTR StepType_Statement = (char*) "Statement";
    const LPSTR StepType_SequenceCall = (char*) "SequenceCall";
    const LPSTR StepType_PassFailTest = (char*) "PassFailTest";
    const LPSTR StepType_MultiNumericMeasurement = (char*) "NI_MultipleNumericLimitTest";
    const LPSTR StepType_NumericMeasurement = (char*) "NumericLimitTest";
    const LPSTR StepType_StringMeasurement = (char*) "StringValueTest";
    const LPSTR StepType_MessagePopup = (char*) "MessagePopup";
    const LPSTR StepType_CallExecutable = (char*) "CallExecutable";
    const LPSTR StepType_LimitLoader = (char*) "LimitLoaderStep";
    const LPSTR StepType_PropertyLoader = (char*) "NI_VariableAndPropertyLoader";
    const LPSTR StepType_Label = (char*) "Label";
    const LPSTR LoopType_NoLoop = (char*) "NoLooping";
    const LPSTR LoopType_FixedNumLoops = (char*) "FixedNumLoops";
    const LPSTR LoopType_PassFailCount = (char*) "PassFailCount";
    const LPSTR LoopType_Custom = (char*) "Custom";
    const LPSTR PostAction_NextStep = (char*) "Next";
    const LPSTR PostAction_GotoStep = (char*) "Goto";
    const LPSTR PostAction_CallCallback = (char*) "Cback";
    const LPSTR PostAction_Terminate = (char*) "Terminate";
    const LPSTR PostAction_Break = (char*) "Break";
    const LPSTR SeqContext_RunStateProp = (char*) "RunState";
    const LPSTR RunState_LoopIndex = (char*) "LoopIndex";
    const LPSTR RunState_LoopNumPassed = (char*) "LoopNumPassed";
    const LPSTR RunState_LoopNumFailed = (char*) "LoopNumFailed";
    const LPSTR RunState_StepProp = (char*) "Step";
    const LPSTR RunState_SeqProp = (char*) "Sequence";
    const LPSTR RunState_SeqFileProp = (char*) "SequenceFile";
    const LPSTR Seq_SetupProp = (char*) "Setup";
    const LPSTR Seq_MainProp = (char*) "Main";
    const LPSTR Seq_CleanupProp = (char*) "Cleanup";
    const LPSTR Step_ResultProp = (char*) "Result";
    const LPSTR Result_NumericProp = (char*) "Numeric";
    const LPSTR Result_StringProp = (char*) "String";
    const LPSTR Result_PassFailProp = (char*) "PassFail";
    const LPSTR Result_StatusProp = (char*) "Status";
    const LPSTR ResultStatus_NoStatus = (char*) "";
    const LPSTR ResultStatus_Done = (char*) "Done";
    const LPSTR ResultStatus_Skipped = (char*) "Skipped";
    const LPSTR ResultStatus_Passed = (char*) "Passed";
    const LPSTR ResultStatus_Failed = (char*) "Failed";
    const LPSTR ResultStatus_Error = (char*) "Error";
    const LPSTR ResultStatus_Running = (char*) "Running";
    const LPSTR ResultStatus_Looping = (char*) "Looping";
    const LPSTR ResultStatus_Terminated = (char*) "Terminated";
    const LPSTR ResultStatus_Waiting = (char*) "Waiting";
    const LPSTR Step_InBufProp = (char*) "InBuf";
    const LPSTR Step_LimitsProp = (char*) "Limits";
    const LPSTR Limits_LowProp = (char*) "Low";
    const LPSTR Limits_HighProp = (char*) "High";
    const LPSTR Limits_StringProp = (char*) "String";
    const LPSTR Step_TSInfoProp = (char*) "TS";
    const LPSTR TSInfo_StepAdditions = (char*) "SData";
    const LPSTR Step_MeasComparisonType = (char*) "Comp";
    const LPSTR NumMeasComp_EQ = (char*) "EQ";
    const LPSTR NumMeasComp_NE = (char*) "NE";
    const LPSTR NumMeasComp_GT = (char*) "GT";
    const LPSTR NumMeasComp_LT = (char*) "LT";
    const LPSTR NumMeasComp_GE = (char*) "GE";
    const LPSTR NumMeasComp_LE = (char*) "LE";
    const LPSTR NumMeasComp_GTLT = (char*) "GTLT";
    const LPSTR NumMeasComp_GELE = (char*) "GELE";
    const LPSTR NumMeasComp_GELT = (char*) "GELT";
    const LPSTR NumMeasComp_GTLE = (char*) "GTLE";
    const LPSTR NumMeasComp_LOG = (char*) "LOG";
    const LPSTR NumMeasRadix = (char*) "DisplayRadix";
    const LPSTR StrMeasComp_IgnoreCase = (char*) "IgnoreCase";
    const LPSTR StrMeasComp_CaseSensitive = (char*) "CaseSensitive";
    const LPSTR CVIStep_ModulePathProp = (char*) "ModulePath";
    const LPSTR CVIStep_FunctionNameProp = (char*) "FuncName";
    const LPSTR CVIStep_FunctionPrototypeProp = (char*) "FuncProto";
    const LPSTR CVIStep_ParamsStringProp = (char*) "ExtProtoParams";
    const LPSTR CVIStep_ModuleTypeProp = (char*) "ModuleType";
    const LPSTR CVIStep_SeqContextPassProp = (char*) "SeqContextType";
    const LPSTR CVIStep_ModuleSrcPathProp = (char*) "ModuleSrcPath";
    const LPSTR CVIStep_ModulePrjPathProp = (char*) "ModulePrjPath";
    const LPSTR LVStep_ModulePathProp = (char*) "ViPath";
    const LPSTR LVStep_PassInBufProp = (char*) "PassInBuf";
    const LPSTR LVStep_PassInvocInfoProp = (char*) "PassInvocInfo";
    const LPSTR LVStep_PassSeqContextProp = (char*) "PassContextPtr";
    const LPSTR LVStep_ShowFrontPanelProp = (char*) "ShowFrntPnl";
    const LPSTR SCStep_SeqFilePathProp = (char*) "SFPath";
    const LPSTR SCStep_SeqFilePathExprProp = (char*) "SFPathExpr";
    const LPSTR SCStep_SeqNameProp = (char*) "SeqName";
    const LPSTR SCStep_SeqNameExprProp = (char*) "SeqNameExpr";
    const LPSTR SCStep_ActualArgsProp = (char*) "ActualArgs";
    const LPSTR SCStep_UseCurrentFileProp = (char*) "UseCurFile";
    const LPSTR SCStep_SpecifyByExprProp = (char*) "SpecifyByExpr";
    const LPSTR SCStep_ArgPrototypeProp = (char*) "Prototype";
    const LPSTR SCStep_TraceSettingProp = (char*) "Trace";
    const LPSTR SCStep_TraceSettingValOff = (char*) "Off";
    const LPSTR SCStep_TraceSettingValOn = (char*) "On";
    const LPSTR SCStep_TraceSettingValDontChange = (char*) "Don\'t Change";
    const LPSTR SCStep_IgnoreTerminateProp = (char*) "IgnoreTerminate";
    const LPSTR SCStep_UseArgPrototypeProp = (char*) "UsePrototype";
    const LPSTR FlexCStep_ExternalCallProp = (char*) "Call";
    const LPSTR ExternalCall_LibPathProp = (char*) "LibPath";
    const LPSTR ExternalCall_FunctionNameProp = (char*) "Func";
    const LPSTR ExternalCall_CallConvProp = (char*) "Conv";
    const LPSTR ExternalCall_ParametersProp = (char*) "Parms";
    const LPSTR FCParam_NameProp = (char*) "Name";
    const LPSTR FCParam_TypeProp = (char*) "Type";
    const LPSTR FCParam_NumericTypeProp = (char*) "NumType";
    const LPSTR FCParam_ObjectTypeProp = (char*) "ObjType";
    const LPSTR FCParam_NumericPassingProp = (char*) "NumPass";
    const LPSTR FCParam_StringPassingProp = (char*) "StrPass";
    const LPSTR FCParam_ArrayElemPassingProp = (char*) "ElemPass";
    const LPSTR FCParam_NumArrayElementsProp = (char*) "NumEls";
    const LPSTR FCParam_StringSizeProp = (char*) "StrSize";
    const LPSTR FCParam_ResultActionProp = (char*) "ResultAct";
    const LPSTR FCParam_ArgValueProp = (char*) "ArgVal";
    const LPSTR FCParam_FlagsProp = (char*) "Flags";
    const LPSTR RunMode_Normal = (char*) "Normal";
    const LPSTR RunMode_Skip = (char*) "Skip";
    const LPSTR RunMode_ForceFail = (char*) "Fail";
    const LPSTR RunMode_ForcePass = (char*) "Pass";
    const LPSTR PropType_Path = (char*) "Path";
    const LPSTR PropType_FCParam = (char*) "FCParameter";
    const LPSTR PropType_Error = (char*) "Error";
    const LPSTR PropType_CommonResults = (char*) "CommonResults";
    const LPSTR Priv_Operate = (char*) "Operate";
    const LPSTR Priv_Execute = (char*) "Execute";
    const LPSTR Priv_Terminate = (char*) "Terminate";
    const LPSTR Priv_Abort = (char*) "Abort";
    const LPSTR Priv_Debug = (char*) "Debug";
    const LPSTR Priv_CtrlExecFlow = (char*) "ControlExecFlow";
    const LPSTR Priv_SinglePass = (char*) "SinglePass";
    const LPSTR Priv_RunAnySequence = (char*) "RunAnySequence";
    const LPSTR Priv_RunSelectedTests = (char*) "RunSelectedTests";
    const LPSTR Priv_LoopSelectedTests = (char*) "LoopSelectedTests";
    const LPSTR Priv_EditStationGlobals = (char*) "EditStationGlobals";
    const LPSTR Priv_EditRuntimeVariables = (char*) "EditRuntimeVariables";
    const LPSTR Priv_Develop = (char*) "Develop";
    const LPSTR Priv_EditSequenceFiles = (char*) "EditSequenceFiles";
    const LPSTR Priv_SaveSequenceFiles = (char*) "SaveSequenceFiles";
    const LPSTR Priv_EditWorkspace = (char*) "EditWorkspace";
    const LPSTR Priv_UseSourceControl = (char*) "UseSourceControl";
    const LPSTR Priv_Configure = (char*) "Configure";
    const LPSTR Priv_EditTypes = (char*) "EditTypes";
    const LPSTR Priv_ConfigEngine = (char*) "ConfigEngine";
    const LPSTR Priv_ConfigAdapter = (char*) "ConfigAdapter";
    const LPSTR Priv_ConfigApp = (char*) "ConfigApp";
    const LPSTR Priv_ConfigReport = (char*) "ConfigReport";
    const LPSTR Priv_ConfigDatabase = (char*) "ConfigDatabase";
    const LPSTR Priv_ConfigModel = (char*) "ConfigModel";
    const LPSTR Priv_EditUsers = (char*) "EditUsers";
    const LPSTR Priv_EditProcessModelFiles = (char*) "EditProcessModelFiles";
    const LPSTR Priv_UserLoggedIn = (char*) "*";
    const LPSTR Priv_GrantAll = (char*) "GrantAll";
    const LPSTR Priv_EditTemplates = (char*) "EditTemplates";

enum PropertyValueTypes
{
    PropValType_Container = 0,
    PropValType_String = 1,
    PropValType_Boolean = 2,
    PropValType_Number = 3,
    PropValType_NamedType = 4,
    PropValType_Reference = 5,
    PropValType_Array = 6
};

enum FindFilePromptOptions
{
    FindFile_PromptHonorUserPreference = 1,
    FindFile_PromptEnable = 2,
    FindFile_PromptDisable = 3
};

enum FindFileSearchListOptions
{
    FindFile_AddDirToSrchList_Ask = 1,
    FindFile_AddDirToSrchList_Yes = 2,
    FindFile_AddDirToSrchList_No = 3,
    FindFile_AddDirToSrchList_Ask_IgnorePrivileges = 4,
    FindFile_AddDirToSrchList_Yes_IgnorePrivileges = 5
};

enum FindPathStatusValues
{
    FindPath_PathIsFile = 1,
    FindPath_PathIsDir = 2,
    FindPath_PathNotFound = 3,
    FindPath_PathNotValid = 4
};

enum StepGroups
{
    StepGroup_Setup = 0,
    StepGroup_Main = 1,
    StepGroup_Cleanup = 2
};

enum TSError
{
    TS_Err_NoError = 0,
    TS_Err_OutOfMemory = -17000,
    TS_Err_ProgramError = -17001,
    TS_Err_RegistryAccessError = -17002,
    TS_Err_RegistryItemNotFound = -17003,
    TS_Err_DLLNotLoadable = -17004,
    TS_Err_FunctionNotFoundInLib = -17005,
    TS_Err_UnableToAllocateSystemResource = -17006,
    TS_Err_UnableToInitializeOLESystemDLLs = -17007,
    TS_Err_StackOverflow = -17008,
    TS_Err_BadFileFormat = -17100,
    TS_Err_FileFormatIsOutOfDate = -17099,
    TS_Err_FileFormatNewerThanCurrentVersion = -17098,
    TS_Err_IOError = -17200,
    TS_Err_UnableToOpenFile = -17201,
    TS_Err_BadNetPath = -17202,
    TS_Err_DriveNotReady = -17203,
    TS_Err_InvalidPathname = -17204,
    TS_Err_AccessDenied = -17205,
    TS_Err_FileAlreadyExists = -17206,
    TS_Err_DiskFull = -17207,
    TS_Err_FileWasNotFound = -17208,
    TS_Err_SharingViolation = -17209,
    TS_Err_WriteProtected = -17210,
    TS_Err_InvalidDrive = -17211,
    TS_Err_PathNotFound = -17212,
    TS_Err_UnableToCloseFile = -17213,
    TS_Err_MemoryChecking = -17214,
    TS_Err_ValueIsInvalidOrOutOfRange = -17300,
    TS_Err_IndexOutOfRange = -17301,
    TS_Err_NoItemsInList = -17302,
    TS_Err_TooManyItems = -17303,
    TS_Err_UnRecognizedValue = -17304,
    TS_Err_DuplicateItemOrValue = -17305,
    TS_Err_UnknownVariableOrProperty = -17306,
    TS_Err_UnknownType = -17307,
    TS_Err_UnexpectedType = -17308,
    TS_Err_IllegalOperationOnValue = -17309,
    TS_Err_ArrayLocked = -17310,
    TS_Err_IncompatibleParameters = -17311,
    TS_Err_UnableToPassByReference = -17312,
    TS_Err_ExprTypeIncompatibleWithParameter = -17313,
    TS_Err_ExprValueNotSuperSetOfParameter = -17314,
    TS_Err_WrongNumberOfParameters = -17315,
    TS_Err_EvaluationContextNotAvailable = -17316,
    TS_Err_SingleDimensionalNumericArrayExpected = -17317,
    TS_Err_LValueExpected = -17318,
    TS_Err_BadPropertyOrVariableName = -17319,
    TS_Err_UnknownFunctionOrSequenceName = -17320,
    TS_Err_TypeMismatchError = -17321,
    TS_Err_BadExpressionError = -17322,
    TS_Err_OperationOnlyValidWhenSuspended = -17323,
    TS_Err_ArrayIndexOutOfBounds = -17324,
    TS_Err_WrongNumberOfArrayIndices = -17325,
    TS_Err_MismatchedArrayBounds = -17326,
    TS_Err_NameAlreadyInUse = -17327,
    TS_Err_MissingType = -17328,
    TS_Err_TypeConflict = -17329,
    TS_Err_CurrentSeqFileNotAvailable = -17330,
    TS_Err_ItemCannotBeDeleted = -17331,
    TS_Err_ObjectTypeIncompatibleWithParameter = -17332,
    TS_Err_TypeCannotBeDeleted = -17333,
    TS_Err_TypeWithDependingInstancesCannotBeDeleted = -17334,
    TS_Err_ObjectCannotBeAdded = -17335,
    TS_Err_InvalidAdapterName = -17336,
    TS_Err_StepTypeNotFound = -17337,
    TS_Err_LVRTDllNotLoaded = -17338,
    TS_Err_ReadObjectNotFound = -17339,
    TS_Err_TwoDimensionalNumericArrayExpected = -17340,
    TS_Err_LabVIEWTypeNotSupportedInCVI = -17341,
    TS_Err_InvalidRegularExpression = -17342,
    TS_Err_ArrayTypeExpected = -17343,
    TS_Err_ArrayDimensionExpected = -17344,
    TS_Err_ArrayDimensionSizeExpected = -17345,
    TS_Err_InvalidPointer = -17346,
    TS_Err_EmptyExpressionError = -17347,
    TS_Err_MismatchedItems = -17348,
    TS_Err_ObjectLocked = -17349,
    TS_Err_EvaluateFunctionEmptyExpressionError = -17350,
    TS_Err_UnexpectedChangeCount = -17351,
    TS_Err_ThreadCreationFailed = -17400,
    TS_Err_OperationInProgress = -17401,
    TS_Err_OperationTimedOut = -17402,
    TS_Err_OperationFailed = -17500,
    TS_Err_UnexpectedSystemError = -17501,
    TS_Err_OS_Exception = -17502,
    TS_Err_ModuleLoadFailure = -17600,
    TS_Err_ModuleNotSpecified = -17601,
    TS_Err_SequenceAborted = -17602,
    TS_Err_SequenceTerminated = -17603,
    TS_Err_OperationCanceled = -17604,
    TS_Err_UnableToLaunchCVI = -17701,
    TS_Err_CVIOleError = -17702,
    TS_Err_CVINotReg = -17703,
    TS_Err_CVIAutoCmdFailed = -17704,
    TS_Err_CVIRegValueTypeMismatch = -17705,
    TS_Err_CVIRegValueNotFound = -17706,
    TS_Err_CVIRegKeyNotFound = -17707,
    TS_Err_CVIRegGenericReadError = -17708,
    TS_Err_CVIModuleHasUnresolvedReferences = -17709,
    TS_Err_CVIFuncNotFoundInModule = -17710,
    TS_Err_CVICantConnectToTecrunServer = -17711,
    TS_Err_CVIUnableToTerminateUserProgInCVI = -17712,
    TS_Err_DispUnknownInterface = -17801,
    TS_Err_DispUnknownMemberName = -17802,
    TS_Err_DispUnknownMemberID = -17803,
    TS_Err_DispUnknownParamName = -17804,
    TS_Err_DispUnknownParamID = -17805,
    TS_Err_DispMissingParamName = -17806,
    TS_Err_DispMissingParamID = -17807,
    TS_Err_DispWrongNumPositionalParams = -17808,
    TS_Err_DispMissingRequiredArg = -17809,
    TS_Err_AutomationObjNotValid = -17810,
    TS_Err_ActiveXAutomationServerException = -17811,
    TS_Err_DispObsoleteMember = -17812,
    TS_Err_RemoteSequenceError = -17850,
    TS_Err_RemoteSequenceErrorUnableToConnect = -17851,
    TS_Err_RemoteSequenceRemoteExecutionDenied = -17852,
    TS_Err_RemoteHostNotSpecified = -17853,
    TS_Err_FileNotConvertableToSeqFile = -17901,
    TS_Err_TypePaletteFileLoadErrors = -17902,
    TS_Err_LVAutoServerError = -18001,
    TS_Err_LVReportedError = -18002,
    TS_Err_LVMissingRequiredArg = -18003,
    TS_Err_LVRunTimeEngineError = -18004,
    TS_Err_LVTypeConversionError = -18005,
    TS_Err_RStringNotFound = -18051,
    TS_Err_DDEFail = -18101,
    TS_Err_NoFileAssoc = -18151,
    TS_Err_AdapterNoConnectToAutoServer = -18201,
    TS_Err_AdapterServerConnectionLost = -18202,
    TS_Err_FailToRegisterClipFormat = -18251,
    TS_Err_TypeLibraryReadError = -18351,
    TS_Err_DoesNotHaveRequiredPrivilege = -18360,
    TS_Err_SourceCodeControlError = -18370,
    TS_Err_WatchExpressionError = -18380,
    TS_Err_MeasStudioInterfaceNotFound = -18390,
    TS_Err_MethodOrPropertyNotAvailable = -18400,
    TS_Err_VisualStudioAutomationError = -18500,
    TS_Err_XMLError = -18600,
    TS_Err_DNAssemblyMissing = -18700
};

enum ModuleLoadOptions
{
    LoadOption_PreloadWhenOpened = 1,
    LoadOption_PreloadWhenExecuted = 2,
    LoadOption_DynamicLoad = 3,
    LoadOption_UseStepLoadOption = 4
};

enum ModuleUnloadOptions
{
    UnloadOption_OnPreconditionFailure = 1,
    UnloadOption_AfterStepExecution = 2,
    UnloadOption_AfterSequenceExecution = 3,
    UnloadOption_WithSequenceFile = 4,
    UnloadOption_UseStepUnloadOption = 5
};

enum ModelOptions
{
    ModelOption_UseStationModel = 0,
    ModelOption_NoModel = 1,
    ModelOption_RequireSpecificModel = 2
};

enum EvalPrecondOptions
{
    EvalPrecondOption_UseStationOption = 0,
    EvalPrecondOption_EvaluatePrecond = 1,
    EvalPrecondOption_NoEvaluatePrecond = 2
};

enum WindowActivationOptions
{
    WinActOption_None = 1,
    WinActOption_ActivateWhenStepCompletes = 2,
    WinActOption_IfActiveReactivateWhenStepCompletes = 3
};

enum BatchSynchronizationOptions
{
    BatchSyncOption_UseSeqFileSetting = 0,
    BatchSyncOption_UseModelSetting = 1,
    BatchSyncOption_NoSync = 2,
    BatchSyncOption_Serial = 3,
    BatchSyncOption_Parallel = 4,
    BatchSyncOption_OneThreadOnly = 5
};

enum SeqFileBatchSynchronizationOptions
{
    SeqFileBatchSyncOption_UseModelSetting = 1,
    SeqFileBatchSyncOption_NoSync = 2,
    SeqFileBatchSyncOption_Serial = 3,
    SeqFileBatchSyncOption_Parallel = 4,
    SeqFileBatchSyncOption_OneThreadOnly = 5
};

enum LicenseTypes
{
    LicenseType_DevelopmentSystem = 1,
    LicenseType_DebugDeploymentEnv = 2,
    LicenseType_BaseDeploymentEngine = 3,
    LicenseType_OEM = 4,
    LicenseType_Evaluation = 5,
    LicenseType_NoLicense = 6,
    LicenseType_Temporary = 7,
    LicenseType_Other = 8,
    LicenseType_CustomEditorDeployment = 9
};

enum SwitchExecOperations
{
    SwitchExecOperation_Connect = 1,
    SwitchExecOperation_Disconnect = 2,
    SwitchExecOperation_DisconnectAll = 3,
    SwitchExecOperation_ConnectDisconnect = 4
};

enum SwitchExecOperationOrders
{
    SwitchExecOperationOrder_DisconnectBeforeConnect = 1,
    SwitchExecOperationOrder_DisconnectAfterConnect = 2
};

enum SwitchExecLifetimes
{
    SwitchExecLifetime_Manual = 0,
    SwitchExecLifetime_Execution = 1,
    SwitchExecLifetime_Thread = 2,
    SwitchExecLifetime_Sequence = 3,
    SwitchExecLifetime_Step = 4
};

enum SwitchExecMulticonnectModes
{
    SwitchExecMulticonnectMode_None = 0,
    SwitchExecMulticonnectMode_Multiconnect = 1,
    SwitchExecMulticonnectMode_Default = -1
};
    const long LoadPrototypeOption_NoOptions = 0;
    const long LoadPrototypeOption_MapExistingParameters = 1;

enum UIMessageCodes
{
    UIMsg_BreakOnUserRequest = 1,
    UIMsg_BreakOnBreakpoint = 2,
    UIMsg_BreakOnRunTimeError = 3,
    UIMsg_Trace = 4,
    UIMsg_TerminatingExecution = 5,
    UIMsg_AbortingExecution = 6,
    UIMsg_KillingExecutionThreads = 7,
    UIMsg_EndExecution = 8,
    UIMsg_ShutDownComplete = 9,
    UIMsg_StartExecution = 10,
    UIMsg_ProgressPercent = 11,
    UIMsg_ProgressText = 12,
    UIMsg_StartInteractiveExecution = 13,
    UIMsg_EndInteractiveExecution = 14,
    UIMsg_TerminatingInteractiveExecution = 15,
    UIMsg_TerminationCancelled = 16,
    UIMsg_ResumeFromBreak = 17,
    UIMsg_StartFileExecution = 18,
    UIMsg_EndFileExecution = 19,
    UIMsg_ShutDownCancelled = 20,
    UIMsg_LocalizationSettingChanged = 21,
    UIMsg_OpenWindows = 22,
    UIMsg_TileWindows = 23,
    UIMsg_CascadeWindows = 24,
    UIMsg_ReportChanged = 25,
    UIMsg_CloseWindows = 26,
    UIMsg_RefreshWindows = 27,
    UIMsg_ClientFileChanged = 28,
    UIMsg_DisplayReport = 29,
    UIMsg_ModelState_Initializing = 30,
    UIMsg_ModelState_Waiting = 31,
    UIMsg_ModelState_Identified = 32,
    UIMsg_ModelState_BeginTesting = 33,
    UIMsg_ModelState_TestingComplete = 34,
    UIMsg_ModelState_PostProcessingComplete = 35,
    UIMsg_ModelState_EnabledStateSet = 36,
    UIMsg_ReportLocationChanged = 37,
    UIMsg_GotoLocation = 38,
    UIMsg_PushUndoItem = 39,
    UIMsg_OutputMessages = 40,
    UIMsg_UserMessageBase = 10000
};

enum RTEOptions
{
    RTEOption_ShowDialog = 0,
    RTEOption_Continue = 1,
    RTEOption_Ignore = 2,
    RTEOption_Abort = 3,
    RTEOption_Retry = 4
};
    const long OpenFile_NoOptions = 0;
    const long OpenFile_DisableUseAbsPathCheck = 1;
    const long OpenFile_InitialSetUseAbsPathCheck = 2;
    const long OpenFile_InitialUnsetUseAbsPathCheck = 4;
    const long OpenFile_UseAbsolutePath = 131;
    const long OpenFile_UseRelativePath = 133;
    const long OpenFile_ResolveNonExistentFile = 8;
    const long OpenFile_FileMustNotExist = 16;
    const long OpenFile_SaveAsDialog = 64;
    const long OpenFile_HideUseAbsPathCheck = 128;
    const long OpenFile_ShowBrowseIntoLLBCheck = 256;
    const long OpenFile_SelectDirectoriesOnly = 512;
    const long OpenFile_HideMultiSelectListCtrl = 1024;
    const long OpenFile_ModalToAppMainWind = 65536;
    const long OpenFile_InitialSetBrowseIntoLLB = 32;
    const long OpenFile_UseSequenceFileFilters = 2048;
    const long OpenFile_IgnoreInitialPathExtension = 4096;
    const long ExecMask_BreakpointsEnabled = 1;
    const long ExecMask_BreakWhileTerminating = 2;
    const long ExecMask_BreakOnRunTimeError = 4;
    const long ExecMask_TracingEnabled = 8;
    const long ExecMask_TraceIntoSetupCleanup = 16;
    const long ExecMask_TraceIntoPrePostCallbacks = 32;
    const long ExecMask_TraceIntoPostActionCallbacks = 64;
    const long ExecMask_TraceIntoSeparateExecutionCallbacks = 128;
    const long ExecMask_TraceIntoEntryPoints = 256;
    const long ExecMask_TraceIntoSequenceCallsMarkedAsTraceOff = 512;
    const long ExecMask_TraceWhileTerminating = 1024;
    const long ExecMask_TraceAllThreads = 2048;
    const long ExecMask_InteractiveRecordResults = 4096;
    const long ExecMask_InteractiveRunSetupCleanup = 8192;
    const long ExecMask_InteractiveEvaluatePreconditions = 16384;
    const long ExecMask_DefaultExecutionMask = 29;

enum ReportConversion
{
    ReportConv_NoConversion = 0,
    ReportConv_ToCRLF = 1,
    ReportConv_FromCRLF = 2
};
    const long RWOption_NoOptions = 0;
    const long RWOption_ValuesOnly = 1;
    const long RWOption_EraseExistingObject = 2;
    const long RWOption_EraseAll = 4;
    const long RWOption_DoNotWriteTypes = 8;
    const long PropOption_NoOptions = 0;
    const long PropOption_InsertIfMissing = 1;
    const long PropOption_DeleteIfExists = 2;
    const long PropOption_DoNothingIfExists = 4;
    const long PropOption_SetOnlyIfDoesNotExist = 5;
    const long PropOption_CoerceBadNumbersToZero = 262144;
    const long PropOption_CoerceFromNumber = 8;
    const long PropOption_CoerceFromString = 16;
    const long PropOption_CoerceFromBoolean = 32;
    const long PropOption_CoerceFromReference = 65536;
    const long PropOption_CoerceToNumber = 64;
    const long PropOption_CoerceToString = 128;
    const long PropOption_CoerceToBoolean = 256;
    const long PropOption_CoerceToReference = 131072;
    const long PropOption_Coerce = 197112;
    const long PropOption_InsertElement = 1;
    const long PropOption_RemoveElement = 2;
    const long PropOption_OverrideNotDeletable = 4194304;
    const long PropOption_NotOwning = 512;
    const long PropOption_ReferToAlias = 1024;
    const long PropOption_RequireIdenticalStructure = 8192;
    const long PropOption_CaseInsensitive = 4096;
    const long PropOption_DoNotRecurse = 16384;
    const long PropOption_DoNotShareProperties = 134217728;
    const long PropOption_CopyAllFlags = 536870912;
    const long PropOption_DoNotAdoptCurrentName = 2048;
    const long PropOption_DecimalPoint_UsePeriod = 0;
    const long PropOption_DecimalPoint_UsePreference = 4096;
    const long PropOption_DecimalPoint_UseSystemSetting = 8192;
    const long PropOption_DecimalPoint_UseComma = 12288;
    const long PropFlags_NotEditable = 1;
    const long PropFlags_PassByReference = 4;
    const long PropFlags_Hidden = 8;
    const long PropFlags_HiddenInTypes = 16;
    const long PropFlags_DontTypeCheckParameter = 128;
    const long PropFlags_Propagate = 256;
    const long PropFlags_PermitPropagation = 512;
    const long PropFlags_IsMeasurementValue = 1024;
    const long PropFlags_DontCopyToResults = 2048;
    const long PropFlags_IsLimit = 4096;
    const long PropFlags_IncludeInReport = 8192;
    const long PropFlags_CommentNotEditable = 16777216;
    const long PropFlags_NameNotEditable = 67108864;
    const long PropFlags_ExcludeFromComparison = 65536;
    const long PropFlags_Shared = 131072;
    const long PropFlags_SharedAtRunTime = 262144;
    const long PropFlags_ExcludeFromCopy = 524288;
    const long PropFlags_UnstructuredProperty = 2097152;
    const long PropFlags_NotDeletable = 4194304;
    const long PropFlags_IntermediateExprValue = 64;
    const long GetSeqFile_NoOptions = 0;
    const long GetSeqFile_PreloadModules = 1;
    const long GetSeqFile_UpdateFromDisk = 2;
    const long GetSeqFile_AllowTypeConflicts = 4;
    const long GetSeqFile_CheckModelOptions = 8;
    const long GetSeqFile_FindFile = 32;
    const long GetSeqFile_SearchCurrentDir = 64;
    const long GetSeqFile_DoNotRunLoadCallback = 16;
    const long GetSeqFile_OperatorInterfaceFlags = 107;

enum SequenceTypes
{
    SeqType_Normal = 0,
    SeqType_Callback = 1,
    SeqType_ExeEntryPoint = 3,
    SeqType_CfgEntryPoint = 5,
    SeqType_ReservedCallback = 7
};
    const long ExecTypeMask_Normal = 0;
    const long ExecTypeMask_InitiallyHidden = 1;
    const long ExecTypeMask_TracingInitiallyOff = 2;
    const long ExecTypeMask_InitiallySuspended = 4;
    const long ExecTypeMask_NotRestartable = 8;
    const long ExecTypeMask_CloseWindowWhenDone = 16;
    const long ExecTypeMask_BreakOnStepFailure = 32;
    const long ExecTypeMask_BreakOnSequenceFailure = 64;
    const long ExecTypeMask_AutoWaitAtEndOfSequence = 128;
    const long ExecTypeMask_UseSTA = 256;
    const long SpecMod_NoOptions = 0;
    const long SpecMod_ReadOnly = 1;
    const long SpecMod_NoSyntaxChecking = 2;
    const long SpecMod_AllowPrototypeChanges = 4;
    const long HierarchicalExecMask_DontRunSetupAndCleanup = 2;
    const long HierarchicalExecMask_RunRemainingSequence = 4;
    const long HierarchicalExecMask_IgnorePreconditions = 8;
    const long RestartOption_NoOptions = 0;
    const long RestartOption_BreakOnEntry = 1;
    const long RestartOption_OverrideNotRestartable = 2;
    const long RestartOption_BreakOnStepFailure = 4;
    const long RestartOption_BreakOnSequenceFailure = 8;
    const long OpenStatus_InWindow = 1;
    const long PropDlgOption_NoOptions = 0;
    const long PropDlgOption_ModalToAppMainWind = 65536;
    const long PropDlgOption_ReadOnly = 131072;
    const long PropDlgOption_ShowViewContentsButton = 2;
    const long PropDlgOption_DisableAdvancedButton = 4;
    const long PropDlgOption_DisableNumericFormatButton = 8;
    const long PropDlgOutput_AppliedToAllInstances = 1;
    const long PropDlgOutput_AppliedChanges = 2;
    const long PropDlgOutput_ViewContents = 4;
    const long PropDlgOutput_ModifiedObject = 8;
    const long PropDlgOutput_ModifiedFile = 16;
    const long EvalOption_NoOptions = 0;
    const long EvalOption_DoNotAlterValues = 1;
    const long EvalOption_AllowEmptyExpression = 2;
    const long EvalOption_AllowIndexingEmptyArrays = 4;
    const long EvalOption_CreateNonExistentVariables = 8;
    const long ResetTypeInst_NoOptions = 0;
    const long ResetTypeInst_ResetValues = 1;
    const long ResetTypeInst_ResetFlags = 2;
    const long ResetTypeInst_RecurseSubProperties = 4;
    const LPSTR HTBasicStep_ModulePathProp = (char*) "ModulePath";
    const LPSTR HTBasicStep_WorkingDirPathProp = (char*) "WorkingDirPath";
    const LPSTR HTBasicStep_FunctionNameProp = (char*) "SubName";
    const LPSTR HTBasicStep_ShowAppProp = (char*) "ShowApp";
    const LPSTR HTBasicStep_SetWorkingDirProp = (char*) "SetWorkingDirType";
    const LPSTR Menu_NameProp = (char*) "Name";
    const LPSTR Menu_IsSubmenuProp = (char*) "IsSubMenu";
    const LPSTR Menu_SeparatorAboveProp = (char*) "SeparatorAbove";
    const LPSTR Menu_IsDimmedProp = (char*) "IsDimmed";
    const LPSTR Menu_SubstepIndexProp = (char*) "SubstepIndex";
    const LPSTR Menu_MenuItemsProp = (char*) "MenuItems";
    const LPSTR Menu_ToolIDProp = (char*) "ToolMenuId";
    const LPSTR Menu_EditsSelectedFileProp = (char*) "EditsSelectedFile";
    const LPSTR Menu_SupportsReadOnlyProp = (char*) "SupportsReadOnly";
    const LPSTR Menu_HasEditPanelProp = (char*) "HasEditPanel";
    const LPSTR FrontEndCback_LoginLogout = (char*) "LoginLogout";

enum SequenceDefaultValueScopes
{
    SeqDefValueScope_Execution = 1,
    SeqDefValueScope_ExecutionTree = 2
};

enum ExecutionRunStates
{
    ExecRunState_Running = 1,
    ExecRunState_Paused = 2,
    ExecRunState_Stopped = 3
};

enum ExecutionTerminationStates
{
    ExecTermState_Normal = 1,
    ExecTermState_Terminating = 2,
    ExecTermState_TerminatingInteractive = 3,
    ExecTermState_Aborting = 4,
    ExecTermState_KillingThreads = 5
};

enum WriteFileFormat
{
    WriteFileFormat_Current = 1,
    WriteFileFormat_TestStand2 = 3,
    WriteFileFormat_TestStand201 = 4,
    WriteFileFormat_TestStand3 = 5,
    WriteFileFormat_TestStand31 = 6,
    WriteFileFormat_TestStand35 = 7,
    WriteFileFormat_TestStand4 = 8,
    WriteFileFormat_TestStand41 = 9,
    WriteFileFormat_TestStand42 = 10
};

enum FileVersionAutoIncrement
{
    FileVersionInc_None = 0,
    FileVersionInc_Major = 1,
    FileVersionInc_Minor = 2,
    FileVersionInc_Revision = 3,
    FileVersionInc_Build = 4
};

enum TypeVersionAutoIncrement
{
    TypeVersionInc_None = 0,
    TypeVersionInc_Major = 1,
    TypeVersionInc_Minor = 2,
    TypeVersionInc_Revision = 3,
    TypeVersionInc_Build = 4
};
    const long CheckForModifiedTypes_UseStationOptions = 0;
    const long CheckForModifiedTypes_AutoIncrementVersions = 1;
    const long CheckForModifiedTypes_Prompt = 2;
    const long CheckForModifiedTypes_NoAction = 4;
    const long CheckForModifiedTypes_RemoveTypesModifiedMark = 12;
    const long LoadTypePaletteOptions_NoOptions = 0;
    const long LoadTypePaletteOptions_DisplayErrors = 1;
    const long DebugOption_NoOptions = 0;
    const long DebugOption_StackChecking = 1;
    const long DebugOption_BufferChecking = 2;
    const long DebugOption_ReportObjectLeaks = 4;
    const long DebugOption_SendOutputMessagesToDebugger = 8;
    const long DebugOption_ReportKnownOSandComponentProblems = 16;

enum TypeCategories
{
    TypeCategory_None = 0,
    TypeCategory_StepTypes = 1,
    TypeCategory_CustomDataTypes = 2,
    TypeCategory_BuiltinDataTypes = 3
};

enum TypeConflictHandlerTypes
{
    ConflictHandler_Error = 1,
    ConflictHandler_Prompt = 3,
    ConflictHandler_UseGlobalType = 4
};

enum PropertyObjectFileTypes
{
    FileType_ConfigFile = 0,
    FileType_SequenceFile = 1,
    FileType_TypePaletteFile = 2,
    FileType_StationGlobalsFile = 3,
    FileType_UsersFile = 4,
    FileType_WorkspaceFile = 5,
    FileType_ProjectFile = 6,
    FileType_PropertyObjectFile = 7,
    FileType_TemplatesFile = 8
};

enum WorkspaceObjectTypes
{
    WorkspaceObjType_WorkspaceFile = 1,
    WorkspaceObjType_ProjectFile = 2,
    WorkspaceObjType_Folder = 3,
    WorkspaceObjType_SequenceFile = 4,
    WorkspaceObjType_OtherFile = 5
};

enum SourceControlCommands
{
    SCCmd_AddToSC = 1,
    SCCmd_RemoveFromSC = 2,
    SCCmd_CheckOut = 3,
    SCCmd_CheckIn = 4,
    SCCmd_GetLatest = 5,
    SCCmd_UndoCheckOut = 6,
    SCCmd_ShowDifferences = 7,
    SCCmd_ShowHistory = 8,
    SCCmd_ShowProperties = 9,
    SCCmd_ShowProviderOptions = 10
};

enum MsgBoxTypes
{
    MsgBox_Warning = 0,
    MsgBox_Information = 1,
    MsgBox_Error = 2,
    MsgBox_Custom = 3
};

enum DecimalPointLocalizationOptions
{
    DecimalPoint_UsePreference = 1,
    DecimalPoint_UseSystemSetting = 2,
    DecimalPoint_UsePeriod = 3,
    DecimalPoint_UseComma = 4
};

enum SequenceFileTypes
{
    SeqFileType_Normal = 0,
    SeqFileType_Model = 1,
    SeqFileType_FrontEndCBacks = 2,
    SeqFileType_StationCBacks = 3,
    SeqFileType_Template = 4
};
    const LPSTR FileContentType_ConfigFile = (char*) "TEConfigFile";
    const LPSTR FileContentType_SequenceFile = (char*) "SequenceFile";
    const LPSTR FileContentType_TypePaletteFile = (char*) "Types";
    const LPSTR FileContentType_StationGlobalsFile = (char*) "Globals";
    const LPSTR FileContentType_UsersFile = (char*) "UserListFile";
    const LPSTR FileContentType_PropertyObjectFile = (char*) "TSPropertyObjectFile";
    const LPSTR FileContentType_WorkspaceFile = (char*) "TSWorkspaceFile";
    const LPSTR FileContentType_ProjectFile = (char*) "TSProjectFile";
    const long WinFileDlg_READONLY = 1;
    const long WinFileDlg_OVERWRITEPROMPT = 2;
    const long WinFileDlg_HIDEREADONLY = 4;
    const long WinFileDlg_NOCHANGEDIR = 8;
    const long WinFileDlg_SHOWHELP = 16;
    const long WinFileDlg_ENABLEHOOK = 32;
    const long WinFileDlg_ENABLETEMPLATE = 64;
    const long WinFileDlg_ENABLETEMPLATEHANDLE = 128;
    const long WinFileDlg_NOVALIDATE = 256;
    const long WinFileDlg_ALLOWMULTISELECT = 512;
    const long WinFileDlg_EXTENSIONDIFFERENT = 1024;
    const long WinFileDlg_PATHMUSTEXIST = 2048;
    const long WinFileDlg_FILEMUSTEXIST = 4096;
    const long WinFileDlg_CREATEPROMPT = 8192;
    const long WinFileDlg_SHAREAWARE = 16384;
    const long WinFileDlg_NOREADONLYRETURN = 32768;
    const long WinFileDlg_NOTESTFILECREATE = 65536;
    const long WinFileDlg_NONETWORKBUTTON = 131072;
    const long WinFileDlg_NOLONGNAMES = 262144;
    const long WinFileDlg_EXPLORER = 524288;
    const long WinFileDlg_NODEREFERENCELINKS = 1048576;
    const long WinFileDlg_LONGNAMES = 2097152;
    const long WinFileDlg_ENABLEINCLUDENOTIFY = 4194304;
    const long WinFileDlg_ENABLESIZING = 8388608;
    const long WinFileDlg_DONTADDTORECENT = 33554432;
    const long WinFileDlg_FORCESHOWHIDDEN = 268435456;
    const long CommonDlgOption_NoOptions = 0;
    const long CommonDlgOption_ModalToAppMainWind = 65536;
    const long CommonDlgOption_ReadOnly = 131072;
    const long ArrayBounds_NoOptions = 0;
    const long ArrayBounds_InitializeArray = 1;
    const long ArrayBounds_ReturnOkCancel = 2;
    const long EditPaths_NoOptions = 0;
    const long EditPaths_AllowEditOfReadOnlyFiles = 1;
    const long EditPaths_ModalToAppMainWind = 65536;
    const long EditPaths_ReadOnly = 131072;
    const long BrowseExpr_NoOptions = 0;
    const long BrowseExpr_UsesCRLF = 1;
    const long BrowseExpr_ModalToAppMainWind = 65536;
    const long BrowseExpr_NoContextMenus = 2;
    const long BrowseExpr_ForViewingTypes = 4;
    const long WorkspaceBrowserDlgOption_NoOptions = 0;
    const long WorkspaceBrowserDlgOption_ModalToAppMainWind = 65536;
    const long WorkspaceBrowserDlgOption_Editable = 1;
    const long ToolMenuItem_SeparatorBefore = 1;
    const long ToolMenuItem_Enabled = 2;
    const long ToolMenuItem_EditsSelectedFile = 4;
    const long LoadModule_NoOptions = 0;
    const long LoadModule_IgnoreErrors = 1;
    const long LoadModule_LoadModulesInSubSequences = 2;
    const long LoadModule_EvaluateExpressions = 4;
    const long LoadModule_IgnoreSkippedSteps = 8;
    const long SCCmdOption_NoOptions = 0;
    const long SCCmdOption_DoNotRecurse = 1;
    const long SCCmdOption_SkipPromptDialog = 2;
    const long SCCmdOption_ShowPromptDialog = 4;
    const long SCCmdOption_SkipErrorDialog = 8;
    const long SCStatus_NotInSC = 0;
    const long SCStatus_InSC = 1;
    const long SCStatus_CheckedOut = 2;
    const long SCStatus_CheckedOutOther = 4;
    const long SCStatus_CheckedOutMultiple = 16;
    const long SCStatus_CheckedOutByUser = 4096;
    const long SCStatus_Deleted = 64;
    const long SCStatus_OutOfDate = 32;
    const long StepDescOption_NoOptions = 0;
    const long StepDescOption_Long = 1;
    const long StepDescOption_IncludeBreakpoint = 2;
    const long PropTypeFlags_NoFlags = 0;
    const long PropTypeFlags_NoAutoConvertVersions = 1;
    const long PropTypeFlags_DisableEditingInstanceFlags = 2;
    const long PropTypeFlags_PreventEditingType = 4;
    const long PropTypeFlags_NIInstalledType = 33554432;
    const long PropTypeFlags_IsModifiedType = 67108864;
    const long SaveAllSeqFiles_NoOptions = 0;
    const long SaveAllSeqFiles_PromptUser = 1;
    const long ReleaseSeqFile_NoOptions = 0;
    const long ReleaseSeqFile_UnloadFileIfModified = 1;
    const long ReleaseSeqFile_DoNotRunUnloadCallback = 2;
    const long ReleaseSeqFile_UnloadFile = 4;
    const long EditNumFormat_NoOptions = 0;
    const long EditNumFormat_AllowDefaultFormat = 1;
    const long EditNumFormat_ModalToAppMainWind = 65536;

enum InternalOptions
{
    InternalOption_WarnOnAPICallThroughDispatchInterface = 1,
    InternalOption_AutomationAdapterUsesDispatchForDualInterfaces = 2,
    InternalOption_UpdateExternalEnvironments = 3,
    InternalOption_ApplicationManager = 5,
    InternalOption_DisableFloatingWindowsForModalDialogs = 10
};

enum SpecifyStepsByUniqueIdOptions
{
    SpecifyStepsByUniqueIdOption_Ask = 1,
    SpecifyStepsByUniqueIdOption_Yes = 2,
    SpecifyStepsByUniqueIdOption_No = 3
};

enum TimeLimitActions
{
    TimeLimitAction_Abort = 0,
    TimeLimitAction_KillThreads = 1,
    TimeLimitAction_Prompt = 2,
    TimeLimitAction_Terminate = 3
};

enum TimeLimitTypes
{
    TimeLimitType_NormalExecution = 0,
    TimeLimitType_Exiting = 1
};

enum TimeLimitOperations
{
    TimeLimitOperation_Executing = 0,
    TimeLimitOperation_Terminating = 1,
    TimeLimitOperation_Aborting = 2
};
    const long SearchOptions_MatchCase = 1;
    const long SearchOptions_WholeWordOnly = 2;
    const long SearchOptions_RegExpr = 4;
    const long SearchOptions_IncludeSubsequenceFiles = 8;
    const long SearchFilterOptions_Locals = 1;
    const long SearchFilterOptions_Parameters = 2;
    const long SearchFilterOptions_FileGlobals = 4;
    const long SearchFilterOptions_Steps = 8;
    const long SearchFilterOptions_CustomStepProps = 16;
    const long SearchFilterOptions_BuiltinStepProps = 32;
    const long SearchFilterOptions_ModuleStepProps = 64;
    const long SearchFilterOptions_StepTypes = 128;
    const long SearchFilterOptions_CustomDataTypes = 256;
    const long SearchFilterOptions_StandardDataTypes = 512;
    const long SearchFilterOptions_BuiltinSeqAndSeqFileProps = 1024;
    const long SearchFilterOptions_All = 16777215;
    const long SearchFilterOptions_TypesOnly = 16777216;
    const long SearchElement_Name = 1;
    const long SearchElement_Comment = 2;
    const long SearchElement_StringValue = 4;
    const long SearchElement_NumericValue = 8;
    const long SearchElement_BooleanValue = 16;
    const long SearchElement_AllValues = 28;
    const long SearchElement_All = -1;

enum WatchExpressionBreakType
{
    WatchExpressionBreakType_None = 0,
    WatchExpressionBreakType_OnChange = 1,
    WatchExpressionBreakType_OnExpressionTrue = 2
};
    const long WatchExpressionFilter_NoOptions = 0;
    const long WatchExpressionFilter_IncludeGlobals = 1;
    const long WatchExpressionFilter_FilterByExecution = 2;
    const long WatchExpressionFilter_FilterBySequenceFile = 4;
    const long WatchExpressionFilter_FilterBySequence = 8;
    const long CustomUIMsgOptions_NoOptions = 0;
    const long CustomUIMsgOptions_SuppressIfTraceSent = 1;
    const long CustomUIMsgOptions_AppliesToAllThreads = 2;

enum InteractiveBranchModes
{
    InteractiveBranchMode_None = 0,
    InteractiveBranchMode_Ignore = 1,
    InteractiveBranchMode_GotoEnd = 2,
    InteractiveBranchMode_RaiseRTE = 3,
    InteractiveBranchMode_AllowAll = 4
};
    const long XMLOption_NoOptions = 0;
    const long XMLOption_ExcludeComments = 1;
    const long XMLOption_ExcludeFlags = 2;
    const long XMLOption_ExcludeVersionInfo = 4;
    const long XMLOption_ExcludeArrayPrototypes = 512;
    const long XMLOption_ExcludeEmptyObjects = 8;
    const long XMLOption_UseValueFormatIfDefined = 16;
    const long XMLOption_NoIndentation = 32;
    const long XMLOption_NoCRLF = 64;
    const long XMLOption_UseCRLFInsteadOfLF = 128;
    const long XMLOption_ExcludeAliasObjects = 256;

enum ToolMenuTypes
{
    ToolMenuType_Command = 1,
    ToolMenuType_Sequence = 2,
    ToolMenuType_SubMenu = 3,
    ToolMenuType_SequenceFile = 4
};

enum SearchDirectoryTypes
{
    SearchDirectoryType_TestStandDir = 1,
    SearchDirectoryType_TestStandBinDir = 2,
    SearchDirectoryType_AdapterSupportDir = 3,
    SearchDirectoryType_ApplicationDir = 4,
    SearchDirectoryType_InitialWorkingDir = 5,
    SearchDirectoryType_WindowsSystemDir = 6,
    SearchDirectoryType_WindowsDir = 7,
    SearchDirectoryType_PathEnvironmentVarDir = 8,
    SearchDirectoryType_CurrentSequenceFileDir = 9,
    SearchDirectoryType_UserComponentsDir = 11,
    SearchDirectoryType_PublicComponentsDir = 11,
    SearchDirectoryType_NIComponentsDir = 12,
    SearchDirectoryType_CurrentWorkspaceDir = 13,
    SearchDirectoryType_ContainingProjectDir = 14,
    SearchDirectoryType_ExplicitDir = 15,
    SearchDirectoryType_TestStandPublicDir = 16
};

enum CallbackTypes
{
    CallbackType_ModelPostError = 0,
    CallbackType_ModelPostFail = 1,
    CallbackType_ModelPostInteractive = 2,
    CallbackType_ModelPostResult = 3,
    CallbackType_ModelPostStep = 4,
    CallbackType_ModelPreInteractive = 5,
    CallbackType_ModelPreStep = 6,
    CallbackType_SeqFilePostError = 7,
    CallbackType_SeqFilePostFail = 8,
    CallbackType_SeqFilePostInteractive = 9,
    CallbackType_SeqFilePostResult = 10,
    CallbackType_SeqFilePostStep = 11,
    CallbackType_SeqFilePreInteractive = 12,
    CallbackType_SeqFilePreStep = 13,
    CallbackType_StationPostError = 14,
    CallbackType_StationPostFail = 15,
    CallbackType_StationPostInteractive = 16,
    CallbackType_StationPostResult = 17,
    CallbackType_StationPostStep = 18,
    CallbackType_StationPreInteractive = 19,
    CallbackType_StationPreStep = 20
};
    const long TokenizeOption_NoOptions = 0;
    const long TokenizeOption_PreserveComments = 1;
    const long TokenizeOption_RecognizeIncompleteExpression = 3;
    const long TokenizeOption_RecognizeCPPIdentifiers = 4;

enum TokenCode
{
    TokenCode_NotAToken = 0,
    TokenCode_MultiLineComment = 1,
    TokenCode_UnterminatedMultiLineComment = 2,
    TokenCode_SingleLineComment = 3,
    TokenCode_Bad = 4,
    TokenCode_Plus = 5,
    TokenCode_Minus = 6,
    TokenCode_Multiply = 7,
    TokenCode_Divide = 8,
    TokenCode_Modulus = 9,
    TokenCode_PlusPlus = 10,
    TokenCode_MinusMinus = 11,
    TokenCode_GreaterThan = 12,
    TokenCode_GreaterThanEqual = 13,
    TokenCode_LessThan = 14,
    TokenCode_LessThanEqual = 15,
    TokenCode_Equal = 16,
    TokenCode_NotEqual = 17,
    TokenCode_LogicalAnd = 18,
    TokenCode_LogicalOr = 19,
    TokenCode_LogicalNot = 20,
    TokenCode_BitwiseAnd = 21,
    TokenCode_BitwiseOr = 22,
    TokenCode_ExclusiveOr = 23,
    TokenCode_BitwiseNot = 24,
    TokenCode_RightShift = 25,
    TokenCode_LeftShift = 26,
    TokenCode_Assignment = 27,
    TokenCode_PlusAssignment = 28,
    TokenCode_MinusAssignment = 29,
    TokenCode_MultAssignment = 30,
    TokenCode_DivAssignment = 31,
    TokenCode_BitwiseAndAssignment = 32,
    TokenCode_BitwiseOrAssignment = 33,
    TokenCode_ExclusiveOrAssignment = 34,
    TokenCode_RightShiftAssignment = 35,
    TokenCode_LeftShiftAssignment = 36,
    TokenCode_ModAssignment = 37,
    TokenCode_LeftParenthesis = 38,
    TokenCode_RightParenthesis = 39,
    TokenCode_FieldSpecifier = 40,
    TokenCode_LeftBracket = 41,
    TokenCode_RightBracket = 42,
    TokenCode_Separator = 43,
    TokenCode_Conditional = 44,
    TokenCode_Colon = 45,
    TokenCode_Real = 46,
    TokenCode_Integer = 47,
    TokenCode_BinaryInteger = 48,
    TokenCode_HexInteger = 49,
    TokenCode_String = 50,
    TokenCode_UnterminatedString = 51,
    TokenCode_Identifier = 52,
    TokenCode_LeftBrace = 53,
    TokenCode_RightBrace = 54,
    TokenCode_SymbolicConstant = 55,
    TokenCode_OctalInteger = 56
};

enum OutputMessageSeverityTypes
{
    OutputMessageSeverity_Information = 0,
    OutputMessageSeverity_Warning = 1,
    OutputMessageSeverity_Error = 2
};
    const long EditBreakAndWatch_NoOptions = 0;
    const long EditBreakAndWatch_ReadOnly = 131072;
    const long EditBreakAndWatch_ModalToAppMainWind = 65536;
    const long EditBreakAndWatch_DisplayBreakpointTab = 1;
    const long EditBreakAndWatch_DisplayWatchExpressionTab = 2;
    const long SaveWorkspaceFile_NoOptions = 0;
    const long SaveWorkspaceFile_PromptUser = 1;
    const long SaveWorkspaceFile_SkipWorkspaceFile = 2;
    const long SaveWorkspaceFile_SkipReadOnlyFiles = 4;
    const long OpenWorkspaceFile_NoOptions = 0;
    const long OpenWorkspaceFile_IgnoreMissingFiles = 1;
    const long OpenWorkspaceFile_SearchCurrentDirectory = 2;
    const long OpenWorkspaceFile_UseSearchDirectories = 4;
    const long BlockFlag_None = 0;
    const long BlockFlag_Open = 1;
    const long BlockFlag_Close = 2;
    const long BlockFlag_Start = 4;
    const long BlockFlag_End = 8;
    const long BlockFlag_Unmatched = 16;
    const long BlockFlag_AppliesToBlockStructure = 32;
    const long ProtectedObjectOption_None = 0;
    const long ProtectedObjectOption_NotEditable = 1;
    const long ProtectedObjectOption_NotViewable = 2;
    const long LockUnlockDialogOption_None = 0;
    const long LockUnlockDialogOption_Lock = 1;
    const long LockUnlockDialogOption_Unlock = 2;
    const long LockUnlockDialogOption_ModalToAppMainWind = 65536;
    const long SequenceFileDifferOptions_NoOptions = 0;
    const long SequenceFileDifferOptions_IgnoreUniqueStepId = 1;
    const long SequenceFileDifferenceType_NoDifference = 0;
    const long SequenceFileDifferenceType_Insert = 1;
    const long SequenceFileDifferenceType_Delete = 2;
    const long SequenceFileDifferenceType_ChangeType = 4;
    const long SequenceFileDifferenceType_ChangeValue = 8;
    const long SequenceFileDifferenceType_ChangeComment = 16;
    const long SequenceFileDifferenceType_ChangeFlags = 32;
    const long SequenceFileDifferenceType_ChangeNumericFormat = 64;
    const long SequenceFileDifferenceType_ArrayDimensions = 128;
    const long SequenceFileDifferenceType_SubProperties = 256;
    const long SequenceFileDifferenceType_UnknownProblem = 512;
    const long SequenceFileDifferenceType_Attributes = 1024;

enum PropertyObjectElements
{
    PropertyObjectElement_None = 0,
    PropertyObjectElement_Value = 1,
    PropertyObjectElement_Name = 2,
    PropertyObjectElement_Comment = 3,
    PropertyObjectElement_Flags = 4,
    PropertyObjectElement_NumericFormat = 5
};

enum LocationKinds
{
    LocationKind_File = 1,
    LocationKind_Execution = 2,
    LocationKind_Type = 3
};

enum EditKinds
{
    EditKind_None = 0,
    EditKind_ChangeValue = 1,
    EditKind_Rename = 2,
    EditKind_ModifyComment = 3,
    EditKind_ModifyFlags = 4,
    EditKind_ChangeNumericFormat = 5,
    EditKind_InsertProperty = 6,
    EditKind_DeleteProperty = 7,
    EditKind_MoveProperty = 8,
    EditKind_ReplaceProperty = 9,
    EditKind_InsertStep = 10,
    EditKind_DeleteStep = 11,
    EditKind_MoveStep = 12,
    EditKind_InsertSequence = 13,
    EditKind_DeleteSequence = 14,
    EditKind_MoveSequence = 15,
    EditKind_ChangeObject = 16,
    EditKind_ChangeStep = 17,
    EditKind_ChangeSequenceProperties = 18,
    EditKind_ChangeSequenceFileProperties = 19,
    EditKind_ChangeRunMode = 20,
    EditKind_InsertType = 21
};
    const long PropValTypeFlag_Any = -1;
    const long PropValTypeFlag_Boolean = 1;
    const long PropValTypeFlag_Number = 2;
    const long PropValTypeFlag_String = 4;
    const long PropValTypeFlag_Reference = 8;
    const long PropValTypeFlag_Container = 16;
    const long PropValTypeFlag_NamedType = 32;
    const long PropValTypeFlag_BooleanArray = 64;
    const long PropValTypeFlag_NumberArray = 128;
    const long PropValTypeFlag_StringArray = 256;
    const long PropValTypeFlag_ReferenceArray = 512;
    const long PropValTypeFlag_ContainerArray = 1024;
    const long PropValTypeFlag_ArrayOfNamedType = 2048;
    const long PropValTypeFlag_Nothing = 4096;
    const long PropValTypeFlag_Object = 16384;
    const long PropValTypeFlag_PlainReference = 32768;
    const long PropValTypeFlag_PlainContainer = 65536;

enum PerformActionOptions
{
    PerformActionOption_Prompt = 2,
    PerformActionOption_Yes = 0,
    PerformActionOption_No = 1
};
    const long CreateUndoItemOption_NoOptions = 0;
    const long CreateUndoItemOption_CreateOnly = 1;
    const long SerializationOption_NoOptions = 0;
    const long SerializationOption_UseBinary = 1;
    const long SerializationOption_UseXml = 2;
    const long NewThreadOption_NoOptions = 0;
    const long NewThreadOption_AutoWaitAtEndOfSequence = 1;
    const long NewThreadOption_InitiallySuspended = 2;
    const long NewThreadOption_UseSTA = 4;

enum FileWritingFormats
{
    FileWritingFormat_Ini = 1,
    FileWritingFormat_Binary = 2,
    FileWritingFormat_Xml = 3
};

enum PromptResults
{
    PromptResult_Yes = 0,
    PromptResult_No = 1,
    PromptResult_Cancel = 2
};

enum CodeTemplateTypes
{
    CodeTemplateType_Legacy = 1,
    CodeTemplateType_LabVIEW = 2,
    CodeTemplateType_CVI = 3,
    CodeTemplateType_CppOrC = 4,
    CodeTemplateType_VisualCppDotNet = 5,
    CodeTemplateType_VisualCSharpDotNet = 6,
    CodeTemplateType_VisualBasicDotNet = 7,
    CodeTemplateType_HTBasic = 8
};

enum CopyLocationsOptions
{
    CopyLocationsOption_ShallowCopy = 1,
    CopyLocationsOption_DeepCopy = 2
};

enum ApplicationSites
{
    ApplicationSite_DefaultSite = 0,
    ApplicationSite_ItemList = 1,
    ApplicationSite_Variables = 2,
    ApplicationSite_PropertyBrowser = 3,
    ApplicationSite_Settings = 4
};
    const long ParseLookupStringOption_NoOptions = 0;
    const long ParseLookupStringOption_TreatArrayIndicesAsSeparateTokens = 1;
    const long GetTemplatesFileOption_NoOptions = 0;
    const long GetTemplatesFileOption_LoadIfNotLoaded = 1;

enum ApplicationLicenses
{
    ApplicationLicense_Unspecified = 0,
    ApplicationLicense_OperatorInterface = 100,
    ApplicationLicense_CustomEditor = 200,
    ApplicationLicense_SequenceEditor = 300
};
    const long AcquireLicenseOption_NoOptions = 0;
    const long AcquireLicenseOption_SuppressStartupDialog = 1;
    const long AcquireLicenseOption_SuppressStartupDialogIfAlreadyShown = 2;
    const long AcquireLicenseOption_ShowExitButton = 4;
    const long GotoLocationOption_NoOptions = 0;
    const long GotoLocationOption_DoNotDisplayMessageIfLocationNotFound = 1;

enum CheckedStates
{
    CheckedState_Unchecked = 1,
    CheckedState_Checked = 2,
    CheckedState_Indeterminate = 3
};

enum TestStandPaths
{
    TestStandPath_TestStand = 1,
    TestStandPath_Bin = 2,
    TestStandPath_Config = 3,
    TestStandPath_Public = 4,
    TestStandPath_CommonAppData = 5,
    TestStandPath_LocalAppData = 6,
    TestStandPath_PublicComponents = 7,
    TestStandPath_NIComponents = 8
};
    const long TypeEqualOption_NoOptions = 0;
    const long TypeEqualOption_DoNotCompareDimensions = 1;
    const long TypeEqualOption_DoNotCompareIsObject = 2;
    const long EscapingOption_NoOptions = 0;
    const long EscapingOption_SurroundedByQuotes = 1;

enum AllowAutomaticTypeConflictResolutionOptions
{
    AllowAutomaticTypeConflictResolutionOption_Always = 0,
    AllowAutomaticTypeConflictResolutionOption_OnlyIfTypePaletteFilesWillNotBeModified = 1,
    AllowAutomaticTypeConflictResolutionOption_OnlyIfATypePaletteFileHasTheHigherVersion = 2,
    AllowAutomaticTypeConflictResolutionOption_Never = 3
};
    const long FileModificationIndicatorPolicy_DefaultPolicy = 0;
    const long FileModificationIndicatorPolicy_ExcludeTestStandVersionUpgrade = 1;

enum CPUAffinityForNewThreadOptions
{
    CPUAffinityForNewThreadOption_UseStationOption = 0,
    CPUAffinityForNewThreadOption_UseAffinityOfCaller = 1,
    CPUAffinityForNewThreadOption_UseAllCPUs = 2,
    CPUAffinityForNewThreadOption_UseCustomAffinity = 3
};

struct __declspec(uuid("8d572800-fe22-4c5e-b75d-77ef446ac196"))
SearchMatch : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetMatchedText))
    _bstr_t MatchedText;
    __declspec(property(get=GetFileDisplayName))
    _bstr_t FileDisplayName;
    __declspec(property(get=GetFilePath))
    _bstr_t FilePath;
    __declspec(property(get=GetFileId))
    long FileId;
    __declspec(property(get=GetTypeCategoryOfMatch))
    enum TypeCategories TypeCategoryOfMatch;
    __declspec(property(get=GetUserData,put=PutUserData))
    long UserData;
    __declspec(property(get=GetPropertyValueAsString))
    _bstr_t PropertyValueAsString;
    __declspec(property(get=GetPropertyValueType))
    enum PropertyValueTypes PropertyValueType;
    __declspec(property(get=GetMatchIsValid))
    VARIANT_BOOL MatchIsValid;

    //
    // Wrapper methods for error-handling
    //

    HRESULT GetLocation (
        long * matchElement,
        long * matchStart,
        long * matchLength );
    _bstr_t GetPropertyPath (
        VARIANT_BOOL useNamesForIndices );
    _bstr_t GetMatchedText ( );
    _bstr_t GetFileDisplayName ( );
    _bstr_t GetFilePath ( );
    long GetFileId ( );
    HRESULT UpdateForReplace (
        _bstr_t replacementString );
    enum TypeCategories GetTypeCategoryOfMatch ( );
    long GetUserData ( );
    void PutUserData (
        long val );
    _bstr_t GetPropertyValueAsString ( );
    enum PropertyValueTypes GetPropertyValueType ( );
    HRESULT UpdateForReplaceValue (
        _bstr_t newValue );
    VARIANT_BOOL GetMatchIsValid ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetLocation (
        /*[out]*/ long * matchElement,
        /*[out]*/ long * matchStart,
        /*[out]*/ long * matchLength ) = 0;
      virtual HRESULT __stdcall raw_GetPropertyPath (
        /*[in]*/ VARIANT_BOOL useNamesForIndices,
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall get_MatchedText (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall get_FileDisplayName (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall get_FilePath (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall get_FileId (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall raw_UpdateForReplace (
        /*[in]*/ BSTR replacementString ) = 0;
      virtual HRESULT __stdcall get_TypeCategoryOfMatch (
        /*[out,retval]*/ enum TypeCategories * val ) = 0;
      virtual HRESULT __stdcall get_UserData (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall put_UserData (
        /*[in]*/ long val ) = 0;
      virtual HRESULT __stdcall get_PropertyValueAsString (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall get_PropertyValueType (
        /*[out,retval]*/ enum PropertyValueTypes * val ) = 0;
      virtual HRESULT __stdcall raw_UpdateForReplaceValue (
        /*[in]*/ BSTR newValue ) = 0;
      virtual HRESULT __stdcall get_MatchIsValid (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
};

struct __declspec(uuid("609f0003-3088-4c01-bf77-a0d485bf40ba"))
SearchResults : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetNumMatches))
    long NumMatches;
    __declspec(property(get=GetStatusMessage))
    _bstr_t StatusMessage;
    __declspec(property(get=GetNumWarnings))
    long NumWarnings;

    //
    // Wrapper methods for error-handling
    //

    HRESULT Cancel (
        VARIANT_BOOL waitForComplete,
        VARIANT_BOOL processWindowsMsgsWhileWaiting );
    VARIANT_BOOL IsComplete (
        VARIANT_BOOL waitForComplete,
        VARIANT_BOOL processWindowsMsgsWhileWaiting );
    long GetNumMatches ( );
    SearchMatchPtr GetMatch (
        long index );
    _bstr_t GetStatusMessage ( );
    long GetNumWarnings ( );
    _bstr_t GetWarning (
        long index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Cancel (
        /*[in]*/ VARIANT_BOOL waitForComplete,
        /*[in]*/ VARIANT_BOOL processWindowsMsgsWhileWaiting ) = 0;
      virtual HRESULT __stdcall raw_IsComplete (
        /*[in]*/ VARIANT_BOOL waitForComplete,
        /*[in]*/ VARIANT_BOOL processWindowsMsgsWhileWaiting,
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall get_NumMatches (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall raw_GetMatch (
        /*[in]*/ long index,
        /*[out,retval]*/ struct SearchMatch * * val ) = 0;
      virtual HRESULT __stdcall get_StatusMessage (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall get_NumWarnings (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall raw_GetWarning (
        /*[in]*/ long index,
        /*[out,retval]*/ BSTR * val ) = 0;
};

struct __declspec(uuid("65a60a52-3e57-4707-be4b-8d00bc08e32f"))
ArrayDimensions : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetLowerBoundsString))
    _bstr_t LowerBoundsString;
    __declspec(property(get=GetUpperBoundsString))
    _bstr_t UpperBoundsString;
    __declspec(property(get=GetDisplayString))
    _bstr_t DisplayString;

    //
    // Wrapper methods for error-handling
    //

    SAFEARRAY * GetLowerBounds ( );
    SAFEARRAY * GetUpperBounds ( );
    HRESULT SetBounds (
        SAFEARRAY * lowerBounds,
        SAFEARRAY * upperBounds );
    _bstr_t GetLowerBoundsString ( );
    _bstr_t GetUpperBoundsString ( );
    HRESULT SetBoundsByStrings (
        _bstr_t lowerBounds,
        _bstr_t upperBounds );
    SAFEARRAY * GetDimensionsSizes ( );
    _bstr_t GetDisplayString ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetLowerBounds (
        /*[out,retval]*/ SAFEARRAY * * val ) = 0;
      virtual HRESULT __stdcall raw_GetUpperBounds (
        /*[out,retval]*/ SAFEARRAY * * val ) = 0;
      virtual HRESULT __stdcall raw_SetBounds (
        /*[in]*/ SAFEARRAY * lowerBounds,
        /*[in]*/ SAFEARRAY * upperBounds ) = 0;
      virtual HRESULT __stdcall get_LowerBoundsString (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall get_UpperBoundsString (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall raw_SetBoundsByStrings (
        /*[in]*/ BSTR lowerBounds,
        /*[in]*/ BSTR upperBounds ) = 0;
      virtual HRESULT __stdcall raw_GetDimensionsSizes (
        /*[out,retval]*/ SAFEARRAY * * val ) = 0;
      virtual HRESULT __stdcall get_DisplayString (
        /*[out,retval]*/ BSTR * val ) = 0;
};

struct __declspec(uuid("606104e9-6ede-469c-a1fc-181acc1856bc"))
PropertyObjectType : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetValueType))
    enum PropertyValueTypes ValueType;
    __declspec(property(get=GetIsObject))
    VARIANT_BOOL IsObject;
    __declspec(property(get=GetTypeName))
    _bstr_t TypeName;
    __declspec(property(get=GetElementType))
    PropertyObjectTypePtr ElementType;
    __declspec(property(get=GetDisplayString))
    _bstr_t DisplayString;
    __declspec(property(get=GetArrayDimensions))
    ArrayDimensionsPtr ArrayDimensions;

    //
    // Wrapper methods for error-handling
    //

    enum PropertyValueTypes GetValueType ( );
    VARIANT_BOOL GetIsObject ( );
    _bstr_t GetTypeName ( );
    PropertyObjectTypePtr GetElementType ( );
    _bstr_t GetDisplayString ( );
    ArrayDimensionsPtr GetArrayDimensions ( );
    VARIANT_BOOL IsEqualTo (
        struct PropertyObjectType * propObjType,
        long options );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ValueType (
        /*[out,retval]*/ enum PropertyValueTypes * val ) = 0;
      virtual HRESULT __stdcall get_IsObject (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall get_TypeName (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall get_ElementType (
        /*[out,retval]*/ struct PropertyObjectType * * val ) = 0;
      virtual HRESULT __stdcall get_DisplayString (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall get_ArrayDimensions (
        /*[out,retval]*/ struct ArrayDimensions * * val ) = 0;
      virtual HRESULT __stdcall raw_IsEqualTo (
        /*[in]*/ struct PropertyObjectType * propObjType,
        /*[in]*/ long options,
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
};

struct __declspec(uuid("e4f56060-0d05-4aee-8778-d4907340edd2"))
CodeTemplate : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum CodeTemplateTypes Type;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetDescription))
    _bstr_t Description;

    //
    // Wrapper methods for error-handling
    //

    enum CodeTemplateTypes GetType ( );
    _bstr_t GetName ( );
    _bstr_t GetDescription ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum CodeTemplateTypes * val ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * val ) = 0;
};

struct __declspec(uuid("5d5238ad-d7f8-44fa-96fd-65ee662f1358"))
CodeTemplates : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    CodeTemplatePtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    CodeTemplatePtr GetItem (
        const _variant_t & index );
    IUnknownPtr Get_NewEnum ( );
    long GetCount ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT index,
        /*[out,retval]*/ struct CodeTemplate * * val ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * enumerator ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * val ) = 0;
};

struct __declspec(uuid("88283700-cbb1-441e-bbed-f4e8267b0cf1"))
SearchDirectory : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType))
    enum SearchDirectoryTypes Type;
    __declspec(property(get=GetPath,put=PutPath))
    _bstr_t Path;
    __declspec(property(get=GetSearchSubdirectories,put=PutSearchSubdirectories))
    VARIANT_BOOL SearchSubdirectories;
    __declspec(property(get=GetFileExtensionRestrictions,put=PutFileExtensionRestrictions))
    _bstr_t FileExtensionRestrictions;
    __declspec(property(get=GetExcludeFileExtension,put=PutExcludeFileExtension))
    VARIANT_BOOL ExcludeFileExtension;
    __declspec(property(get=GetDisabled,put=PutDisabled))
    VARIANT_BOOL Disabled;

    //
    // Wrapper methods for error-handling
    //

    enum SearchDirectoryTypes GetType ( );
    _bstr_t GetPath ( );
    void PutPath (
        _bstr_t val );
    VARIANT_BOOL GetSearchSubdirectories ( );
    void PutSearchSubdirectories (
        VARIANT_BOOL val );
    _bstr_t GetFileExtensionRestrictions ( );
    void PutFileExtensionRestrictions (
        _bstr_t val );
    VARIANT_BOOL GetExcludeFileExtension ( );
    void PutExcludeFileExtension (
        VARIANT_BOOL val );
    VARIANT_BOOL GetDisabled ( );
    void PutDisabled (
        VARIANT_BOOL val );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum SearchDirectoryTypes * val ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_Path (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_SearchSubdirectories (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_SearchSubdirectories (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_FileExtensionRestrictions (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_FileExtensionRestrictions (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_ExcludeFileExtension (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_ExcludeFileExtension (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_Disabled (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_Disabled (
        /*[in]*/ VARIANT_BOOL val ) = 0;
};

struct __declspec(uuid("c5b9c8ef-3cbb-485b-b7f4-02bb1ebcd676"))
SearchDirectories : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    SearchDirectoryPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    SearchDirectoryPtr GetItem (
        const _variant_t & index );
    IUnknownPtr Get_NewEnum ( );
    long GetCount ( );
    HRESULT Insert (
        _bstr_t Path,
        long index,
        VARIANT_BOOL searchSubDirs,
        _bstr_t fileExtRestrict,
        VARIANT_BOOL exclude,
        VARIANT_BOOL Disabled );
    HRESULT Remove (
        long index );
    HRESULT MoveSearchDirectory (
        long index,
        long newIndex );
    HRESULT Reload ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT index,
        /*[out,retval]*/ struct SearchDirectory * * SearchDirectory ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * enumerator ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall raw_Insert (
        /*[in]*/ BSTR Path,
        /*[in]*/ long index,
        /*[in]*/ VARIANT_BOOL searchSubDirs,
        /*[in]*/ BSTR fileExtRestrict,
        /*[in]*/ VARIANT_BOOL exclude,
        /*[in]*/ VARIANT_BOOL Disabled ) = 0;
      virtual HRESULT __stdcall raw_Remove (
        /*[in]*/ long index ) = 0;
      virtual HRESULT __stdcall raw_MoveSearchDirectory (
        /*[in]*/ long index,
        /*[in]*/ long newIndex ) = 0;
      virtual HRESULT __stdcall raw_Reload ( ) = 0;
};

struct __declspec(uuid("bb1aac62-b7c6-49b4-8b5b-3616edd86c7a"))
ExternalReportViewer : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetFormat,put=PutFormat))
    _bstr_t Format;
    __declspec(property(get=GetArguments,put=PutArguments))
    _bstr_t Arguments;
    __declspec(property(get=GetPath,put=PutPath))
    _bstr_t Path;
    __declspec(property(get=GetAutoLaunch,put=PutAutoLaunch))
    VARIANT_BOOL AutoLaunch;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetFormat ( );
    void PutFormat (
        _bstr_t val );
    _bstr_t GetArguments ( );
    void PutArguments (
        _bstr_t val );
    _bstr_t GetPath ( );
    void PutPath (
        _bstr_t val );
    VARIANT_BOOL GetAutoLaunch ( );
    void PutAutoLaunch (
        VARIANT_BOOL val );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Format (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_Format (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_Arguments (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_Arguments (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_Path (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_AutoLaunch (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_AutoLaunch (
        /*[in]*/ VARIANT_BOOL val ) = 0;
};

struct __declspec(uuid("fb6264d6-05b4-40cb-902d-46834d109c76"))
ExternalReportViewers : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    ExternalReportViewerPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetAutoLaunchDefaultExternalViewers,put=PutAutoLaunchDefaultExternalViewers))
    VARIANT_BOOL AutoLaunchDefaultExternalViewers;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    ExternalReportViewerPtr GetItem (
        const _variant_t & index );
    IUnknownPtr Get_NewEnum ( );
    long GetCount ( );
    HRESULT Add (
        _bstr_t Format,
        _bstr_t Path,
        _bstr_t Arguments,
        VARIANT_BOOL AutoLaunch );
    HRESULT Remove (
        long index );
    VARIANT_BOOL GetAutoLaunchDefaultExternalViewers ( );
    void PutAutoLaunchDefaultExternalViewers (
        VARIANT_BOOL isEnabled );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT index,
        /*[out,retval]*/ struct ExternalReportViewer * * ExternalReportViewer ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * enumerator ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ BSTR Format,
        /*[in]*/ BSTR Path,
        /*[in]*/ BSTR Arguments,
        /*[in]*/ VARIANT_BOOL AutoLaunch ) = 0;
      virtual HRESULT __stdcall raw_Remove (
        /*[in]*/ long index ) = 0;
      virtual HRESULT __stdcall get_AutoLaunchDefaultExternalViewers (
        /*[out,retval]*/ VARIANT_BOOL * isEnabled ) = 0;
      virtual HRESULT __stdcall put_AutoLaunchDefaultExternalViewers (
        /*[in]*/ VARIANT_BOOL isEnabled ) = 0;
};

struct __declspec(uuid("776c8a16-3de3-4a67-8961-b2f3010aa77a"))
EvaluationTypes : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPropertyValueTypeFlags,put=PutPropertyValueTypeFlags))
    long PropertyValueTypeFlags;
    __declspec(property(get=GetNamedTypes,put=PutNamedTypes))
    SAFEARRAY * NamedTypes;
    __declspec(property(get=GetArrayOfNamedTypes,put=PutArrayOfNamedTypes))
    SAFEARRAY * ArrayOfNamedTypes;

    //
    // Wrapper methods for error-handling
    //

    long GetPropertyValueTypeFlags ( );
    void PutPropertyValueTypeFlags (
        long val );
    SAFEARRAY * GetNamedTypes ( );
    void PutNamedTypes (
        SAFEARRAY * val );
    SAFEARRAY * GetArrayOfNamedTypes ( );
    void PutArrayOfNamedTypes (
        SAFEARRAY * val );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_PropertyValueTypeFlags (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall put_PropertyValueTypeFlags (
        /*[in]*/ long val ) = 0;
      virtual HRESULT __stdcall get_NamedTypes (
        /*[out,retval]*/ SAFEARRAY * * val ) = 0;
      virtual HRESULT __stdcall put_NamedTypes (
        /*[in]*/ SAFEARRAY * val ) = 0;
      virtual HRESULT __stdcall get_ArrayOfNamedTypes (
        /*[out,retval]*/ SAFEARRAY * * val ) = 0;
      virtual HRESULT __stdcall put_ArrayOfNamedTypes (
        /*[in]*/ SAFEARRAY * val ) = 0;
};

struct __declspec(uuid("88b00fa9-d5b1-419b-a0b0-931cddbf9295"))
StationOptions : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetUserFilePath,put=PutUserFilePath))
    _bstr_t UserFilePath;
    __declspec(property(get=GetEnableUserPrivilegeChecking,put=PutEnableUserPrivilegeChecking))
    VARIANT_BOOL EnableUserPrivilegeChecking;
    __declspec(property(get=GetAutoLoginSystemUser,put=PutAutoLoginSystemUser))
    VARIANT_BOOL AutoLoginSystemUser;
    __declspec(property(get=GetRequireUserLogin,put=PutRequireUserLogin))
    VARIANT_BOOL RequireUserLogin;
    __declspec(property(get=GetRTEOption,put=PutRTEOption))
    enum RTEOptions RTEOption;
    __declspec(property(get=GetTracingEnabled,put=PutTracingEnabled))
    VARIANT_BOOL TracingEnabled;
    __declspec(property(get=GetBreakpointsEnabled,put=PutBreakpointsEnabled))
    VARIANT_BOOL BreakpointsEnabled;
    __declspec(property(get=GetDisableResults,put=PutDisableResults))
    VARIANT_BOOL DisableResults;
    __declspec(property(get=GetAlwaysGotoCleanupOnFailure,put=PutAlwaysGotoCleanupOnFailure))
    VARIANT_BOOL AlwaysGotoCleanupOnFailure;
    __declspec(property(get=GetExecutionMask,put=PutExecutionMask))
    long ExecutionMask;
    __declspec(property(get=GetInteractiveBranchMode,put=PutInteractiveBranchMode))
    enum InteractiveBranchModes InteractiveBranchMode;
    __declspec(property(get=GetShowHiddenProperties,put=PutShowHiddenProperties))
    VARIANT_BOOL ShowHiddenProperties;
    __declspec(property(get=GetPromptToFindFiles,put=PutPromptToFindFiles))
    VARIANT_BOOL PromptToFindFiles;
    __declspec(property(get=GetSeqFileVersionAutoIncrementOpt,put=PutSeqFileVersionAutoIncrementOpt))
    enum FileVersionAutoIncrement SeqFileVersionAutoIncrementOpt;
    __declspec(property(get=GetTypeVersionAutoIncrementOpt,put=PutTypeVersionAutoIncrementOpt))
    enum TypeVersionAutoIncrement TypeVersionAutoIncrementOpt;
    __declspec(property(get=GetTypeVersionAutoIncrementPromptOpt,put=PutTypeVersionAutoIncrementPromptOpt))
    VARIANT_BOOL TypeVersionAutoIncrementPromptOpt;
    __declspec(property(get=GetReloadDocsWhenOpeningWorkspace,put=PutReloadDocsWhenOpeningWorkspace))
    VARIANT_BOOL ReloadDocsWhenOpeningWorkspace;
    __declspec(property(get=GetReloadWorkspaceAtStartup,put=PutReloadWorkspaceAtStartup))
    VARIANT_BOOL ReloadWorkspaceAtStartup;
    __declspec(property(get=GetStationID,put=PutStationID))
    _bstr_t StationID;
    __declspec(property(get=GetSpecifyStepsByUniqueIdInExpressions,put=PutSpecifyStepsByUniqueIdInExpressions))
    enum SpecifyStepsByUniqueIdOptions SpecifyStepsByUniqueIdInExpressions;
    __declspec(property(get=GetUseStationModel,put=PutUseStationModel))
    VARIANT_BOOL UseStationModel;
    __declspec(property(get=GetAllowOtherModels,put=PutAllowOtherModels))
    VARIANT_BOOL AllowOtherModels;
    __declspec(property(get=GetStationModelSequenceFilePath,put=PutStationModelSequenceFilePath))
    _bstr_t StationModelSequenceFilePath;
    __declspec(property(get=GetLanguage,put=PutLanguage))
    _bstr_t Language;
    __declspec(property(get=GetUseLocalizedDecimalPoint,put=PutUseLocalizedDecimalPoint))
    VARIANT_BOOL UseLocalizedDecimalPoint;
    __declspec(property(get=GetRecognizeMBChars,put=PutRecognizeMBChars))
    VARIANT_BOOL RecognizeMBChars;
    __declspec(property(get=GetAllowSequenceCallsFromRemoteMachine,put=PutAllowSequenceCallsFromRemoteMachine))
    VARIANT_BOOL AllowSequenceCallsFromRemoteMachine;
    __declspec(property(get=GetAllowAllUsersAccessFromRemoteMachine,put=PutAllowAllUsersAccessFromRemoteMachine))
    VARIANT_BOOL AllowAllUsersAccessFromRemoteMachine;
    __declspec(property(get=GetShowEngineTrayIconOnRemoteStations,put=PutShowEngineTrayIconOnRemoteStations))
    VARIANT_BOOL ShowEngineTrayIconOnRemoteStations;
    __declspec(property(get=GetCheckOutFilesWhenEdited,put=PutCheckOutFilesWhenEdited))
    VARIANT_BOOL CheckOutFilesWhenEdited;
    __declspec(property(get=GetPromptWhenAddingFilesToSC,put=PutPromptWhenAddingFilesToSC))
    VARIANT_BOOL PromptWhenAddingFilesToSC;
    __declspec(property(get=GetUseDialogForCheckOut,put=PutUseDialogForCheckOut))
    VARIANT_BOOL UseDialogForCheckOut;
    __declspec(property(get=GetCheckOutOnlySelectedFiles,put=PutCheckOutOnlySelectedFiles))
    VARIANT_BOOL CheckOutOnlySelectedFiles;
    __declspec(property(get=GetSystemDefaultSourceCodeControlProvider,put=PutSystemDefaultSourceCodeControlProvider))
    _bstr_t SystemDefaultSourceCodeControlProvider;
    __declspec(property(get=GetUIMessageDelay,put=PutUIMessageDelay))
    long UIMessageDelay;
    __declspec(property(get=GetUIMessageMinDelay,put=PutUIMessageMinDelay))
    long UIMessageMinDelay;
    __declspec(property(get=GetInteractiveExePropagateStatus,put=PutInteractiveExePropagateStatus))
    VARIANT_BOOL InteractiveExePropagateStatus;
    __declspec(property(get=GetBreakOnStepFailure,put=PutBreakOnStepFailure))
    VARIANT_BOOL BreakOnStepFailure;
    __declspec(property(get=GetBreakOnSequenceFailure,put=PutBreakOnSequenceFailure))
    VARIANT_BOOL BreakOnSequenceFailure;
    __declspec(property(get=GetDebugOptions,put=PutDebugOptions))
    long DebugOptions;
    __declspec(property(get=GetDefaultFileWritingFormat,put=PutDefaultFileWritingFormat))
    enum FileWritingFormats DefaultFileWritingFormat;
    __declspec(property(get=GetAllowAutomaticTypeConflictResolution,put=PutAllowAutomaticTypeConflictResolution))
    enum AllowAutomaticTypeConflictResolutionOptions AllowAutomaticTypeConflictResolution;
    __declspec(property(get=GetFileModificationIndicatorPolicy,put=PutFileModificationIndicatorPolicy))
    long FileModificationIndicatorPolicy;
    __declspec(property(get=GetDefaultCPUAffinityForThreads,put=PutDefaultCPUAffinityForThreads))
    long DefaultCPUAffinityForThreads;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetUserFilePath ( );
    void PutUserFilePath (
        _bstr_t val );
    VARIANT_BOOL GetEnableUserPrivilegeChecking ( );
    void PutEnableUserPrivilegeChecking (
        VARIANT_BOOL enabled );
    VARIANT_BOOL GetAutoLoginSystemUser ( );
    void PutAutoLoginSystemUser (
        VARIANT_BOOL enabled );
    VARIANT_BOOL GetRequireUserLogin ( );
    void PutRequireUserLogin (
        VARIANT_BOOL requireUser );
    enum RTEOptions GetRTEOption ( );
    void PutRTEOption (
        enum RTEOptions option );
    VARIANT_BOOL GetTracingEnabled ( );
    void PutTracingEnabled (
        VARIANT_BOOL isEnabled );
    VARIANT_BOOL GetBreakpointsEnabled ( );
    void PutBreakpointsEnabled (
        VARIANT_BOOL isEnabled );
    VARIANT_BOOL GetDisableResults ( );
    void PutDisableResults (
        VARIANT_BOOL isDisabled );
    VARIANT_BOOL GetAlwaysGotoCleanupOnFailure ( );
    void PutAlwaysGotoCleanupOnFailure (
        VARIANT_BOOL isEnabled );
    long GetExecutionMask ( );
    void PutExecutionMask (
        long val );
    enum InteractiveBranchModes GetInteractiveBranchMode ( );
    void PutInteractiveBranchMode (
        enum InteractiveBranchModes mode );
    VARIANT_BOOL GetTimeLimitEnabled (
        enum TimeLimitTypes Type,
        enum TimeLimitOperations operation );
    HRESULT SetTimeLimitEnabled (
        enum TimeLimitTypes Type,
        enum TimeLimitOperations operation,
        VARIANT_BOOL enabled );
    double GetTimeLimit (
        enum TimeLimitTypes Type,
        enum TimeLimitOperations operation );
    HRESULT SetTimeLimit (
        enum TimeLimitTypes Type,
        enum TimeLimitOperations operation,
        double timeLimit );
    enum TimeLimitActions GetTimeLimitAction (
        enum TimeLimitTypes Type,
        enum TimeLimitOperations operation );
    HRESULT SetTimeLimitAction (
        enum TimeLimitTypes Type,
        enum TimeLimitOperations operation,
        enum TimeLimitActions action );
    VARIANT_BOOL GetShowHiddenProperties ( );
    void PutShowHiddenProperties (
        VARIANT_BOOL show );
    VARIANT_BOOL GetPromptToFindFiles ( );
    void PutPromptToFindFiles (
        VARIANT_BOOL isEnabled );
    enum FileVersionAutoIncrement GetSeqFileVersionAutoIncrementOpt ( );
    void PutSeqFileVersionAutoIncrementOpt (
        enum FileVersionAutoIncrement option );
    enum TypeVersionAutoIncrement GetTypeVersionAutoIncrementOpt ( );
    void PutTypeVersionAutoIncrementOpt (
        enum TypeVersionAutoIncrement option );
    VARIANT_BOOL GetTypeVersionAutoIncrementPromptOpt ( );
    void PutTypeVersionAutoIncrementPromptOpt (
        VARIANT_BOOL option );
    VARIANT_BOOL GetReloadDocsWhenOpeningWorkspace ( );
    void PutReloadDocsWhenOpeningWorkspace (
        VARIANT_BOOL reloadDocs );
    VARIANT_BOOL GetReloadWorkspaceAtStartup ( );
    void PutReloadWorkspaceAtStartup (
        VARIANT_BOOL reloadWorkspace );
    _bstr_t GetStationID ( );
    void PutStationID (
        _bstr_t val );
    void PutSpecifyStepsByUniqueIdInExpressions (
        enum SpecifyStepsByUniqueIdOptions option );
    enum SpecifyStepsByUniqueIdOptions GetSpecifyStepsByUniqueIdInExpressions ( );
    VARIANT_BOOL GetUseStationModel ( );
    void PutUseStationModel (
        VARIANT_BOOL isEnabled );
    VARIANT_BOOL GetAllowOtherModels ( );
    void PutAllowOtherModels (
        VARIANT_BOOL isEnabled );
    _bstr_t GetStationModelSequenceFilePath ( );
    void PutStationModelSequenceFilePath (
        _bstr_t ModelPath );
    _bstr_t GetLanguage ( );
    void PutLanguage (
        _bstr_t Language );
    VARIANT_BOOL GetUseLocalizedDecimalPoint ( );
    void PutUseLocalizedDecimalPoint (
        VARIANT_BOOL enabled );
    VARIANT_BOOL GetRecognizeMBChars ( );
    void PutRecognizeMBChars (
        VARIANT_BOOL isEnabled );
    SAFEARRAY * GetLanguages ( );
    VARIANT_BOOL GetAllowSequenceCallsFromRemoteMachine ( );
    void PutAllowSequenceCallsFromRemoteMachine (
        VARIANT_BOOL isEnabled );
    VARIANT_BOOL GetAllowAllUsersAccessFromRemoteMachine ( );
    void PutAllowAllUsersAccessFromRemoteMachine (
        VARIANT_BOOL isEnabled );
    VARIANT_BOOL GetShowEngineTrayIconOnRemoteStations ( );
    void PutShowEngineTrayIconOnRemoteStations (
        VARIANT_BOOL isEnabled );
    VARIANT_BOOL GetCheckOutFilesWhenEdited ( );
    void PutCheckOutFilesWhenEdited (
        VARIANT_BOOL checkOutFiles );
    VARIANT_BOOL GetPromptWhenAddingFilesToSC ( );
    void PutPromptWhenAddingFilesToSC (
        VARIANT_BOOL promptAddFile );
    VARIANT_BOOL GetUseDialogForCheckOut ( );
    void PutUseDialogForCheckOut (
        VARIANT_BOOL useDialog );
    VARIANT_BOOL GetCheckOutOnlySelectedFiles ( );
    void PutCheckOutOnlySelectedFiles (
        VARIANT_BOOL onlySelectedFiles );
    _bstr_t GetSystemDefaultSourceCodeControlProvider ( );
    void PutSystemDefaultSourceCodeControlProvider (
        _bstr_t val );
    long GetUIMessageDelay ( );
    void PutUIMessageDelay (
        long millisecDelay );
    long GetUIMessageMinDelay ( );
    void PutUIMessageMinDelay (
        long millisecDelay );
    VARIANT_BOOL GetInteractiveExePropagateStatus ( );
    void PutInteractiveExePropagateStatus (
        VARIANT_BOOL isEnabled );
    VARIANT_BOOL GetBreakOnStepFailure ( );
    void PutBreakOnStepFailure (
        VARIANT_BOOL isEnabled );
    VARIANT_BOOL GetBreakOnSequenceFailure ( );
    void PutBreakOnSequenceFailure (
        VARIANT_BOOL isEnabled );
    long GetDebugOptions ( );
    void PutDebugOptions (
        long val );
    enum FileWritingFormats GetDefaultFileWritingFormat ( );
    void PutDefaultFileWritingFormat (
        enum FileWritingFormats returnVal );
    enum AllowAutomaticTypeConflictResolutionOptions GetAllowAutomaticTypeConflictResolution ( );
    void PutAllowAutomaticTypeConflictResolution (
        enum AllowAutomaticTypeConflictResolutionOptions val );
    long GetFileModificationIndicatorPolicy ( );
    void PutFileModificationIndicatorPolicy (
        long val );
    long GetDefaultCPUAffinityForThreads ( );
    void PutDefaultCPUAffinityForThreads (
        long val );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_UserFilePath (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_UserFilePath (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_EnableUserPrivilegeChecking (
        /*[out,retval]*/ VARIANT_BOOL * enabled ) = 0;
      virtual HRESULT __stdcall put_EnableUserPrivilegeChecking (
        /*[in]*/ VARIANT_BOOL enabled ) = 0;
      virtual HRESULT __stdcall get_AutoLoginSystemUser (
        /*[out,retval]*/ VARIANT_BOOL * enabled ) = 0;
      virtual HRESULT __stdcall put_AutoLoginSystemUser (
        /*[in]*/ VARIANT_BOOL enabled ) = 0;
      virtual HRESULT __stdcall get_RequireUserLogin (
        /*[out,retval]*/ VARIANT_BOOL * requireUser ) = 0;
      virtual HRESULT __stdcall put_RequireUserLogin (
        /*[in]*/ VARIANT_BOOL requireUser ) = 0;
      virtual HRESULT __stdcall get_RTEOption (
        /*[out,retval]*/ enum RTEOptions * option ) = 0;
      virtual HRESULT __stdcall put_RTEOption (
        /*[in]*/ enum RTEOptions option ) = 0;
      virtual HRESULT __stdcall get_TracingEnabled (
        /*[out,retval]*/ VARIANT_BOOL * isEnabled ) = 0;
      virtual HRESULT __stdcall put_TracingEnabled (
        /*[in]*/ VARIANT_BOOL isEnabled ) = 0;
      virtual HRESULT __stdcall get_BreakpointsEnabled (
        /*[out,retval]*/ VARIANT_BOOL * isEnabled ) = 0;
      virtual HRESULT __stdcall put_BreakpointsEnabled (
        /*[in]*/ VARIANT_BOOL isEnabled ) = 0;
      virtual HRESULT __stdcall get_DisableResults (
        /*[out,retval]*/ VARIANT_BOOL * isDisabled ) = 0;
      virtual HRESULT __stdcall put_DisableResults (
        /*[in]*/ VARIANT_BOOL isDisabled ) = 0;
      virtual HRESULT __stdcall get_AlwaysGotoCleanupOnFailure (
        /*[out,retval]*/ VARIANT_BOOL * isEnabled ) = 0;
      virtual HRESULT __stdcall put_AlwaysGotoCleanupOnFailure (
        /*[in]*/ VARIANT_BOOL isEnabled ) = 0;
      virtual HRESULT __stdcall get_ExecutionMask (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall put_ExecutionMask (
        /*[in]*/ long val ) = 0;
      virtual HRESULT __stdcall get_InteractiveBranchMode (
        /*[out,retval]*/ enum InteractiveBranchModes * mode ) = 0;
      virtual HRESULT __stdcall put_InteractiveBranchMode (
        /*[in]*/ enum InteractiveBranchModes mode ) = 0;
      virtual HRESULT __stdcall raw_GetTimeLimitEnabled (
        /*[in]*/ enum TimeLimitTypes Type,
        /*[in]*/ enum TimeLimitOperations operation,
        /*[out,retval]*/ VARIANT_BOOL * isEnabled ) = 0;
      virtual HRESULT __stdcall raw_SetTimeLimitEnabled (
        /*[in]*/ enum TimeLimitTypes Type,
        /*[in]*/ enum TimeLimitOperations operation,
        /*[in]*/ VARIANT_BOOL enabled ) = 0;
      virtual HRESULT __stdcall raw_GetTimeLimit (
        /*[in]*/ enum TimeLimitTypes Type,
        /*[in]*/ enum TimeLimitOperations operation,
        /*[out,retval]*/ double * timeLimit ) = 0;
      virtual HRESULT __stdcall raw_SetTimeLimit (
        /*[in]*/ enum TimeLimitTypes Type,
        /*[in]*/ enum TimeLimitOperations operation,
        /*[in]*/ double timeLimit ) = 0;
      virtual HRESULT __stdcall raw_GetTimeLimitAction (
        /*[in]*/ enum TimeLimitTypes Type,
        /*[in]*/ enum TimeLimitOperations operation,
        /*[out,retval]*/ enum TimeLimitActions * action ) = 0;
      virtual HRESULT __stdcall raw_SetTimeLimitAction (
        /*[in]*/ enum TimeLimitTypes Type,
        /*[in]*/ enum TimeLimitOperations operation,
        /*[in]*/ enum TimeLimitActions action ) = 0;
      virtual HRESULT __stdcall get_ShowHiddenProperties (
        /*[out,retval]*/ VARIANT_BOOL * show ) = 0;
      virtual HRESULT __stdcall put_ShowHiddenProperties (
        /*[in]*/ VARIANT_BOOL show ) = 0;
      virtual HRESULT __stdcall get_PromptToFindFiles (
        /*[out,retval]*/ VARIANT_BOOL * isEnabled ) = 0;
      virtual HRESULT __stdcall put_PromptToFindFiles (
        /*[in]*/ VARIANT_BOOL isEnabled ) = 0;
      virtual HRESULT __stdcall get_SeqFileVersionAutoIncrementOpt (
        /*[out,retval]*/ enum FileVersionAutoIncrement * option ) = 0;
      virtual HRESULT __stdcall put_SeqFileVersionAutoIncrementOpt (
        /*[in]*/ enum FileVersionAutoIncrement option ) = 0;
      virtual HRESULT __stdcall get_TypeVersionAutoIncrementOpt (
        /*[out,retval]*/ enum TypeVersionAutoIncrement * option ) = 0;
      virtual HRESULT __stdcall put_TypeVersionAutoIncrementOpt (
        /*[in]*/ enum TypeVersionAutoIncrement option ) = 0;
      virtual HRESULT __stdcall get_TypeVersionAutoIncrementPromptOpt (
        /*[out,retval]*/ VARIANT_BOOL * option ) = 0;
      virtual HRESULT __stdcall put_TypeVersionAutoIncrementPromptOpt (
        /*[in]*/ VARIANT_BOOL option ) = 0;
      virtual HRESULT __stdcall get_ReloadDocsWhenOpeningWorkspace (
        /*[out,retval]*/ VARIANT_BOOL * reloadDocs ) = 0;
      virtual HRESULT __stdcall put_ReloadDocsWhenOpeningWorkspace (
        /*[in]*/ VARIANT_BOOL reloadDocs ) = 0;
      virtual HRESULT __stdcall get_ReloadWorkspaceAtStartup (
        /*[out,retval]*/ VARIANT_BOOL * reloadWorkspace ) = 0;
      virtual HRESULT __stdcall put_ReloadWorkspaceAtStartup (
        /*[in]*/ VARIANT_BOOL reloadWorkspace ) = 0;
      virtual HRESULT __stdcall get_StationID (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_StationID (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall put_SpecifyStepsByUniqueIdInExpressions (
        /*[in]*/ enum SpecifyStepsByUniqueIdOptions option ) = 0;
      virtual HRESULT __stdcall get_SpecifyStepsByUniqueIdInExpressions (
        /*[out,retval]*/ enum SpecifyStepsByUniqueIdOptions * option ) = 0;
      virtual HRESULT __stdcall get_UseStationModel (
        /*[out,retval]*/ VARIANT_BOOL * isEnabled ) = 0;
      virtual HRESULT __stdcall put_UseStationModel (
        /*[in]*/ VARIANT_BOOL isEnabled ) = 0;
      virtual HRESULT __stdcall get_AllowOtherModels (
        /*[out,retval]*/ VARIANT_BOOL * isEnabled ) = 0;
      virtual HRESULT __stdcall put_AllowOtherModels (
        /*[in]*/ VARIANT_BOOL isEnabled ) = 0;
      virtual HRESULT __stdcall get_StationModelSequenceFilePath (
        /*[out,retval]*/ BSTR * ModelPath ) = 0;
      virtual HRESULT __stdcall put_StationModelSequenceFilePath (
        /*[in]*/ BSTR ModelPath ) = 0;
      virtual HRESULT __stdcall get_Language (
        /*[out,retval]*/ BSTR * Language ) = 0;
      virtual HRESULT __stdcall put_Language (
        /*[in]*/ BSTR Language ) = 0;
      virtual HRESULT __stdcall get_UseLocalizedDecimalPoint (
        /*[out,retval]*/ VARIANT_BOOL * enabled ) = 0;
      virtual HRESULT __stdcall put_UseLocalizedDecimalPoint (
        /*[in]*/ VARIANT_BOOL enabled ) = 0;
      virtual HRESULT __stdcall get_RecognizeMBChars (
        /*[out,retval]*/ VARIANT_BOOL * isEnabled ) = 0;
      virtual HRESULT __stdcall put_RecognizeMBChars (
        /*[in]*/ VARIANT_BOOL isEnabled ) = 0;
      virtual HRESULT __stdcall raw_GetLanguages (
        /*[out,retval]*/ SAFEARRAY * * languages ) = 0;
      virtual HRESULT __stdcall get_AllowSequenceCallsFromRemoteMachine (
        /*[out,retval]*/ VARIANT_BOOL * isEnabled ) = 0;
      virtual HRESULT __stdcall put_AllowSequenceCallsFromRemoteMachine (
        /*[in]*/ VARIANT_BOOL isEnabled ) = 0;
      virtual HRESULT __stdcall get_AllowAllUsersAccessFromRemoteMachine (
        /*[out,retval]*/ VARIANT_BOOL * isEnabled ) = 0;
      virtual HRESULT __stdcall put_AllowAllUsersAccessFromRemoteMachine (
        /*[in]*/ VARIANT_BOOL isEnabled ) = 0;
      virtual HRESULT __stdcall get_ShowEngineTrayIconOnRemoteStations (
        /*[out,retval]*/ VARIANT_BOOL * isEnabled ) = 0;
      virtual HRESULT __stdcall put_ShowEngineTrayIconOnRemoteStations (
        /*[in]*/ VARIANT_BOOL isEnabled ) = 0;
      virtual HRESULT __stdcall get_CheckOutFilesWhenEdited (
        /*[out,retval]*/ VARIANT_BOOL * checkOutFiles ) = 0;
      virtual HRESULT __stdcall put_CheckOutFilesWhenEdited (
        /*[in]*/ VARIANT_BOOL checkOutFiles ) = 0;
      virtual HRESULT __stdcall get_PromptWhenAddingFilesToSC (
        /*[out,retval]*/ VARIANT_BOOL * promptAddFile ) = 0;
      virtual HRESULT __stdcall put_PromptWhenAddingFilesToSC (
        /*[in]*/ VARIANT_BOOL promptAddFile ) = 0;
      virtual HRESULT __stdcall get_UseDialogForCheckOut (
        /*[out,retval]*/ VARIANT_BOOL * useDialog ) = 0;
      virtual HRESULT __stdcall put_UseDialogForCheckOut (
        /*[in]*/ VARIANT_BOOL useDialog ) = 0;
      virtual HRESULT __stdcall get_CheckOutOnlySelectedFiles (
        /*[out,retval]*/ VARIANT_BOOL * onlySelectedFiles ) = 0;
      virtual HRESULT __stdcall put_CheckOutOnlySelectedFiles (
        /*[in]*/ VARIANT_BOOL onlySelectedFiles ) = 0;
      virtual HRESULT __stdcall get_SystemDefaultSourceCodeControlProvider (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_SystemDefaultSourceCodeControlProvider (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_UIMessageDelay (
        /*[out,retval]*/ long * millisecDelay ) = 0;
      virtual HRESULT __stdcall put_UIMessageDelay (
        /*[in]*/ long millisecDelay ) = 0;
      virtual HRESULT __stdcall get_UIMessageMinDelay (
        /*[out,retval]*/ long * millisecDelay ) = 0;
      virtual HRESULT __stdcall put_UIMessageMinDelay (
        /*[in]*/ long millisecDelay ) = 0;
      virtual HRESULT __stdcall get_InteractiveExePropagateStatus (
        /*[out,retval]*/ VARIANT_BOOL * isEnabled ) = 0;
      virtual HRESULT __stdcall put_InteractiveExePropagateStatus (
        /*[in]*/ VARIANT_BOOL isEnabled ) = 0;
      virtual HRESULT __stdcall get_BreakOnStepFailure (
        /*[out,retval]*/ VARIANT_BOOL * isEnabled ) = 0;
      virtual HRESULT __stdcall put_BreakOnStepFailure (
        /*[in]*/ VARIANT_BOOL isEnabled ) = 0;
      virtual HRESULT __stdcall get_BreakOnSequenceFailure (
        /*[out,retval]*/ VARIANT_BOOL * isEnabled ) = 0;
      virtual HRESULT __stdcall put_BreakOnSequenceFailure (
        /*[in]*/ VARIANT_BOOL isEnabled ) = 0;
      virtual HRESULT __stdcall get_DebugOptions (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall put_DebugOptions (
        /*[in]*/ long val ) = 0;
      virtual HRESULT __stdcall get_DefaultFileWritingFormat (
        /*[out,retval]*/ enum FileWritingFormats * returnVal ) = 0;
      virtual HRESULT __stdcall put_DefaultFileWritingFormat (
        /*[in]*/ enum FileWritingFormats returnVal ) = 0;
      virtual HRESULT __stdcall get_AllowAutomaticTypeConflictResolution (
        /*[out,retval]*/ enum AllowAutomaticTypeConflictResolutionOptions * val ) = 0;
      virtual HRESULT __stdcall put_AllowAutomaticTypeConflictResolution (
        /*[in]*/ enum AllowAutomaticTypeConflictResolutionOptions val ) = 0;
      virtual HRESULT __stdcall get_FileModificationIndicatorPolicy (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall put_FileModificationIndicatorPolicy (
        /*[in]*/ long val ) = 0;
      virtual HRESULT __stdcall get_DefaultCPUAffinityForThreads (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall put_DefaultCPUAffinityForThreads (
        /*[in]*/ long val ) = 0;
};

struct __declspec(uuid("ff1ebd91-216f-411b-bf3a-fc6447f61bb9"))
Images : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IPicturePtr Item[];
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    IPicturePtr GetItem (
        long imageIndex );
    long GetCount ( );
    IPicturePtr FindImage (
        _bstr_t IconName,
        long desiredWidth,
        long desiredHeight );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long imageIndex,
        /*[out,retval]*/ struct IPicture * * val ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall raw_FindImage (
        /*[in]*/ BSTR IconName,
        /*[in]*/ long desiredWidth,
        /*[in]*/ long desiredHeight,
        /*[out,retval]*/ struct IPicture * * val ) = 0;
};

struct __declspec(uuid("85c7d475-d930-44b0-bf82-12d2623b727f"))
Location : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetKind,put=PutKind))
    enum LocationKinds Kind;
    __declspec(property(get=GetFilePath,put=PutFilePath))
    _bstr_t FilePath;
    __declspec(property(get=GetFileId,put=PutFileId))
    long FileId;
    __declspec(property(get=GetFileDisplayName,put=PutFileDisplayName))
    _bstr_t FileDisplayName;
    __declspec(property(get=GetPropertyPath,put=PutPropertyPath))
    _bstr_t PropertyPath;
    __declspec(property(get=GetPropertyPathWithNames,put=PutPropertyPathWithNames))
    _bstr_t PropertyPathWithNames;
    __declspec(property(get=GetSequenceName,put=PutSequenceName))
    _bstr_t SequenceName;
    __declspec(property(get=GetStepGroup,put=PutStepGroup))
    enum StepGroups StepGroup;
    __declspec(property(get=GetStepName,put=PutStepName))
    _bstr_t StepName;
    __declspec(property(get=GetStepId,put=PutStepId))
    _bstr_t StepId;
    __declspec(property(get=GetStepIndex,put=PutStepIndex))
    long StepIndex;
    __declspec(property(get=GetExecutionId,put=PutExecutionId))
    long ExecutionId;
    __declspec(property(get=GetExecutionDisplayName,put=PutExecutionDisplayName))
    _bstr_t ExecutionDisplayName;
    __declspec(property(get=GetThreadId,put=PutThreadId))
    long ThreadId;
    __declspec(property(get=GetContextId,put=PutContextId))
    long ContextId;
    __declspec(property(get=GetTypeName,put=PutTypeName))
    _bstr_t TypeName;
    __declspec(property(get=GetTypeCategory,put=PutTypeCategory))
    enum TypeCategories TypeCategory;
    __declspec(property(get=GetElement,put=PutElement))
    enum PropertyObjectElements Element;
    __declspec(property(get=GetThreadDisplayName,put=PutThreadDisplayName))
    _bstr_t ThreadDisplayName;
    __declspec(property(get=GetSelLength,put=PutSelLength))
    long SelLength;
    __declspec(property(get=GetSelStart,put=PutSelStart))
    long SelStart;

    //
    // Wrapper methods for error-handling
    //

    enum LocationKinds GetKind ( );
    void PutKind (
        enum LocationKinds val );
    _bstr_t GetFilePath ( );
    void PutFilePath (
        _bstr_t val );
    long GetFileId ( );
    void PutFileId (
        long val );
    _bstr_t GetFileDisplayName ( );
    void PutFileDisplayName (
        _bstr_t val );
    _bstr_t GetPropertyPath ( );
    void PutPropertyPath (
        _bstr_t val );
    _bstr_t GetPropertyPathWithNames ( );
    void PutPropertyPathWithNames (
        _bstr_t val );
    _bstr_t GetSequenceName ( );
    void PutSequenceName (
        _bstr_t val );
    enum StepGroups GetStepGroup ( );
    void PutStepGroup (
        enum StepGroups val );
    _bstr_t GetStepName ( );
    void PutStepName (
        _bstr_t val );
    _bstr_t GetStepId ( );
    void PutStepId (
        _bstr_t val );
    long GetStepIndex ( );
    void PutStepIndex (
        long val );
    long GetExecutionId ( );
    void PutExecutionId (
        long val );
    _bstr_t GetExecutionDisplayName ( );
    void PutExecutionDisplayName (
        _bstr_t val );
    long GetThreadId ( );
    void PutThreadId (
        long val );
    long GetContextId ( );
    void PutContextId (
        long val );
    _bstr_t GetTypeName ( );
    void PutTypeName (
        _bstr_t val );
    enum TypeCategories GetTypeCategory ( );
    void PutTypeCategory (
        enum TypeCategories val );
    enum PropertyObjectElements GetElement ( );
    void PutElement (
        enum PropertyObjectElements val );
    long GetSelStart ( );
    void PutSelStart (
        long val );
    long GetSelLength ( );
    void PutSelLength (
        long val );
    _bstr_t GetThreadDisplayName ( );
    void PutThreadDisplayName (
        _bstr_t val );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum LocationKinds * val ) = 0;
      virtual HRESULT __stdcall put_Kind (
        /*[in]*/ enum LocationKinds val ) = 0;
      virtual HRESULT __stdcall get_FilePath (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_FilePath (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_FileId (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall put_FileId (
        /*[in]*/ long val ) = 0;
      virtual HRESULT __stdcall get_FileDisplayName (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_FileDisplayName (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_PropertyPath (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_PropertyPath (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_PropertyPathWithNames (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_PropertyPathWithNames (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_SequenceName (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_SequenceName (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_StepGroup (
        /*[out,retval]*/ enum StepGroups * val ) = 0;
      virtual HRESULT __stdcall put_StepGroup (
        /*[in]*/ enum StepGroups val ) = 0;
      virtual HRESULT __stdcall get_StepName (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_StepName (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_StepId (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_StepId (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_StepIndex (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall put_StepIndex (
        /*[in]*/ long val ) = 0;
      virtual HRESULT __stdcall get_ExecutionId (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall put_ExecutionId (
        /*[in]*/ long val ) = 0;
      virtual HRESULT __stdcall get_ExecutionDisplayName (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_ExecutionDisplayName (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_ThreadId (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall put_ThreadId (
        /*[in]*/ long val ) = 0;
      virtual HRESULT __stdcall get_ContextId (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall put_ContextId (
        /*[in]*/ long val ) = 0;
      virtual HRESULT __stdcall get_TypeName (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_TypeName (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_TypeCategory (
        /*[out,retval]*/ enum TypeCategories * val ) = 0;
      virtual HRESULT __stdcall put_TypeCategory (
        /*[in]*/ enum TypeCategories val ) = 0;
      virtual HRESULT __stdcall get_Element (
        /*[out,retval]*/ enum PropertyObjectElements * val ) = 0;
      virtual HRESULT __stdcall put_Element (
        /*[in]*/ enum PropertyObjectElements val ) = 0;
      virtual HRESULT __stdcall get_SelStart (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall put_SelStart (
        /*[in]*/ long val ) = 0;
      virtual HRESULT __stdcall get_SelLength (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall put_SelLength (
        /*[in]*/ long val ) = 0;
      virtual HRESULT __stdcall get_ThreadDisplayName (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_ThreadDisplayName (
        /*[in]*/ BSTR val ) = 0;
};

struct __declspec(uuid("75109edf-cdfc-4d12-a461-971dc9089859"))
FileInformation : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetFileExists))
    VARIANT_BOOL FileExists;
    __declspec(property(get=GetIsCustomFile))
    VARIANT_BOOL IsCustomFile;
    __declspec(property(get=GetIsSequenceFile))
    VARIANT_BOOL IsSequenceFile;
    __declspec(property(get=GetIsPropertyObjectFile))
    VARIANT_BOOL IsPropertyObjectFile;
    __declspec(property(get=GetFileWritingFormat))
    enum FileWritingFormats FileWritingFormat;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetFileExists ( );
    VARIANT_BOOL GetIsCustomFile ( );
    VARIANT_BOOL GetIsSequenceFile ( );
    VARIANT_BOOL GetIsPropertyObjectFile ( );
    enum FileWritingFormats GetFileWritingFormat ( );
    _bstr_t GetFileFormatVersion ( );
    VARIANT_BOOL GetFileVersion (
        BSTR * val );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_FileExists (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall get_IsCustomFile (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall get_IsSequenceFile (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall get_IsPropertyObjectFile (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall get_FileWritingFormat (
        /*[out,retval]*/ enum FileWritingFormats * val ) = 0;
      virtual HRESULT __stdcall raw_GetFileFormatVersion (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall raw_GetFileVersion (
        /*[out]*/ BSTR * val,
        /*[out,retval]*/ VARIANT_BOOL * success ) = 0;
};

struct __declspec(uuid("062dd318-9615-4295-9aea-ed9421670fbe"))
Utility : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    _bstr_t Escape (
        _bstr_t stringToEscape,
        long options );
    _bstr_t Unescape (
        _bstr_t stringToUnescape,
        long options );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Escape (
        /*[in]*/ BSTR stringToEscape,
        /*[in]*/ long options,
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall raw_Unescape (
        /*[in]*/ BSTR stringToUnescape,
        /*[in]*/ long options,
        /*[out,retval]*/ BSTR * val ) = 0;
};

struct __declspec(uuid("bb011cb0-d2dd-11d0-93a7-0020af68e893"))
_TEEngineEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT UIMessageEvent (
        struct UIMessage * msg );
};

struct __declspec(uuid("2859a043-521d-45f5-af97-4322486abe26"))
InputStream : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIsEndofStream))
    VARIANT_BOOL IsEndofStream;
    __declspec(property(get=GetLength))
    long Length;
    __declspec(property(get=GetOffset,put=PutOffset))
    long Offset;
    __declspec(property(get=GetPath))
    _bstr_t Path;

    //
    // Wrapper methods for error-handling
    //

    SAFEARRAY * ReadBytes (
        long numBytes );
    VARIANT_BOOL GetIsEndofStream ( );
    long GetLength ( );
    long GetOffset ( );
    void PutOffset (
        long val );
    _bstr_t GetPath ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_ReadBytes (
        /*[in]*/ long numBytes,
        /*[out,retval]*/ SAFEARRAY * * bytes ) = 0;
      virtual HRESULT __stdcall get_IsEndofStream (
        /*[out,retval]*/ VARIANT_BOOL * endofStream ) = 0;
      virtual HRESULT __stdcall get_Length (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall get_Offset (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall put_Offset (
        /*[in]*/ long val ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * val ) = 0;
};

struct __declspec(uuid("b2794ef6-c0b6-11d0-939c-0020af68e893"))
Engine;
    // [ default ] interface IEngine
    // [ default, source ] dispinterface _TEEngineEvents

struct __declspec(uuid("8d8769a0-09c0-11d1-93bd-0020af68e893"))
PropertyObject : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetTypeCategory))
    enum TypeCategories TypeCategory;
    __declspec(property(get=GetParent))
    PropertyObjectPtr Parent;
    __declspec(property(get=GetType))
    PropertyObjectTypePtr Type;
    __declspec(property(get=GetIsModifiedType,put=PutIsModifiedType))
    VARIANT_BOOL IsModifiedType;
    __declspec(property(get=GetIsRootTypeDefinition))
    VARIANT_BOOL IsRootTypeDefinition;
    __declspec(property(get=GetCanAddSubProperty))
    VARIANT_BOOL CanAddSubProperty;
    __declspec(property(get=GetAttributes))
    PropertyObjectPtr Attributes;
    __declspec(property(get=GetHasAttributes))
    VARIANT_BOOL HasAttributes;
    __declspec(property(get=GetTypeVersion,put=PutTypeVersion))
    _bstr_t TypeVersion;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetComment,put=PutComment))
    _bstr_t Comment;
    __declspec(property(get=GetNumericFormat,put=PutNumericFormat))
    _bstr_t NumericFormat;
    __declspec(property(get=GetArrayElementPrototype,put=PutRefArrayElementPrototype))
    PropertyObjectPtr ArrayElementPrototype;
    __declspec(property(get=GetTypeLastModified))
    _bstr_t TypeLastModified;
    __declspec(property(get=GetTypeMinimumTestStandVersion,put=PutTypeMinimumTestStandVersion))
    _bstr_t TypeMinimumTestStandVersion;
    __declspec(property(get=GetIsTypeDefinition))
    VARIANT_BOOL IsTypeDefinition;

    //
    // Wrapper methods for error-handling
    //

    double GetValNumber (
        _bstr_t lookupString,
        long options );
    HRESULT SetValNumber (
        _bstr_t lookupString,
        long options,
        double newValue );
    VARIANT_BOOL GetValBoolean (
        _bstr_t lookupString,
        long options );
    HRESULT SetValBoolean (
        _bstr_t lookupString,
        long options,
        VARIANT_BOOL newValue );
    _bstr_t GetValString (
        _bstr_t lookupString,
        long options );
    HRESULT SetValString (
        _bstr_t lookupString,
        long options,
        _bstr_t newValue );
    PropertyObjectPtr GetPropertyObject (
        _bstr_t lookupString,
        long options );
    HRESULT SetPropertyObject (
        _bstr_t lookupString,
        long options,
        struct PropertyObject * newValue );
    _variant_t GetValVariant (
        _bstr_t lookupString,
        long options );
    HRESULT SetValVariant (
        _bstr_t lookupString,
        long options,
        const _variant_t & newValue );
    IDispatchPtr GetValIDispatch (
        _bstr_t lookupString,
        long options );
    HRESULT SetValIDispatch (
        _bstr_t lookupString,
        long options,
        IDispatch * newValue );
    IUnknownPtr GetValInterface (
        _bstr_t lookupString,
        long options );
    HRESULT SetValInterface (
        _bstr_t lookupString,
        long options,
        IUnknown * newValue );
    long GetFlags (
        _bstr_t lookupString,
        long options );
    HRESULT SetFlags (
        _bstr_t lookupString,
        long options,
        long Flags );
    enum PropertyValueTypes GetType (
        _bstr_t lookupString,
        long options,
        VARIANT_BOOL * IsObject,
        VARIANT_BOOL * IsArray,
        BSTR * typeNameParam );
    PropertyObjectPtr GetTypeDefinition (
        _bstr_t lookupString,
        long options );
    HRESULT GetDimensions (
        _bstr_t lookupString,
        long options,
        BSTR * lowerBounds,
        BSTR * upperBounds,
        long * numElements,
        enum PropertyValueTypes * ElementType );
    HRESULT SetDimensions (
        _bstr_t lookupString,
        long options,
        _bstr_t lowerBounds,
        _bstr_t upperBounds );
    _bstr_t GetArrayIndex (
        _bstr_t lookupString,
        long options,
        long arrayOffset );
    long GetArrayOffset (
        _bstr_t lookupString,
        long options,
        _bstr_t arrayIndex );
    HRESULT NewSubProperty (
        _bstr_t lookupString,
        enum PropertyValueTypes ValueType,
        VARIANT_BOOL asArray,
        _bstr_t typeNameParam,
        long options );
    HRESULT DeleteSubProperty (
        _bstr_t lookupString,
        long options );
    long GetNumSubProperties (
        _bstr_t lookupString );
    _bstr_t GetNthSubPropertyName (
        _bstr_t lookupString,
        long index,
        long options );
    HRESULT SetNthSubPropertyName (
        _bstr_t lookupString,
        long index,
        long options,
        _bstr_t newValue );
    VARIANT_BOOL Exists (
        _bstr_t lookupString,
        long options );
    PropertyObjectPtr Clone (
        _bstr_t lookupString,
        long options );
    PropertyObjectPtr Evaluate (
        _bstr_t exprString );
    HRESULT Write (
        _bstr_t pathString,
        _bstr_t objectName,
        long RWoptions );
    HRESULT Read (
        _bstr_t pathString,
        _bstr_t objectName,
        long RWoptions );
    HRESULT Serialize (
        BSTR * stream,
        _bstr_t objectName,
        long RWoptions );
    HRESULT Unserialize (
        _bstr_t stream,
        _bstr_t objectName,
        long RWoptions );
    PropertyObjectPtr EvaluateEx (
        _bstr_t exprString,
        long EvaluationOptions );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t val );
    _bstr_t GetComment ( );
    void PutComment (
        _bstr_t val );
    _bstr_t ValidateNewName (
        _bstr_t newName,
        VARIANT_BOOL allowDuplicates,
        VARIANT_BOOL * isValid );
    long DisplayPropertiesDialog (
        _bstr_t dlgTitle,
        struct PropertyObjectFile * file,
        long dlgOptions );
    PropertyObjectPtr GetParent ( );
    long GetSubPropertyIndex (
        _bstr_t lookupString,
        long options,
        _bstr_t propName );
    HRESULT SetSubPropertyIndex (
        _bstr_t lookupString,
        long options,
        _bstr_t propName,
        long index );
    VARIANT_BOOL GetIsRootTypeDefinition ( );
    VARIANT_BOOL GetCanAddSubProperty ( );
    HRESULT InsertSubProperty (
        _bstr_t lookupString,
        long options,
        long index,
        struct PropertyObject * subProperty );
    _bstr_t GetTypeDisplayString (
        _bstr_t lookupString,
        long options );
    _bstr_t GetFormattedValue (
        _bstr_t lookupString,
        long options,
        _bstr_t formatString,
        VARIANT_BOOL useValueFormatIfDefined,
        _bstr_t separator );
    long GetNumElements ( );
    HRESULT SetNumElements (
        long numElements,
        long options );
    HRESULT DeleteElements (
        long arrayOffset,
        long numElements,
        long options );
    double GetValNumberByOffset (
        long arrayOffset,
        long options );
    HRESULT SetValNumberByOffset (
        long arrayOffset,
        long options,
        double newValue );
    VARIANT_BOOL GetValBooleanByOffset (
        long arrayOffset,
        long options );
    HRESULT SetValBooleanByOffset (
        long arrayOffset,
        long options,
        VARIANT_BOOL newValue );
    _bstr_t GetValStringByOffset (
        long arrayOffset,
        long options );
    HRESULT SetValStringByOffset (
        long arrayOffset,
        long options,
        _bstr_t newValue );
    PropertyObjectPtr GetPropertyObjectByOffset (
        long arrayOffset,
        long options );
    HRESULT SetPropertyObjectByOffset (
        long arrayOffset,
        long options,
        struct PropertyObject * newValue );
    _variant_t GetValVariantByOffset (
        long arrayOffset,
        long options );
    HRESULT SetValVariantByOffset (
        long arrayOffset,
        long options,
        const _variant_t & newValue );
    IDispatchPtr GetValIDispatchByOffset (
        long arrayOffset,
        long options );
    HRESULT SetValIDispatchByOffset (
        long arrayOffset,
        long options,
        IDispatch * newValue );
    IUnknownPtr GetValInterfaceByOffset (
        long arrayOffset,
        long options );
    HRESULT SetValInterfaceByOffset (
        long arrayOffset,
        long options,
        IUnknown * newValue );
    long GetStructureChangeCount (
        _bstr_t lookupString,
        long options );
    long GetInstanceDefaultFlags (
        _bstr_t lookupString,
        long options );
    HRESULT SetInstanceDefaultFlags (
        _bstr_t lookupString,
        long options,
        long Flags );
    VARIANT_BOOL GetIsTypeDefinition ( );
    VARIANT_BOOL ContainsTypeInstance (
        _bstr_t lookupString,
        long options,
        _bstr_t typeNameParam );
    enum TypeCategories GetTypeCategory ( );
    VARIANT_BOOL IsEqualTo (
        struct PropertyObject * objectToCompare,
        long options );
    VARIANT_BOOL IsAliasObject (
        _bstr_t lookupString,
        long options );
    _bstr_t GetLocation (
        struct PropertyObject * topObject );
    long DisplayFlagsDialog (
        _bstr_t dlgTitle,
        long dlgOptions );
    VARIANT_BOOL DisplayArrayBoundsDialog (
        _bstr_t dlgTitle,
        long dlgOptions );
    HRESULT ReadEx (
        _bstr_t pathString,
        _bstr_t objectName,
        long RWoptions,
        enum TypeConflictHandlerTypes handlerType );
    HRESULT UnserializeEx (
        _bstr_t stream,
        _bstr_t objectName,
        long RWoptions,
        enum TypeConflictHandlerTypes handlerType );
    _bstr_t GetTypeVersion ( );
    void PutTypeVersion (
        _bstr_t val );
    long GetTypeFlags (
        _bstr_t lookupString,
        long options );
    HRESULT SetTypeFlags (
        _bstr_t lookupString,
        long options,
        long Flags );
    long GetInstanceOverrideFlags (
        _bstr_t lookupString,
        long options );
    HRESULT SetInstanceOverrideFlags (
        _bstr_t lookupString,
        long options,
        long Flags );
    _bstr_t GetNumericFormat ( );
    void PutNumericFormat (
        _bstr_t val );
    PropertyObjectPtr GetArrayElementPrototype ( );
    void PutArrayElementPrototype (
        struct PropertyObject * val );
    void PutRefArrayElementPrototype (
        struct PropertyObject * val );
    _bstr_t ValidateNewSubPropertyName (
        _bstr_t newName,
        VARIANT_BOOL allowDuplicates,
        VARIANT_BOOL * isValid );
    _bstr_t ValidateNewElementName (
        _bstr_t newName,
        VARIANT_BOOL allowDuplicates,
        VARIANT_BOOL * isValid );
    long GetInternalPtr (
        _bstr_t engineId );
    _bstr_t GetXML (
        long GenerationOptions,
        long InitialIndentation,
        _bstr_t DefaultName,
        _bstr_t formatString );
    SearchResultsPtr Search (
        _bstr_t lookupString,
        _bstr_t searchString,
        long SearchOptions,
        long filterOptions,
        long elementsToSearch,
        SAFEARRAY * limitToAdapters,
        SAFEARRAY * limitToNamedProps,
        SAFEARRAY * limitToPropsOfNamedTypes,
        SAFEARRAY * subpropLookupStringsToExclude );
    _bstr_t GetTypeLastModified ( );
    HRESULT GetDisplayNames (
        _bstr_t lookupString,
        long options,
        BSTR * propDisplayName,
        BSTR * valueDisplayName );
    _bstr_t GetTypeMinimumTestStandVersion ( );
    void PutTypeMinimumTestStandVersion (
        _bstr_t val );
    HRESULT SetXML (
        _bstr_t xmlStream,
        long reserved1,
        enum TypeConflictHandlerTypes reserved2 );
    SAFEARRAY * GetValBinary (
        _bstr_t lookupString,
        long options );
    HRESULT SetValBinary (
        _bstr_t lookupString,
        long options,
        SAFEARRAY * newValue );
    PropertyObjectPtr GetNthSubProperty (
        _bstr_t lookupString,
        long index,
        long options );
    HRESULT DeleteNthSubProperty (
        _bstr_t lookupString,
        long index,
        long options );
    PropertyObjectTypePtr GetType ( );
    VARIANT_BOOL GetIsModifiedType ( );
    void PutIsModifiedType (
        VARIANT_BOOL val );
    PropertyObjectPtr GetAttributes ( );
    VARIANT_BOOL GetHasAttributes ( );
    VARIANT_BOOL DisplayAttributesDialog (
        _bstr_t dlgTitle,
        struct PropertyObjectFile * file,
        long dlgOptions );
    ReportSectionPtr CreateReportSection (
        long GenerationOptions,
        long InitialIndentation,
        _bstr_t DefaultName,
        _bstr_t formatString,
        _bstr_t Format );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetValNumber (
        /*[in]*/ BSTR lookupString,
        /*[in]*/ long options,
        /*[out,retval]*/ double * val ) = 0;
      virtual HRESULT __stdcall raw_SetValNumber (
        /*[in]*/ BSTR lookupString,
        /*[in]*/ long options,
        /*[in]*/ double newValue ) = 0;
      virtual HRESULT __stdcall raw_GetValBoolean (
        /*[in]*/ BSTR lookupString,
        /*[in]*/ long options,
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall raw_SetValBoolean (
        /*[in]*/ BSTR lookupString,
        /*[in]*/ long options,
        /*[in]*/ VARIANT_BOOL newValue ) = 0;
      virtual HRESULT __stdcall raw_GetValString (
        /*[in]*/ BSTR lookupString,
        /*[in]*/ long options,
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall raw_SetValString (
        /*[in]*/ BSTR lookupString,
        /*[in]*/ long options,
        /*[in]*/ BSTR newValue ) = 0;
      virtual HRESULT __stdcall raw_GetPropertyObject (
        /*[in]*/ BSTR lookupString,
        /*[in]*/ long options,
        /*[out,retval]*/ struct PropertyObject * * val ) = 0;
      virtual HRESULT __stdcall raw_SetPropertyObject (
        /*[in]*/ BSTR lookupString,
        /*[in]*/ long options,
        /*[in]*/ struct PropertyObject * newValue ) = 0;
      virtual HRESULT __stdcall raw_GetValVariant (
        /*[in]*/ BSTR lookupString,
        /*[in]*/ long options,
        /*[out,retval]*/ VARIANT * val ) = 0;
      virtual HRESULT __stdcall raw_SetValVariant (
        /*[in]*/ BSTR lookupString,
        /*[in]*/ long options,
        /*[in]*/ VARIANT newValue ) = 0;
      virtual HRESULT __stdcall raw_GetValIDispatch (
        /*[in]*/ BSTR lookupString,
        /*[in]*/ long options,
        /*[out,retval]*/ IDispatch * * val ) = 0;
      virtual HRESULT __stdcall raw_SetValIDispatch (
        /*[in]*/ BSTR lookupString,
        /*[in]*/ long options,
        /*[in]*/ IDispatch * newValue ) = 0;
      virtual HRESULT __stdcall raw_GetValInterface (
        /*[in]*/ BSTR lookupString,
        /*[in]*/ long options,
        /*[out,retval]*/ IUnknown * * val ) = 0;
      virtual HRESULT __stdcall raw_SetValInterface (
        /*[in]*/ BSTR lookupString,
        /*[in]*/ long options,
        /*[in]*/ IUnknown * newValue ) = 0;
      virtual HRESULT __stdcall raw_GetFlags (
        /*[in]*/ BSTR lookupString,
        /*[in]*/ long options,
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall raw_SetFlags (
        /*[in]*/ BSTR lookupString,
        /*[in]*/ long options,
        /*[in]*/ long Flags ) = 0;
      virtual HRESULT __stdcall raw_GetType (
        /*[in]*/ BSTR lookupString,
        /*[in]*/ long options,
        /*[out]*/ VARIANT_BOOL * IsObject,
        /*[out]*/ VARIANT_BOOL * IsArray,
        /*[out]*/ BSTR * typeNameParam,
        /*[out,retval]*/ enum PropertyValueTypes * val ) = 0;
      virtual HRESULT __stdcall raw_GetTypeDefinition (
        /*[in]*/ BSTR lookupString,
        /*[in]*/ long options,
        /*[out,retval]*/ struct PropertyObject * * val ) = 0;
      virtual HRESULT __stdcall raw_GetDimensions (
        /*[in]*/ BSTR lookupString,
        /*[in]*/ long options,
        /*[out]*/ BSTR * lowerBounds,
        /*[out]*/ BSTR * upperBounds,
        /*[out]*/ long * numElements,
        /*[out]*/ enum PropertyValueTypes * ElementType ) = 0;
      virtual HRESULT __stdcall raw_SetDimensions (
        /*[in]*/ BSTR lookupString,
        /*[in]*/ long options,
        /*[in]*/ BSTR lowerBounds,
        /*[in]*/ BSTR upperBounds ) = 0;
      virtual HRESULT __stdcall raw_GetArrayIndex (
        /*[in]*/ BSTR lookupString,
        /*[in]*/ long options,
        /*[in]*/ long arrayOffset,
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall raw_GetArrayOffset (
        /*[in]*/ BSTR lookupString,
        /*[in]*/ long options,
        /*[in]*/ BSTR arrayIndex,
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall raw_NewSubProperty (
        /*[in]*/ BSTR lookupString,
        /*[in]*/ enum PropertyValueTypes ValueType,
        /*[in]*/ VARIANT_BOOL asArray,
        /*[in]*/ BSTR typeNameParam,
        /*[in]*/ long options ) = 0;
      virtual HRESULT __stdcall raw_DeleteSubProperty (
        /*[in]*/ BSTR lookupString,
        /*[in]*/ long options ) = 0;
      virtual HRESULT __stdcall raw_GetNumSubProperties (
        /*[in]*/ BSTR lookupString,
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall raw_GetNthSubPropertyName (
        /*[in]*/ BSTR lookupString,
        /*[in]*/ long index,
        /*[in]*/ long options,
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall raw_SetNthSubPropertyName (
        /*[in]*/ BSTR lookupString,
        /*[in]*/ long index,
        /*[in]*/ long options,
        /*[in]*/ BSTR newValue ) = 0;
      virtual HRESULT __stdcall raw_Exists (
        /*[in]*/ BSTR lookupString,
        /*[in]*/ long options,
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall raw_Clone (
        /*[in]*/ BSTR lookupString,
        /*[in]*/ long options,
        /*[out,retval]*/ struct PropertyObject * * val ) = 0;
      virtual HRESULT __stdcall raw_Evaluate (
        /*[in]*/ BSTR exprString,
        /*[out,retval]*/ struct PropertyObject * * val ) = 0;
      virtual HRESULT __stdcall raw_Write (
        /*[in]*/ BSTR pathString,
        /*[in]*/ BSTR objectName,
        /*[in]*/ long RWoptions ) = 0;
      virtual HRESULT __stdcall raw_Read (
        /*[in]*/ BSTR pathString,
        /*[in]*/ BSTR objectName,
        /*[in]*/ long RWoptions ) = 0;
      virtual HRESULT __stdcall raw_Serialize (
        /*[in,out]*/ BSTR * stream,
        /*[in]*/ BSTR objectName,
        /*[in]*/ long RWoptions ) = 0;
      virtual HRESULT __stdcall raw_Unserialize (
        /*[in]*/ BSTR stream,
        /*[in]*/ BSTR objectName,
        /*[in]*/ long RWoptions ) = 0;
      virtual HRESULT __stdcall raw_EvaluateEx (
        /*[in]*/ BSTR exprString,
        /*[in]*/ long EvaluationOptions,
        /*[out,retval]*/ struct PropertyObject * * val ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_Comment (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_Comment (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall raw_ValidateNewName (
        /*[in]*/ BSTR newName,
        /*[in]*/ VARIANT_BOOL allowDuplicates,
        /*[out]*/ VARIANT_BOOL * isValid,
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall raw_DisplayPropertiesDialog (
        /*[in]*/ BSTR dlgTitle,
        /*[in]*/ struct PropertyObjectFile * file,
        /*[in]*/ long dlgOptions,
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall get_Parent (
        /*[out,retval]*/ struct PropertyObject * * val ) = 0;
      virtual HRESULT __stdcall raw_GetSubPropertyIndex (
        /*[in]*/ BSTR lookupString,
        /*[in]*/ long options,
        /*[in]*/ BSTR propName,
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall raw_SetSubPropertyIndex (
        /*[in]*/ BSTR lookupString,
        /*[in]*/ long options,
        /*[in]*/ BSTR propName,
        /*[in]*/ long index ) = 0;
      virtual HRESULT __stdcall get_IsRootTypeDefinition (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall get_CanAddSubProperty (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall raw_InsertSubProperty (
        /*[in]*/ BSTR lookupString,
        /*[in]*/ long options,
        /*[in]*/ long index,
        /*[in]*/ struct PropertyObject * subProperty ) = 0;
      virtual HRESULT __stdcall raw_GetTypeDisplayString (
        /*[in]*/ BSTR lookupString,
        /*[in]*/ long options,
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall raw_GetFormattedValue (
        /*[in]*/ BSTR lookupString,
        /*[in]*/ long options,
        /*[in]*/ BSTR formatString,
        /*[in]*/ VARIANT_BOOL useValueFormatIfDefined,
        /*[in]*/ BSTR separator,
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall raw_GetNumElements (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall raw_SetNumElements (
        /*[in]*/ long numElements,
        /*[in]*/ long options ) = 0;
      virtual HRESULT __stdcall raw_DeleteElements (
        /*[in]*/ long arrayOffset,
        /*[in]*/ long numElements,
        /*[in]*/ long options ) = 0;
      virtual HRESULT __stdcall raw_GetValNumberByOffset (
        /*[in]*/ long arrayOffset,
        /*[in]*/ long options,
        /*[out,retval]*/ double * val ) = 0;
      virtual HRESULT __stdcall raw_SetValNumberByOffset (
        /*[in]*/ long arrayOffset,
        /*[in]*/ long options,
        /*[in]*/ double newValue ) = 0;
      virtual HRESULT __stdcall raw_GetValBooleanByOffset (
        /*[in]*/ long arrayOffset,
        /*[in]*/ long options,
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall raw_SetValBooleanByOffset (
        /*[in]*/ long arrayOffset,
        /*[in]*/ long options,
        /*[in]*/ VARIANT_BOOL newValue ) = 0;
      virtual HRESULT __stdcall raw_GetValStringByOffset (
        /*[in]*/ long arrayOffset,
        /*[in]*/ long options,
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall raw_SetValStringByOffset (
        /*[in]*/ long arrayOffset,
        /*[in]*/ long options,
        /*[in]*/ BSTR newValue ) = 0;
      virtual HRESULT __stdcall raw_GetPropertyObjectByOffset (
        /*[in]*/ long arrayOffset,
        /*[in]*/ long options,
        /*[out,retval]*/ struct PropertyObject * * val ) = 0;
      virtual HRESULT __stdcall raw_SetPropertyObjectByOffset (
        /*[in]*/ long arrayOffset,
        /*[in]*/ long options,
        /*[in]*/ struct PropertyObject * newValue ) = 0;
      virtual HRESULT __stdcall raw_GetValVariantByOffset (
        /*[in]*/ long arrayOffset,
        /*[in]*/ long options,
        /*[out,retval]*/ VARIANT * val ) = 0;
      virtual HRESULT __stdcall raw_SetValVariantByOffset (
        /*[in]*/ long arrayOffset,
        /*[in]*/ long options,
        /*[in]*/ VARIANT newValue ) = 0;
      virtual HRESULT __stdcall raw_GetValIDispatchByOffset (
        /*[in]*/ long arrayOffset,
        /*[in]*/ long options,
        /*[out,retval]*/ IDispatch * * val ) = 0;
      virtual HRESULT __stdcall raw_SetValIDispatchByOffset (
        /*[in]*/ long arrayOffset,
        /*[in]*/ long options,
        /*[in]*/ IDispatch * newValue ) = 0;
      virtual HRESULT __stdcall raw_GetValInterfaceByOffset (
        /*[in]*/ long arrayOffset,
        /*[in]*/ long options,
        /*[out,retval]*/ IUnknown * * val ) = 0;
      virtual HRESULT __stdcall raw_SetValInterfaceByOffset (
        /*[in]*/ long arrayOffset,
        /*[in]*/ long options,
        /*[in]*/ IUnknown * newValue ) = 0;
      virtual HRESULT __stdcall raw_GetStructureChangeCount (
        /*[in]*/ BSTR lookupString,
        /*[in]*/ long options,
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall raw_GetInstanceDefaultFlags (
        /*[in]*/ BSTR lookupString,
        /*[in]*/ long options,
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall raw_SetInstanceDefaultFlags (
        /*[in]*/ BSTR lookupString,
        /*[in]*/ long options,
        /*[in]*/ long Flags ) = 0;
      virtual HRESULT __stdcall get_IsTypeDefinition (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall raw_ContainsTypeInstance (
        /*[in]*/ BSTR lookupString,
        /*[in]*/ long options,
        /*[in]*/ BSTR typeNameParam,
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall get_TypeCategory (
        /*[out,retval]*/ enum TypeCategories * val ) = 0;
      virtual HRESULT __stdcall raw_IsEqualTo (
        /*[in]*/ struct PropertyObject * objectToCompare,
        /*[in]*/ long options,
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall raw_IsAliasObject (
        /*[in]*/ BSTR lookupString,
        /*[in]*/ long options,
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall raw_GetLocation (
        /*[in]*/ struct PropertyObject * topObject,
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall raw_DisplayFlagsDialog (
        /*[in]*/ BSTR dlgTitle,
        /*[in]*/ long dlgOptions,
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall raw_DisplayArrayBoundsDialog (
        /*[in]*/ BSTR dlgTitle,
        /*[in]*/ long dlgOptions,
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall raw_ReadEx (
        /*[in]*/ BSTR pathString,
        /*[in]*/ BSTR objectName,
        /*[in]*/ long RWoptions,
        /*[in]*/ enum TypeConflictHandlerTypes handlerType ) = 0;
      virtual HRESULT __stdcall raw_UnserializeEx (
        /*[in]*/ BSTR stream,
        /*[in]*/ BSTR objectName,
        /*[in]*/ long RWoptions,
        /*[in]*/ enum TypeConflictHandlerTypes handlerType ) = 0;
      virtual HRESULT __stdcall get_TypeVersion (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_TypeVersion (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall raw_GetTypeFlags (
        /*[in]*/ BSTR lookupString,
        /*[in]*/ long options,
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall raw_SetTypeFlags (
        /*[in]*/ BSTR lookupString,
        /*[in]*/ long options,
        /*[in]*/ long Flags ) = 0;
      virtual HRESULT __stdcall raw_GetInstanceOverrideFlags (
        /*[in]*/ BSTR lookupString,
        /*[in]*/ long options,
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall raw_SetInstanceOverrideFlags (
        /*[in]*/ BSTR lookupString,
        /*[in]*/ long options,
        /*[in]*/ long Flags ) = 0;
      virtual HRESULT __stdcall get_NumericFormat (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_NumericFormat (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_ArrayElementPrototype (
        /*[out,retval]*/ struct PropertyObject * * val ) = 0;
      virtual HRESULT __stdcall put_ArrayElementPrototype (
        /*[in]*/ struct PropertyObject * val ) = 0;
      virtual HRESULT __stdcall putref_ArrayElementPrototype (
        /*[in]*/ struct PropertyObject * val ) = 0;
      virtual HRESULT __stdcall raw_ValidateNewSubPropertyName (
        /*[in]*/ BSTR newName,
        /*[in]*/ VARIANT_BOOL allowDuplicates,
        /*[out]*/ VARIANT_BOOL * isValid,
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall raw_ValidateNewElementName (
        /*[in]*/ BSTR newName,
        /*[in]*/ VARIANT_BOOL allowDuplicates,
        /*[out]*/ VARIANT_BOOL * isValid,
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall raw_GetInternalPtr (
        /*[in]*/ BSTR engineId,
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall raw_GetXML (
        /*[in]*/ long GenerationOptions,
        /*[in]*/ long InitialIndentation,
        /*[in]*/ BSTR DefaultName,
        /*[in]*/ BSTR formatString,
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall raw_Search (
        /*[in]*/ BSTR lookupString,
        /*[in]*/ BSTR searchString,
        /*[in]*/ long SearchOptions,
        /*[in]*/ long filterOptions,
        /*[in]*/ long elementsToSearch,
        /*[in]*/ SAFEARRAY * limitToAdapters,
        /*[in]*/ SAFEARRAY * limitToNamedProps,
        /*[in]*/ SAFEARRAY * limitToPropsOfNamedTypes,
        /*[in]*/ SAFEARRAY * subpropLookupStringsToExclude,
        /*[out,retval]*/ struct SearchResults * * val ) = 0;
      virtual HRESULT __stdcall get_TypeLastModified (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall raw_GetDisplayNames (
        /*[in]*/ BSTR lookupString,
        /*[in]*/ long options,
        /*[out]*/ BSTR * propDisplayName,
        /*[out]*/ BSTR * valueDisplayName ) = 0;
      virtual HRESULT __stdcall get_TypeMinimumTestStandVersion (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_TypeMinimumTestStandVersion (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall raw_SetXML (
        /*[in]*/ BSTR xmlStream,
        /*[in]*/ long reserved1,
        /*[in]*/ enum TypeConflictHandlerTypes reserved2 ) = 0;
      virtual HRESULT __stdcall raw_GetValBinary (
        /*[in]*/ BSTR lookupString,
        /*[in]*/ long options,
        /*[out,retval]*/ SAFEARRAY * * val ) = 0;
      virtual HRESULT __stdcall raw_SetValBinary (
        /*[in]*/ BSTR lookupString,
        /*[in]*/ long options,
        /*[in]*/ SAFEARRAY * newValue ) = 0;
      virtual HRESULT __stdcall raw_GetNthSubProperty (
        /*[in]*/ BSTR lookupString,
        /*[in]*/ long index,
        /*[in]*/ long options,
        /*[out,retval]*/ struct PropertyObject * * val ) = 0;
      virtual HRESULT __stdcall raw_DeleteNthSubProperty (
        /*[in]*/ BSTR lookupString,
        /*[in]*/ long index,
        /*[in]*/ long options ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ struct PropertyObjectType * * val ) = 0;
      virtual HRESULT __stdcall get_IsModifiedType (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_IsModifiedType (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_Attributes (
        /*[out,retval]*/ struct PropertyObject * * val ) = 0;
      virtual HRESULT __stdcall get_HasAttributes (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall raw_DisplayAttributesDialog (
        /*[in]*/ BSTR dlgTitle,
        /*[in]*/ struct PropertyObjectFile * file,
        /*[in]*/ long dlgOptions,
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall raw_CreateReportSection (
        /*[in]*/ long GenerationOptions,
        /*[in]*/ long InitialIndentation,
        /*[in]*/ BSTR DefaultName,
        /*[in]*/ BSTR formatString,
        /*[in]*/ BSTR Format,
        /*[out,retval]*/ struct ReportSection * * val ) = 0;
};

struct __declspec(uuid("1650f0b0-da52-11d3-afdd-006097b79ef5"))
TypeUsageList : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetNumTypes))
    long NumTypes;
    __declspec(property(get=GetChangeCount))
    long ChangeCount;

    //
    // Wrapper methods for error-handling
    //

    long GetNumTypes ( );
    PropertyObjectPtr GetTypeDefinition (
        long index );
    long GetTypeIndex (
        _bstr_t typeNameParam );
    HRESULT InsertType (
        struct PropertyObject * typeToInsert,
        long index,
        enum TypeCategories typeCategoryParam );
    PropertyObjectPtr RemoveType (
        long index );
    HRESULT SetIsTypeAttachedToFile (
        long index,
        VARIANT_BOOL store );
    VARIANT_BOOL GetIsTypeAttachedToFile (
        long index );
    VARIANT_BOOL AddUsedTypes (
        struct PropertyObject * propObject );
    HRESULT MoveType (
        long index,
        long newIndex );
    long GetChangeCount ( );
    _bstr_t ValidateNewTypeName (
        _bstr_t newName,
        VARIANT_BOOL allowDuplicates,
        VARIANT_BOOL * isValid );
    VARIANT_BOOL Union (
        struct TypeUsageList * unionTypeUsageList );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_NumTypes (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall raw_GetTypeDefinition (
        /*[in]*/ long index,
        /*[out,retval]*/ struct PropertyObject * * val ) = 0;
      virtual HRESULT __stdcall raw_GetTypeIndex (
        /*[in]*/ BSTR typeNameParam,
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall raw_InsertType (
        /*[in]*/ struct PropertyObject * typeToInsert,
        /*[in]*/ long index,
        /*[in]*/ enum TypeCategories typeCategoryParam ) = 0;
      virtual HRESULT __stdcall raw_RemoveType (
        /*[in]*/ long index,
        /*[out,retval]*/ struct PropertyObject * * val ) = 0;
      virtual HRESULT __stdcall raw_SetIsTypeAttachedToFile (
        /*[in]*/ long index,
        /*[in]*/ VARIANT_BOOL store ) = 0;
      virtual HRESULT __stdcall raw_GetIsTypeAttachedToFile (
        /*[in]*/ long index,
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall raw_AddUsedTypes (
        /*[in]*/ struct PropertyObject * propObject,
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall raw_MoveType (
        /*[in]*/ long index,
        /*[in]*/ long newIndex ) = 0;
      virtual HRESULT __stdcall get_ChangeCount (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall raw_ValidateNewTypeName (
        /*[in]*/ BSTR newName,
        /*[in]*/ VARIANT_BOOL allowDuplicates,
        /*[out]*/ VARIANT_BOOL * isValid,
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall raw_Union (
        /*[in]*/ struct TypeUsageList * unionTypeUsageList,
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
};

struct __declspec(uuid("9f2dbe40-1dbc-11d3-afa0-006097b79ef5"))
PropertyObjectFile : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetTypeUsageList))
    TypeUsageListPtr TypeUsageList;
    __declspec(property(get=GetIsModified))
    VARIANT_BOOL IsModified;
    __declspec(property(get=GetChangeCount,put=PutChangeCount))
    long ChangeCount;
    __declspec(property(get=GetPath,put=PutPath))
    _bstr_t Path;
    __declspec(property(get=GetDisplayName,put=PutDisplayName))
    _bstr_t DisplayName;
    __declspec(property(get=GetData,put=PutRefData))
    PropertyObjectPtr Data;
    __declspec(property(get=GetContentType,put=PutContentType))
    _bstr_t ContentType;
    __declspec(property(get=GetFileTypeDescription,put=PutFileTypeDescription))
    _bstr_t FileTypeDescription;
    __declspec(property(get=GetFileSection,put=PutFileSection))
    _bstr_t FileSection;
    __declspec(property(get=GetFileWritingFormat,put=PutFileWritingFormat))
    enum FileWritingFormats FileWritingFormat;
    __declspec(property(get=GetOpenStatus,put=PutOpenStatus))
    long OpenStatus;
    __declspec(property(get=GetEditPrivilege,put=PutEditPrivilege))
    _bstr_t EditPrivilege;
    __declspec(property(get=GetIsDiskFileModified))
    long IsDiskFileModified;
    __declspec(property(get=GetFileType))
    enum PropertyObjectFileTypes FileType;
    __declspec(property(get=GetIsDiskFileReadOnly))
    VARIANT_BOOL IsDiskFileReadOnly;
    __declspec(property(get=GetId))
    long Id;
    __declspec(property(get=GetComment,put=PutComment))
    _bstr_t Comment;
    __declspec(property(get=GetVersion,put=PutVersion))
    _bstr_t Version;
    __declspec(property(get=GetIsModifiedByUser))
    VARIANT_BOOL IsModifiedByUser;
    __declspec(property(get=GetRequirements))
    PropertyObjectPtr Requirements;
    __declspec(property(get=GetProtection,put=PutProtection))
    long Protection;
    __declspec(property(get=GetLocked))
    VARIANT_BOOL Locked;

    //
    // Wrapper methods for error-handling
    //

    TypeUsageListPtr GetTypeUsageList ( );
    HRESULT IncChangeCount ( );
    VARIANT_BOOL GetIsModified ( );
    VARIANT_BOOL ReadFile (
        enum TypeConflictHandlerTypes handlerType );
    HRESULT WriteFile (
        enum WriteFileFormat writeFormat );
    PropertyObjectPtr AsPropertyObject ( );
    VARIANT_BOOL HandleTypeConflicts (
        enum TypeConflictHandlerTypes handlerType );
    VARIANT_BOOL SaveFileIfModified (
        VARIANT_BOOL prompt );
    long GetChangeCount ( );
    _bstr_t GetPath ( );
    void PutPath (
        _bstr_t val );
    _bstr_t GetDisplayName ( );
    void PutDisplayName (
        _bstr_t val );
    PropertyObjectPtr GetData ( );
    void PutData (
        struct PropertyObject * val );
    void PutRefData (
        struct PropertyObject * val );
    _bstr_t GetContentType ( );
    void PutContentType (
        _bstr_t val );
    _bstr_t GetFileTypeDescription ( );
    void PutFileTypeDescription (
        _bstr_t val );
    _bstr_t GetFileSection ( );
    void PutFileSection (
        _bstr_t val );
    long GetOpenStatus ( );
    void PutOpenStatus (
        long val );
    _bstr_t GetEditPrivilege ( );
    void PutEditPrivilege (
        _bstr_t val );
    long GetIsDiskFileModified ( );
    enum PropertyObjectFileTypes GetFileType ( );
    VARIANT_BOOL GetIsDiskFileReadOnly ( );
    long GetId ( );
    HRESULT CheckForModifiedTypes (
        _bstr_t dlgTitle,
        _bstr_t okButtonText,
        long options,
        enum TypeVersionAutoIncrement versionIncOption,
        VARIANT_BOOL * operationCanceled,
        VARIANT_BOOL * foundModifiedTypes );
    _bstr_t GetComment ( );
    void PutComment (
        _bstr_t val );
    _bstr_t GetVersion ( );
    void PutVersion (
        _bstr_t val );
    VARIANT_BOOL GetIsModifiedByUser ( );
    PropertyObjectPtr GetRequirements ( );
    long GetProtection ( );
    void PutProtection (
        long val );
    VARIANT_BOOL GetLocked ( );
    HRESULT Lock (
        const _variant_t & passwordString = vtMissing );
    HRESULT Unlock (
        _bstr_t passwordString );
    void PutChangeCount (
        long val );
    enum FileWritingFormats GetFileWritingFormat ( );
    void PutFileWritingFormat (
        enum FileWritingFormats val );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_TypeUsageList (
        /*[out,retval]*/ struct TypeUsageList * * val ) = 0;
      virtual HRESULT __stdcall raw_IncChangeCount ( ) = 0;
      virtual HRESULT __stdcall get_IsModified (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall raw_ReadFile (
        /*[in]*/ enum TypeConflictHandlerTypes handlerType,
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall raw_WriteFile (
        /*[in]*/ enum WriteFileFormat writeFormat ) = 0;
      virtual HRESULT __stdcall raw_AsPropertyObject (
        /*[out,retval]*/ struct PropertyObject * * val ) = 0;
      virtual HRESULT __stdcall raw_HandleTypeConflicts (
        /*[in]*/ enum TypeConflictHandlerTypes handlerType,
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall raw_SaveFileIfModified (
        /*[in]*/ VARIANT_BOOL prompt,
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall get_ChangeCount (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_Path (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_DisplayName (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_DisplayName (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_Data (
        /*[out,retval]*/ struct PropertyObject * * val ) = 0;
      virtual HRESULT __stdcall put_Data (
        /*[in]*/ struct PropertyObject * val ) = 0;
      virtual HRESULT __stdcall putref_Data (
        /*[in]*/ struct PropertyObject * val ) = 0;
      virtual HRESULT __stdcall get_ContentType (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_ContentType (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_FileTypeDescription (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_FileTypeDescription (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_FileSection (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_FileSection (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_OpenStatus (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall put_OpenStatus (
        /*[in]*/ long val ) = 0;
      virtual HRESULT __stdcall get_EditPrivilege (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_EditPrivilege (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_IsDiskFileModified (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall get_FileType (
        /*[out,retval]*/ enum PropertyObjectFileTypes * val ) = 0;
      virtual HRESULT __stdcall get_IsDiskFileReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall get_Id (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall raw_CheckForModifiedTypes (
        /*[in]*/ BSTR dlgTitle,
        /*[in]*/ BSTR okButtonText,
        /*[in]*/ long options,
        /*[in]*/ enum TypeVersionAutoIncrement versionIncOption,
        /*[out]*/ VARIANT_BOOL * operationCanceled,
        /*[out]*/ VARIANT_BOOL * foundModifiedTypes ) = 0;
      virtual HRESULT __stdcall get_Comment (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_Comment (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_Version (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_Version (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_IsModifiedByUser (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall get_Requirements (
        /*[out,retval]*/ struct PropertyObject * * val ) = 0;
      virtual HRESULT __stdcall get_Protection (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall put_Protection (
        /*[in]*/ long val ) = 0;
      virtual HRESULT __stdcall get_Locked (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall raw_Lock (
        /*[in]*/ VARIANT passwordString = vtMissing ) = 0;
      virtual HRESULT __stdcall raw_Unlock (
        /*[in]*/ BSTR passwordString ) = 0;
      virtual HRESULT __stdcall put_ChangeCount (
        /*[in]*/ long val ) = 0;
      virtual HRESULT __stdcall get_FileWritingFormat (
        /*[out,retval]*/ enum FileWritingFormats * val ) = 0;
      virtual HRESULT __stdcall put_FileWritingFormat (
        /*[in]*/ enum FileWritingFormats val ) = 0;
};

struct __declspec(uuid("6c9ce610-603f-11d1-93c8-0020af68e893"))
Adapter : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetSmallIcon))
    IPictureDisp * SmallIcon;
    __declspec(property(get=GetLargeIcon))
    IPictureDisp * LargeIcon;
    __declspec(property(get=GetSmallIconIndex))
    long SmallIconIndex;
    __declspec(property(get=GetLargeIconIndex))
    long LargeIconIndex;
    __declspec(property(get=GetIconName))
    _bstr_t IconName;
    __declspec(property(get=GetHidden,put=PutHidden))
    VARIANT_BOOL Hidden;
    __declspec(property(get=GetShowArgsInStepDescription,put=PutShowArgsInStepDescription))
    VARIANT_BOOL ShowArgsInStepDescription;
    __declspec(property(get=GetIsConfigurable))
    VARIANT_BOOL IsConfigurable;
    __declspec(property(get=GetKeyName))
    _bstr_t KeyName;
    __declspec(property(get=GetDisplayName))
    _bstr_t DisplayName;

    //
    // Wrapper methods for error-handling
    //

    HRESULT Configure ( );
    PropertyObjectPtr AsPropertyObject ( );
    VARIANT_BOOL GetIsConfigurable ( );
    _bstr_t GetKeyName ( );
    _bstr_t GetDisplayName ( );
    IPictureDisp * GetSmallIcon ( );
    IPictureDisp * GetLargeIcon ( );
    long GetSmallIconIndex ( );
    long GetLargeIconIndex ( );
    _bstr_t GetIconName ( );
    VARIANT_BOOL GetHidden ( );
    void PutHidden (
        VARIANT_BOOL val );
    VARIANT_BOOL GetShowArgsInStepDescription ( );
    void PutShowArgsInStepDescription (
        VARIANT_BOOL val );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Configure ( ) = 0;
      virtual HRESULT __stdcall raw_AsPropertyObject (
        /*[out,retval]*/ struct PropertyObject * * val ) = 0;
      virtual HRESULT __stdcall get_IsConfigurable (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall get_KeyName (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall get_DisplayName (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall get_SmallIcon (
        /*[out,retval]*/ IPictureDisp * * val ) = 0;
      virtual HRESULT __stdcall get_LargeIcon (
        /*[out,retval]*/ IPictureDisp * * val ) = 0;
      virtual HRESULT __stdcall get_SmallIconIndex (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall get_LargeIconIndex (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall get_IconName (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall get_Hidden (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_Hidden (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_ShowArgsInStepDescription (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_ShowArgsInStepDescription (
        /*[in]*/ VARIANT_BOOL val ) = 0;
};

struct __declspec(uuid("eaab7fb0-70d8-11d1-af2e-006097b79ef5"))
User : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetLoginName,put=PutLoginName))
    _bstr_t LoginName;
    __declspec(property(get=GetPassword,put=PutPassword))
    _bstr_t Password;
    __declspec(property(get=GetFullName,put=PutFullName))
    _bstr_t FullName;
    __declspec(property(get=GetPrivileges))
    PropertyObjectPtr Privileges;
    __declspec(property(get=GetMembers))
    PropertyObjectPtr Members;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL ValidatePassword (
        _bstr_t passwordString );
    VARIANT_BOOL HasPrivilege (
        _bstr_t privilegeName );
    PropertyObjectPtr AsPropertyObject ( );
    _bstr_t GetLoginName ( );
    void PutLoginName (
        _bstr_t val );
    _bstr_t GetPassword ( );
    void PutPassword (
        _bstr_t val );
    _bstr_t GetFullName ( );
    void PutFullName (
        _bstr_t val );
    PropertyObjectPtr GetPrivileges ( );
    PropertyObjectPtr GetMembers ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_ValidatePassword (
        /*[in]*/ BSTR passwordString,
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall raw_HasPrivilege (
        /*[in]*/ BSTR privilegeName,
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall raw_AsPropertyObject (
        /*[out,retval]*/ struct PropertyObject * * val ) = 0;
      virtual HRESULT __stdcall get_LoginName (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_LoginName (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_Password (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_Password (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_FullName (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_FullName (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_Privileges (
        /*[out,retval]*/ struct PropertyObject * * val ) = 0;
      virtual HRESULT __stdcall get_Members (
        /*[out,retval]*/ struct PropertyObject * * val ) = 0;
};

struct __declspec(uuid("eedba160-05ae-11d4-afe8-006097b79ef5"))
UsersFile : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetUserList,put=PutRefUserList))
    PropertyObjectPtr UserList;
    __declspec(property(get=GetUserProfileList,put=PutUserProfileList))
    PropertyObjectPtr UserProfileList;
    __declspec(property(get=GetUserGroupList,put=PutUserGroupList))
    PropertyObjectPtr UserGroupList;

    //
    // Wrapper methods for error-handling
    //

    PropertyObjectPtr GetUserList ( );
    void PutUserList (
        struct PropertyObject * val );
    void PutRefUserList (
        struct PropertyObject * val );
    PropertyObjectPtr GetUserProfileList ( );
    void PutUserProfileList (
        struct PropertyObject * val );
    HRESULT ReloadFromDisk ( );
    PropertyObjectFilePtr AsPropertyObjectFile ( );
    PropertyObjectPtr GetUserGroupList ( );
    void PutUserGroupList (
        struct PropertyObject * val );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_UserList (
        /*[out,retval]*/ struct PropertyObject * * val ) = 0;
      virtual HRESULT __stdcall put_UserList (
        /*[in]*/ struct PropertyObject * val ) = 0;
      virtual HRESULT __stdcall putref_UserList (
        /*[in]*/ struct PropertyObject * val ) = 0;
      virtual HRESULT __stdcall get_UserProfileList (
        /*[out,retval]*/ struct PropertyObject * * val ) = 0;
      virtual HRESULT __stdcall put_UserProfileList (
        /*[in]*/ struct PropertyObject * val ) = 0;
      virtual HRESULT __stdcall raw_ReloadFromDisk ( ) = 0;
      virtual HRESULT __stdcall raw_AsPropertyObjectFile (
        /*[out,retval]*/ struct PropertyObjectFile * * val ) = 0;
      virtual HRESULT __stdcall get_UserGroupList (
        /*[out,retval]*/ struct PropertyObject * * val ) = 0;
      virtual HRESULT __stdcall put_UserGroupList (
        /*[in]*/ struct PropertyObject * val ) = 0;
};

struct __declspec(uuid("42a5aef1-5a44-11d3-afbc-006097b79ef5"))
WorkspaceObject : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPath,put=PutPath))
    _bstr_t Path;
    __declspec(property(get=GetDisplayName,put=PutDisplayName))
    _bstr_t DisplayName;
    __declspec(property(get=GetIsCodeModule))
    VARIANT_BOOL IsCodeModule;
    __declspec(property(get=GetCodeModuleSeqFilePath,put=PutCodeModuleSeqFilePath))
    _bstr_t CodeModuleSeqFilePath;
    __declspec(property(get=GetObjectType))
    enum WorkspaceObjectTypes ObjectType;
    __declspec(property(get=GetSourceControlStatus))
    long SourceControlStatus;
    __declspec(property(get=GetProjectFile))
    PropertyObjectFilePtr ProjectFile;
    __declspec(property(get=GetFileExists))
    VARIANT_BOOL FileExists;
    __declspec(property(get=GetLastSourceControlMessages))
    _bstr_t LastSourceControlMessages;
    __declspec(property(get=GetNumContainedObjects))
    long NumContainedObjects;

    //
    // Wrapper methods for error-handling
    //

    WorkspaceObjectPtr NewFolder (
        _bstr_t Name );
    WorkspaceObjectPtr NewFile (
        _bstr_t Path );
    HRESULT InsertObject (
        struct WorkspaceObject * obj,
        long index );
    _bstr_t GetPath ( );
    void PutPath (
        _bstr_t val );
    _bstr_t GetDisplayName ( );
    void PutDisplayName (
        _bstr_t val );
    VARIANT_BOOL GetIsCodeModule ( );
    _bstr_t GetCodeModuleSeqFilePath ( );
    void PutCodeModuleSeqFilePath (
        _bstr_t val );
    enum WorkspaceObjectTypes GetObjectType ( );
    long GetSourceControlStatus ( );
    VARIANT_BOOL DoSourceControlCommand (
        enum SourceControlCommands scCommand,
        VARIANT_BOOL * modifiedObject,
        long options,
        const _variant_t & itemList = vtMissing );
    PropertyObjectPtr AsPropertyObject ( );
    _bstr_t GetAbsolutePath ( );
    WorkspaceObjectPtr RemoveObject (
        long index );
    PropertyObjectFilePtr GetProjectFile ( );
    SAFEARRAY * InsertCodeModules (
        const _variant_t & itemList = vtMissing );
    HRESULT UpdateStatus (
        long options );
    VARIANT_BOOL GetFileExists ( );
    _bstr_t GetLastSourceControlMessages ( );
    VARIANT_BOOL CanDoSourceControlCommand (
        enum SourceControlCommands scCommand,
        long options,
        const _variant_t & itemList = vtMissing );
    WorkspaceObjectPtr GetParentContainer ( );
    long GetNumContainedObjects ( );
    WorkspaceObjectPtr GetContainedObject (
        long index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_NewFolder (
        /*[in]*/ BSTR Name,
        /*[out,retval]*/ struct WorkspaceObject * * val ) = 0;
      virtual HRESULT __stdcall raw_NewFile (
        /*[in]*/ BSTR Path,
        /*[out,retval]*/ struct WorkspaceObject * * val ) = 0;
      virtual HRESULT __stdcall raw_InsertObject (
        /*[in]*/ struct WorkspaceObject * obj,
        /*[in]*/ long index ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_Path (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_DisplayName (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_DisplayName (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_IsCodeModule (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall get_CodeModuleSeqFilePath (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_CodeModuleSeqFilePath (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_ObjectType (
        /*[out,retval]*/ enum WorkspaceObjectTypes * val ) = 0;
      virtual HRESULT __stdcall get_SourceControlStatus (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall raw_DoSourceControlCommand (
        /*[in]*/ enum SourceControlCommands scCommand,
        /*[out]*/ VARIANT_BOOL * modifiedObject,
        /*[in]*/ long options,
        /*[in]*/ VARIANT itemList,
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall raw_AsPropertyObject (
        /*[out,retval]*/ struct PropertyObject * * val ) = 0;
      virtual HRESULT __stdcall raw_GetAbsolutePath (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall raw_RemoveObject (
        /*[in]*/ long index,
        /*[out,retval]*/ struct WorkspaceObject * * val ) = 0;
      virtual HRESULT __stdcall get_ProjectFile (
        /*[out,retval]*/ struct PropertyObjectFile * * val ) = 0;
      virtual HRESULT __stdcall raw_InsertCodeModules (
        /*[in]*/ VARIANT itemList,
        /*[out,retval]*/ SAFEARRAY * * val ) = 0;
      virtual HRESULT __stdcall raw_UpdateStatus (
        /*[in]*/ long options ) = 0;
      virtual HRESULT __stdcall get_FileExists (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall get_LastSourceControlMessages (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall raw_CanDoSourceControlCommand (
        /*[in]*/ enum SourceControlCommands scCommand,
        /*[in]*/ long options,
        /*[in]*/ VARIANT itemList,
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall raw_GetParentContainer (
        /*[out,retval]*/ struct WorkspaceObject * * val ) = 0;
      virtual HRESULT __stdcall get_NumContainedObjects (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall raw_GetContainedObject (
        /*[in]*/ long index,
        /*[out,retval]*/ struct WorkspaceObject * * val ) = 0;
};

struct __declspec(uuid("42a5aef0-5a44-11d3-afbc-006097b79ef5"))
WorkspaceFile : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetRootWorkspaceObject))
    WorkspaceObjectPtr RootWorkspaceObject;
    __declspec(property(get=GetIsConnectedToSCProvider))
    VARIANT_BOOL IsConnectedToSCProvider;
    __declspec(property(get=GetProviderName,put=PutProviderName))
    _bstr_t ProviderName;
    __declspec(property(get=GetOptionsFile))
    PropertyObjectFilePtr OptionsFile;

    //
    // Wrapper methods for error-handling
    //

    WorkspaceObjectPtr GetRootWorkspaceObject ( );
    VARIANT_BOOL GetIsConnectedToSCProvider ( );
    _bstr_t GetProviderName ( );
    void PutProviderName (
        _bstr_t val );
    PropertyObjectFilePtr AsPropertyObjectFile ( );
    WorkspaceObjectPtr FindWorkspaceObject (
        _bstr_t fullPath );
    HRESULT RunSourceControlProvider ( );
    VARIANT_BOOL DisplayAddFileToWorkspaceDialog (
        struct WorkspaceObject * selectedProject,
        _bstr_t fullPath );
    PropertyObjectFilePtr GetOptionsFile ( );
    VARIANT_BOOL SaveWorkspaceAndProjectFiles (
        long options );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_RootWorkspaceObject (
        /*[out,retval]*/ struct WorkspaceObject * * val ) = 0;
      virtual HRESULT __stdcall get_IsConnectedToSCProvider (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall get_ProviderName (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_ProviderName (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall raw_AsPropertyObjectFile (
        /*[out,retval]*/ struct PropertyObjectFile * * val ) = 0;
      virtual HRESULT __stdcall raw_FindWorkspaceObject (
        /*[in]*/ BSTR fullPath,
        /*[out,retval]*/ struct WorkspaceObject * * val ) = 0;
      virtual HRESULT __stdcall raw_RunSourceControlProvider ( ) = 0;
      virtual HRESULT __stdcall raw_DisplayAddFileToWorkspaceDialog (
        /*[in]*/ struct WorkspaceObject * selectedProject,
        /*[in]*/ BSTR fullPath,
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall get_OptionsFile (
        /*[out,retval]*/ struct PropertyObjectFile * * val ) = 0;
      virtual HRESULT __stdcall raw_SaveWorkspaceAndProjectFiles (
        /*[in]*/ long options,
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
};

struct __declspec(uuid("e7495e94-98e0-4d89-bfea-3f850f0a0399"))
Expression : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetNumTokens))
    long NumTokens;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetText ( );
    void PutText (
        _bstr_t val );
    long GetNumTokens ( );
    HRESULT GetToken (
        long tokenIndex,
        enum TokenCode * TokenCode,
        long * charIndex,
        long * numChars,
        BSTR * tokenText );
    long Tokenize (
        long options,
        long initialParseState );
    VARIANT_BOOL Validate (
        struct PropertyObject * evaluationContext,
        VARIANT_BOOL checkSyntaxOnly,
        long EvaluationOptions,
        BSTR * errMsg,
        long * errorCharIndex,
        long * errorEndCharIndex );
    PropertyObjectPtr Evaluate (
        struct PropertyObject * evaluationContext,
        long EvaluationOptions );
    enum TSError ValidateEvaluationType (
        struct EvaluationTypes * validEvaluationTypes,
        SAFEARRAY * additionalConstants,
        struct PropertyObject * evaluationContext,
        long EvaluationOptions,
        BSTR * errMsg,
        long * errorStartIndex,
        long * errorEndIndex );
    PropertyObjectPtr GetConstantValue ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_NumTokens (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall raw_GetToken (
        /*[in]*/ long tokenIndex,
        /*[out]*/ enum TokenCode * TokenCode,
        /*[out]*/ long * charIndex,
        /*[out]*/ long * numChars,
        /*[out]*/ BSTR * tokenText ) = 0;
      virtual HRESULT __stdcall raw_Tokenize (
        /*[in]*/ long options,
        /*[in]*/ long initialParseState,
        /*[out,retval]*/ long * finalParseState ) = 0;
      virtual HRESULT __stdcall raw_Validate (
        /*[in]*/ struct PropertyObject * evaluationContext,
        /*[in]*/ VARIANT_BOOL checkSyntaxOnly,
        /*[in]*/ long EvaluationOptions,
        /*[out]*/ BSTR * errMsg,
        /*[out]*/ long * errorCharIndex,
        /*[out]*/ long * errorEndCharIndex,
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall raw_Evaluate (
        /*[in]*/ struct PropertyObject * evaluationContext,
        /*[in]*/ long EvaluationOptions,
        /*[out,retval]*/ struct PropertyObject * * val ) = 0;
      virtual HRESULT __stdcall raw_ValidateEvaluationType (
        /*[in]*/ struct EvaluationTypes * validEvaluationTypes,
        /*[in]*/ SAFEARRAY * additionalConstants,
        /*[in]*/ struct PropertyObject * evaluationContext,
        /*[in]*/ long EvaluationOptions,
        /*[out]*/ BSTR * errMsg,
        /*[out]*/ long * errorStartIndex,
        /*[out]*/ long * errorEndIndex,
        /*[out,retval]*/ enum TSError * val ) = 0;
      virtual HRESULT __stdcall raw_GetConstantValue (
        /*[out,retval]*/ struct PropertyObject * * constant ) = 0;
};

struct __declspec(uuid("dff35f37-1d59-4c02-b96f-28bf2e72ce91"))
ReportSection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetReportSubsections,put=PutReportSubsections))
    ReportSectionsPtr ReportSubsections;
    __declspec(property(get=GetBody,put=PutBody))
    _bstr_t Body;
    __declspec(property(get=GetIsEmpty))
    VARIANT_BOOL IsEmpty;
    __declspec(property(get=GetId))
    long Id;
    __declspec(property(get=GetHeader,put=PutHeader))
    _bstr_t Header;
    __declspec(property(get=GetFooter,put=PutFooter))
    _bstr_t Footer;

    //
    // Wrapper methods for error-handling
    //

    ReportSectionsPtr GetReportSubsections ( );
    void PutReportSubsections (
        struct ReportSections * val );
    _bstr_t GetBody ( );
    void PutBody (
        _bstr_t val );
    VARIANT_BOOL GetIsEmpty ( );
    long GetId ( );
    _bstr_t GetHeader ( );
    void PutHeader (
        _bstr_t val );
    _bstr_t GetFooter ( );
    void PutFooter (
        _bstr_t val );
    _bstr_t GetAllText ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ReportSubsections (
        /*[out,retval]*/ struct ReportSections * * val ) = 0;
      virtual HRESULT __stdcall put_ReportSubsections (
        /*[in]*/ struct ReportSections * val ) = 0;
      virtual HRESULT __stdcall get_Body (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_Body (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_IsEmpty (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall get_Id (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall get_Header (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_Header (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_Footer (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_Footer (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall raw_GetAllText (
        /*[out,retval]*/ BSTR * val ) = 0;
};

struct __declspec(uuid("b21e4047-6875-4ea0-9eae-6086bf665066"))
ReportSections : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    ReportSectionPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    ReportSectionPtr GetItem (
        const _variant_t & index );
    IUnknownPtr Get_NewEnum ( );
    long GetCount ( );
    ReportSectionPtr Insert (
        long index,
        _bstr_t Header,
        _bstr_t Body,
        _bstr_t Footer );
    ReportSectionPtr Remove (
        long index );
    HRESULT Clear ( );
    HRESULT InsertExisting (
        struct ReportSection * val,
        long index );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT index,
        /*[out,retval]*/ struct ReportSection * * rptSection ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * enumerator ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall raw_Insert (
        /*[in]*/ long index,
        /*[in]*/ BSTR Header,
        /*[in]*/ BSTR Body,
        /*[in]*/ BSTR Footer,
        /*[out,retval]*/ struct ReportSection * * rptSection ) = 0;
      virtual HRESULT __stdcall raw_Remove (
        /*[in]*/ long index,
        /*[out,retval]*/ struct ReportSection * * val ) = 0;
      virtual HRESULT __stdcall raw_Clear ( ) = 0;
      virtual HRESULT __stdcall raw_InsertExisting (
        /*[in]*/ struct ReportSection * val,
        /*[in]*/ long index ) = 0;
};

struct __declspec(uuid("c9e948a0-acfc-11d1-8de0-006097053485"))
Report : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAll))
    _bstr_t All;
    __declspec(property(get=GetId))
    long Id;
    __declspec(property(get=GetLocation,put=PutLocation))
    _bstr_t Location;
    __declspec(property(get=GetFormat,put=PutFormat))
    _bstr_t Format;
    __declspec(property(get=GetIsEmpty))
    VARIANT_BOOL IsEmpty;
    __declspec(property(get=GetStyleSheetPath,put=PutStyleSheetPath))
    _bstr_t StyleSheetPath;
    __declspec(property(get=GetTempFileDirectory,put=PutTempFileDirectory))
    _bstr_t TempFileDirectory;
    __declspec(property(get=GetReportSection,put=PutReportSection))
    ReportSectionPtr ReportSection;
    __declspec(property(get=GetSuspendReportRefresh,put=PutSuspendReportRefresh))
    VARIANT_BOOL SuspendReportRefresh;
    __declspec(property(get=GetLatestAppendIndex))
    long LatestAppendIndex;
    __declspec(property(get=GetResetCount))
    long ResetCount;

    //
    // Wrapper methods for error-handling
    //

    long Append (
        _bstr_t stringToAppend );
    long Reset (
        _bstr_t newValue );
    HRESULT Save (
        _bstr_t pathString,
        VARIANT_BOOL appendIfAlreadyExists,
        enum ReportConversion linefeedConversion );
    HRESULT Load (
        _bstr_t pathString,
        enum ReportConversion linefeedConversion );
    HRESULT LaunchViewer (
        enum ReportConversion linefeedConversion );
    _bstr_t GetTempFile (
        enum ReportConversion linefeedConversion,
        const _variant_t & extensionString = vtMissing );
    PropertyObjectPtr AsPropertyObject ( );
    _bstr_t GetAll ( );
    long GetId ( );
    _bstr_t GetLocation ( );
    void PutLocation (
        _bstr_t val );
    _bstr_t GetFormat ( );
    void PutFormat (
        _bstr_t val );
    _bstr_t GetSection (
        long oldestIndex,
        long latestIndex );
    long GetLatestAppendIndex ( );
    long GetResetCount ( );
    VARIANT_BOOL GetIsEmpty ( );
    _bstr_t GetStyleSheetPath ( );
    void PutStyleSheetPath (
        _bstr_t val );
    _bstr_t GetTempFileDirectory ( );
    void PutTempFileDirectory (
        _bstr_t val );
    ReportSectionPtr GetReportSection ( );
    void PutReportSection (
        struct ReportSection * val );
    ReportSectionPtr NewReportSection ( );
    VARIANT_BOOL GetSuspendReportRefresh ( );
    void PutSuspendReportRefresh (
        VARIANT_BOOL val );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Append (
        /*[in]*/ BSTR stringToAppend,
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall raw_Reset (
        /*[in]*/ BSTR newValue,
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall raw_Save (
        /*[in]*/ BSTR pathString,
        /*[in]*/ VARIANT_BOOL appendIfAlreadyExists,
        /*[in]*/ enum ReportConversion linefeedConversion ) = 0;
      virtual HRESULT __stdcall raw_Load (
        /*[in]*/ BSTR pathString,
        /*[in]*/ enum ReportConversion linefeedConversion ) = 0;
      virtual HRESULT __stdcall raw_LaunchViewer (
        /*[in]*/ enum ReportConversion linefeedConversion ) = 0;
      virtual HRESULT __stdcall raw_GetTempFile (
        /*[in]*/ enum ReportConversion linefeedConversion,
        /*[in]*/ VARIANT extensionString,
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall raw_AsPropertyObject (
        /*[out,retval]*/ struct PropertyObject * * val ) = 0;
      virtual HRESULT __stdcall get_All (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall get_Id (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall get_Location (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_Location (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_Format (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_Format (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall raw_GetSection (
        /*[in]*/ long oldestIndex,
        /*[in]*/ long latestIndex,
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall get_LatestAppendIndex (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall get_ResetCount (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall get_IsEmpty (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall get_StyleSheetPath (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_StyleSheetPath (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_TempFileDirectory (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_TempFileDirectory (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_ReportSection (
        /*[out,retval]*/ struct ReportSection * * val ) = 0;
      virtual HRESULT __stdcall put_ReportSection (
        /*[in]*/ struct ReportSection * val ) = 0;
      virtual HRESULT __stdcall raw_NewReportSection (
        /*[out,retval]*/ struct ReportSection * * val ) = 0;
      virtual HRESULT __stdcall get_SuspendReportRefresh (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_SuspendReportRefresh (
        /*[in]*/ VARIANT_BOOL val ) = 0;
};

struct __declspec(uuid("b2794ef5-c0b6-11d0-939c-0020af68e893"))
IEngine : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetGlobals))
    PropertyObjectPtr Globals;
    __declspec(property(get=GetCurrentUser,put=PutCurrentUser))
    UserPtr CurrentUser;
    __declspec(property(get=GetApplicationIsEditor,put=PutApplicationIsEditor))
    VARIANT_BOOL ApplicationIsEditor;
    __declspec(property(get=GetAppMainHwnd,put=PutAppMainHwnd))
    long AppMainHwnd;
    __declspec(property(get=GetNumAdapters))
    long NumAdapters;
    __declspec(property(get=GetCurrentWorkspaceFile,put=PutRefCurrentWorkspaceFile))
    WorkspaceFilePtr CurrentWorkspaceFile;
    __declspec(property(get=GetSecondsSinceStart))
    double SecondsSinceStart;
    __declspec(property(get=GetDefaultAdapter,put=PutDefaultAdapter))
    _bstr_t DefaultAdapter;
    __declspec(property(get=GetCheckOutFilesWhenEdited,put=PutCheckOutFilesWhenEdited))
    VARIANT_BOOL CheckOutFilesWhenEdited;
    __declspec(property(get=GetCheckOutOnlySelectedFiles,put=PutCheckOutOnlySelectedFiles))
    VARIANT_BOOL CheckOutOnlySelectedFiles;
    __declspec(property(get=GetLastWorkspacePath,put=PutLastWorkspacePath))
    _bstr_t LastWorkspacePath;
    __declspec(property(get=GetPromptWhenAddingFilesToSC,put=PutPromptWhenAddingFilesToSC))
    VARIANT_BOOL PromptWhenAddingFilesToSC;
    __declspec(property(get=GetReloadDocsWhenOpeningWorkspace,put=PutReloadDocsWhenOpeningWorkspace))
    VARIANT_BOOL ReloadDocsWhenOpeningWorkspace;
    __declspec(property(get=GetReloadWorkspaceAtStartup,put=PutReloadWorkspaceAtStartup))
    VARIANT_BOOL ReloadWorkspaceAtStartup;
    __declspec(property(get=GetUseDialogForCheckOut,put=PutUseDialogForCheckOut))
    VARIANT_BOOL UseDialogForCheckOut;
    __declspec(property(get=GetOutputMessagesEnabled,put=PutOutputMessagesEnabled))
    VARIANT_BOOL OutputMessagesEnabled;
    __declspec(property(get=GetEnableUserPrivilegeChecking,put=PutEnableUserPrivilegeChecking))
    VARIANT_BOOL EnableUserPrivilegeChecking;
    __declspec(property(get=GetAutoLoginSystemUser,put=PutAutoLoginSystemUser))
    VARIANT_BOOL AutoLoginSystemUser;
    __declspec(property(get=GetMajorVersion))
    long MajorVersion;
    __declspec(property(get=GetMinorVersion))
    long MinorVersion;
    __declspec(property(get=GetRevisionVersion))
    long RevisionVersion;
    __declspec(property(get=GetVersionString))
    _bstr_t VersionString;
    __declspec(property(get=GetEnableRemote,put=PutEnableRemote))
    VARIANT_BOOL EnableRemote;
    __declspec(property(get=GetRequireUserLogin,put=PutRequireUserLogin))
    VARIANT_BOOL RequireUserLogin;
    __declspec(property(get=GetConfigDirectory))
    _bstr_t ConfigDirectory;
    __declspec(property(get=GetBinDirectory))
    _bstr_t BinDirectory;
    __declspec(property(get=GetShowHiddenProperties,put=PutShowHiddenProperties))
    VARIANT_BOOL ShowHiddenProperties;
    __declspec(property(get=GetTestStandDirectory))
    _bstr_t TestStandDirectory;
    __declspec(property(get=GetFileDialogDirHistoryList,put=PutFileDialogDirHistoryList))
    SAFEARRAY * FileDialogDirHistoryList;
    __declspec(property(get=GetStationID,put=PutStationID))
    _bstr_t StationID;
    __declspec(property(get=GetApplicationLicense))
    enum ApplicationLicenses ApplicationLicense;
    __declspec(property(get=GetUndoLimit,put=PutUndoLimit))
    long UndoLimit;
    __declspec(property(get=GetStepTypes))
    PropertyObjectPtr StepTypes;
    __declspec(property(get=GetCustomDataTypes))
    PropertyObjectPtr CustomDataTypes;
    __declspec(property(get=GetBuiltinDataTypes))
    PropertyObjectPtr BuiltinDataTypes;
    __declspec(property(get=GetUtility))
    UtilityPtr Utility;
    __declspec(property(get=GetComputerName))
    _bstr_t ComputerName;
    __declspec(property(get=GetUniqueEngineId))
    _bstr_t UniqueEngineId;
    __declspec(property(get=GetCVIAdapter_ExternalCVIPrj,put=PutCVIAdapter_ExternalCVIPrj))
    _bstr_t CVIAdapter_ExternalCVIPrj;
    __declspec(property(get=GetCVIAdapter_ExecuteStepsInCVI,put=PutCVIAdapter_ExecuteStepsInCVI))
    VARIANT_BOOL CVIAdapter_ExecuteStepsInCVI;
    __declspec(property(get=GetTracingEnabled,put=PutTracingEnabled))
    VARIANT_BOOL TracingEnabled;
    __declspec(property(get=GetBreakpointsEnabled,put=PutBreakpointsEnabled))
    VARIANT_BOOL BreakpointsEnabled;
    __declspec(property(get=GetDisableResults,put=PutDisableResults))
    VARIANT_BOOL DisableResults;
    __declspec(property(get=GetAlwaysGotoCleanupOnFailure,put=PutAlwaysGotoCleanupOnFailure))
    VARIANT_BOOL AlwaysGotoCleanupOnFailure;
    __declspec(property(get=GetBreakOnRTE,put=PutBreakOnRTE))
    VARIANT_BOOL BreakOnRTE;
    __declspec(property(get=GetExecutionMask,put=PutExecutionMask))
    long ExecutionMask;
    __declspec(property(get=GetSeqFileVersionAutoIncrementOpt,put=PutSeqFileVersionAutoIncrementOpt))
    enum FileVersionAutoIncrement SeqFileVersionAutoIncrementOpt;
    __declspec(property(get=GetTemporaryGlobals))
    PropertyObjectPtr TemporaryGlobals;
    __declspec(property(get=GetRTEOption,put=PutRTEOption))
    enum RTEOptions RTEOption;
    __declspec(property(get=GetSecondsSince1970UniversalCoordinatedTime))
    double SecondsSince1970UniversalCoordinatedTime;
    __declspec(property(get=GetUIMessagePollingEnabled,put=PutUIMessagePollingEnabled))
    VARIANT_BOOL UIMessagePollingEnabled;
    __declspec(property(get=GetIsUIMessageQueueEmpty))
    VARIANT_BOOL IsUIMessageQueueEmpty;
    __declspec(property(get=GetUIMessageDelay,put=PutUIMessageDelay))
    long UIMessageDelay;
    __declspec(property(get=GetUIMessageMinDelay,put=PutUIMessageMinDelay))
    long UIMessageMinDelay;
    __declspec(property(get=GetIsRemote,put=PutIsRemote))
    VARIANT_BOOL IsRemote;
    __declspec(property(get=GetMasterEngine,put=PutRefMasterEngine))
    IDispatchPtr MasterEngine;
    __declspec(property(get=GetSearchDirectories))
    SearchDirectoriesPtr SearchDirectories;
    __declspec(property(get=GetExternalReportViewers))
    ExternalReportViewersPtr ExternalReportViewers;
    __declspec(property(get=GetGlobalsFile))
    PropertyObjectFilePtr GlobalsFile;
    __declspec(property(get=GetUsersFile))
    UsersFilePtr UsersFile;
    __declspec(property(get=GetConfigFile))
    PropertyObjectFilePtr ConfigFile;
    __declspec(property(get=GetUseLocalizedDecimalPoint,put=PutUseLocalizedDecimalPoint))
    VARIANT_BOOL UseLocalizedDecimalPoint;
    __declspec(property(get=GetStationOptions))
    StationOptionsPtr StationOptions;
    __declspec(property(get=GetSmallImageList))
    long SmallImageList;
    __declspec(property(get=GetLargeImageList))
    long LargeImageList;
    __declspec(property(get=GetImages))
    ImagesPtr Images;
    __declspec(property(get=GetWatchExpressionsEnabled,put=PutWatchExpressionsEnabled))
    VARIANT_BOOL WatchExpressionsEnabled;
    __declspec(property(get=GetNumImages))
    long NumImages;
    __declspec(property(get=GetLicenseType))
    enum LicenseTypes LicenseType;
    __declspec(property(get=GetPersistBreakpoints,put=PutPersistBreakpoints))
    VARIANT_BOOL PersistBreakpoints;
    __declspec(property(get=GetPersistWatchExpressions,put=PutPersistWatchExpressions))
    VARIANT_BOOL PersistWatchExpressions;
    __declspec(property(get=GetDefaultAdapterIndex,put=PutDefaultAdapterIndex))
    long DefaultAdapterIndex;
    __declspec(property(get=GetStationModelSequenceFilePath,put=PutStationModelSequenceFilePath))
    _bstr_t StationModelSequenceFilePath;
    __declspec(property(get=GetPersistConfigFile,put=PutPersistConfigFile))
    VARIANT_BOOL PersistConfigFile;

    //
    // Wrapper methods for error-handling
    //

    HRESULT ShutDown (
        VARIANT_BOOL final );
    SequenceFilePtr GetSequenceFile (
        _bstr_t SequenceFilePath,
        long getSeqFileFlags );
    SequenceFilePtr NewSequenceFile ( );
    HRESULT ReleaseSequenceFile (
        struct SequenceFile * sequenceFileToRelease );
    SequencePtr NewSequence ( );
    StepPtr NewStep (
        _bstr_t adapterKeyNameVal,
        _bstr_t stepTypeName );
    UserPtr NewUser (
        struct User * userProfile );
    VARIANT_BOOL UserNameExists (
        _bstr_t LoginName );
    UserPtr GetUser (
        _bstr_t LoginName );
    VARIANT_BOOL CurrentUserHasPrivilege (
        _bstr_t privilegeName );
    UserPtr GetUserProfile (
        _bstr_t userProfileName );
    AdapterPtr GetAdapter (
        long adapterIndex );
    ExecutionPtr NewExecution (
        struct SequenceFile * sequenceFileParam,
        _bstr_t sequenceNameParam,
        struct SequenceFile * processModelParam,
        VARIANT_BOOL breakAtFirstStep,
        long executionTypeMaskParam,
        const _variant_t & sequenceArgsParam = vtMissing,
        const _variant_t & editArgsParam = vtMissing,
        const _variant_t & InteractiveArgsParam = vtMissing );
    ExecutionPtr CallFrontEndCallback (
        _bstr_t sequenceNameParam,
        struct PropertyObject * argumentList );
    HRESULT AbortAll ( );
    HRESULT BreakAll ( );
    HRESULT TerminateAll ( );
    RExecutorPtr GetRemoteExecutorInterface (
        long adapterIndex );
    InteractiveArgsPtr NewInteractiveArgs ( );
    EditArgsPtr NewEditArgs ( );
    PropertyObjectPtr NewPropertyObject (
        enum PropertyValueTypes ValueType,
        VARIANT_BOOL asArray,
        _bstr_t typeNameParam,
        long options );
    HRESULT RegisterUIMessageCallback (
        long callbackFuncAddr );
    UIMessagePtr GetUIMessage ( );
    VARIANT_BOOL DisplayLoginDialog (
        _bstr_t dlgTitle,
        _bstr_t initialLoginName,
        _bstr_t initialPassword,
        VARIANT_BOOL modalToAppMainWind,
        struct User * * userObject );
    VARIANT_BOOL DisplayEditUserDialog (
        _bstr_t dlgTitle,
        struct User * userObject,
        VARIANT_BOOL modalToAppMainWind );
    VARIANT_BOOL DisplayNewUserDialog (
        _bstr_t dlgTitle,
        VARIANT_BOOL modalToAppMainWind,
        struct User * * userObject );
    VARIANT_BOOL DisplaySearchDirDialog (
        _bstr_t dlgTitle,
        VARIANT_BOOL readOnly,
        VARIANT_BOOL modalToAppMainWind );
    VARIANT_BOOL DisplayOptionsDialog (
        _bstr_t dlgTitle,
        VARIANT_BOOL readOnly,
        VARIANT_BOOL modalToAppMainWind );
    HRESULT DisplayRunTimeErrorDialog (
        _bstr_t dlgTitle,
        _bstr_t errorMessage,
        VARIANT_BOOL inCleanupStepGroup,
        VARIANT_BOOL modalToAppMainWind,
        VARIANT_BOOL * displayOnNextError,
        VARIANT_BOOL * suspendExecution,
        enum RTEOptions * runTimeErrorAction );
    VARIANT_BOOL DisplayOpenFileDialog (
        _bstr_t dlgTitle,
        _bstr_t okButtonText,
        _bstr_t initialPath,
        VARIANT_BOOL modalToAppMainWind,
        BSTR * selectedPath,
        BSTR * absolutePath,
        long openFileDialogFlags,
        _bstr_t defaultExtension,
        long win32Flags,
        _bstr_t fileFilter,
        const _variant_t & currentSequenceFile = vtMissing );
    VARIANT_BOOL DisplayStepPropDialog (
        _bstr_t dlgTitle,
        struct Step * Step,
        VARIANT_BOOL readOnly,
        VARIANT_BOOL modalToAppMainWind,
        VARIANT_BOOL showViewContentsBtn,
        VARIANT_BOOL * viewContents,
        VARIANT_BOOL * modifiedStep );
    VARIANT_BOOL DisplaySequencePropDialog (
        _bstr_t dlgTitle,
        struct Sequence * Sequence,
        VARIANT_BOOL readOnly,
        VARIANT_BOOL modalToAppMainWind,
        VARIANT_BOOL showViewContentsBtn,
        VARIANT_BOOL * viewContents );
    VARIANT_BOOL DisplaySeqFilePropDialog (
        _bstr_t dlgTitle,
        struct SequenceFile * sequenceFileParam,
        VARIANT_BOOL readOnly,
        VARIANT_BOOL modalToAppMainWind,
        VARIANT_BOOL showViewContentsBtn,
        VARIANT_BOOL * viewContents );
    VARIANT_BOOL DisplayPreconditionDialog (
        _bstr_t dlgTitle,
        struct Sequence * Sequence,
        VARIANT_BOOL readOnly,
        VARIANT_BOOL modalToAppMainWind,
        const _variant_t & initialStep = vtMissing );
    VARIANT_BOOL DisplayBrowseExprDialog (
        _bstr_t dlgTitle,
        struct SequenceContext * sequenceContextParam,
        _bstr_t expressionIn,
        long selectionStartIn,
        long selectionEndIn,
        _bstr_t initialVariableName,
        VARIANT_BOOL usesCRLF,
        VARIANT_BOOL modalToAppMainWind,
        BSTR * expressionOut,
        long * selectionStartOut,
        long * selectionEndOut );
    VARIANT_BOOL DisplayToolMenuDialog (
        _bstr_t dlgTitle,
        VARIANT_BOOL readOnly,
        VARIANT_BOOL modalToAppMainWind );
    VARIANT_BOOL DisplayExternalViewerDialog (
        _bstr_t dlgTitle,
        VARIANT_BOOL readOnly,
        VARIANT_BOOL modalToAppMainWind );
    VARIANT_BOOL DisplayAdapterConfigDialog (
        _bstr_t dlgTitle,
        VARIANT_BOOL adapterSelectorReadOnly,
        VARIANT_BOOL adapterCfgReadOnly,
        VARIANT_BOOL hideAdapterSelector,
        VARIANT_BOOL modalToAppMainWind );
    VARIANT_BOOL DisplayLoopOnStepsDialog (
        _bstr_t dlgTitle,
        struct Step * selectedStep,
        VARIANT_BOOL modalToAppMainWnd,
        long * loopCountValue,
        BSTR * stopExpressionValue );
    long ConstructToolMenus (
        const _variant_t & editArgsParam = vtMissing );
    long GetNumToolMenus ( );
    long GetNumToolMenuItems (
        long menuIndex );
    HRESULT GetToolMenuItemInfo (
        long menuIndex,
        long itemIndex,
        BSTR * itemText,
        long * subMenuIndex,
        VARIANT_BOOL * enabled,
        long * uniqueItemID );
    HRESULT GetToolMenuItemInfoWithID (
        long uniqueItemID,
        BSTR * itemText,
        long * subMenuIndex,
        VARIANT_BOOL * enabled );
    HRESULT InvokeToolMenuItem (
        long menuIndex,
        long itemIndex );
    HRESULT InvokeToolMenuItemWithID (
        long uniqueItemID );
    HRESULT EvalToolMenuItemExprs (
        const _variant_t & editArgsParam = vtMissing );
    VARIANT_BOOL FindFile (
        _bstr_t fileToFind,
        BSTR * absolutePath,
        VARIANT_BOOL * userCancelled,
        enum FindFilePromptOptions promptOption,
        enum FindFileSearchListOptions srchListOption,
        VARIANT_BOOL isCommand,
        const _variant_t & currentSequenceFile = vtMissing );
    VARIANT_BOOL FindPath (
        _bstr_t pathToFind,
        BSTR * absolutePath,
        enum FindPathStatusValues * statusFlag,
        const _variant_t & currentSequenceFile = vtMissing );
    _bstr_t CreateTempFile (
        _bstr_t baseName,
        _bstr_t extension,
        _bstr_t directory );
    VARIANT_BOOL CheckExprSyntax (
        _bstr_t expressionStr,
        BSTR * errorDescription,
        long * startErrPos,
        long * endErrPos );
    VARIANT_BOOL GetErrorString (
        enum TSError errorCode,
        BSTR * errorString );
    _bstr_t GetResourceString (
        _bstr_t section,
        _bstr_t symbol,
        const _variant_t & defaultString,
        VARIANT * found );
    HRESULT LaunchExternalViewer (
        _bstr_t FilePath );
    long NotifyStartOfModalDialog ( );
    HRESULT NotifyEndOfModalDialog (
        long modalID );
    HRESULT CommitGlobalsToDisk (
        VARIANT_BOOL promptOnSaveConflicts );
    HRESULT UnloadAllModules ( );
    SequenceFilePtr GetStationModelSequenceFile (
        BSTR * modelDescriptionString );
    HRESULT ReloadGlobals ( );
    PropertyObjectPtr GetGlobals ( );
    UserPtr GetCurrentUser ( );
    void PutCurrentUser (
        struct User * val );
    VARIANT_BOOL GetApplicationIsEditor ( );
    void PutApplicationIsEditor (
        VARIANT_BOOL isEditor );
    long GetAppMainHwnd ( );
    void PutAppMainHwnd (
        long hwnd );
    long GetNumAdapters ( );
    _bstr_t GetDefaultAdapter ( );
    void PutDefaultAdapter (
        _bstr_t adapterKeyNameVal );
    VARIANT_BOOL GetEnableUserPrivilegeChecking ( );
    void PutEnableUserPrivilegeChecking (
        VARIANT_BOOL enabled );
    VARIANT_BOOL GetAutoLoginSystemUser ( );
    void PutAutoLoginSystemUser (
        VARIANT_BOOL enabled );
    long GetMajorVersion ( );
    long GetMinorVersion ( );
    long GetRevisionVersion ( );
    _bstr_t GetVersionString ( );
    VARIANT_BOOL GetEnableRemote ( );
    void PutEnableRemote (
        VARIANT_BOOL enabled );
    _bstr_t GetConfigDirectory ( );
    _bstr_t GetBinDirectory ( );
    _bstr_t GetTestStandDirectory ( );
    PropertyObjectPtr GetStepTypes ( );
    PropertyObjectPtr GetCustomDataTypes ( );
    PropertyObjectPtr GetBuiltinDataTypes ( );
    VARIANT_BOOL GetTracingEnabled ( );
    void PutTracingEnabled (
        VARIANT_BOOL isEnabled );
    VARIANT_BOOL GetBreakpointsEnabled ( );
    void PutBreakpointsEnabled (
        VARIANT_BOOL isEnabled );
    VARIANT_BOOL GetDisableResults ( );
    void PutDisableResults (
        VARIANT_BOOL isDisabled );
    VARIANT_BOOL GetAlwaysGotoCleanupOnFailure ( );
    void PutAlwaysGotoCleanupOnFailure (
        VARIANT_BOOL isEnabled );
    VARIANT_BOOL GetBreakOnRTE ( );
    void PutBreakOnRTE (
        VARIANT_BOOL isEnabled );
    long GetExecutionMask ( );
    void PutExecutionMask (
        long val );
    VARIANT_BOOL GetUIMessagePollingEnabled ( );
    void PutUIMessagePollingEnabled (
        VARIANT_BOOL isEnabled );
    VARIANT_BOOL GetIsUIMessageQueueEmpty ( );
    long GetUIMessageDelay ( );
    void PutUIMessageDelay (
        long millisecDelay );
    long GetUIMessageMinDelay ( );
    void PutUIMessageMinDelay (
        long millisecDelay );
    void PutIsRemote (
        VARIANT_BOOL isRemoteParam );
    VARIANT_BOOL GetIsRemote ( );
    _bstr_t LocalizeExpression (
        _bstr_t expressionString,
        enum DecimalPointLocalizationOptions decimalPointOption );
    _bstr_t DelocalizeExpression (
        _bstr_t localizedExpressionString,
        enum DecimalPointLocalizationOptions decimalPointOption );
    _bstr_t GetLocalizedDecimalPoint (
        enum DecimalPointLocalizationOptions decimalPointOption );
    long DisplayMessageBox (
        _bstr_t dlgTitle,
        _bstr_t messageText,
        enum MsgBoxTypes msgBoxType,
        long dlgOptions,
        long win32Flags );
    void PutMasterEngine (
        IDispatch * MasterEngine );
    void PutRefMasterEngine (
        IDispatch * MasterEngine );
    IDispatchPtr GetMasterEngine ( );
    HRESULT GetToolMenuItemInfoEx (
        long menuIndex,
        long itemIndex,
        BSTR * itemText,
        long * subMenuIndex,
        long * itemAttributes,
        long * uniqueItemID );
    HRESULT GetToolMenuItemInfoWithIDEx (
        long uniqueItemID,
        BSTR * itemText,
        long * subMenuIndex,
        long * itemAttributes );
    VARIANT_BOOL GetUseLocalizedDecimalPoint ( );
    void PutUseLocalizedDecimalPoint (
        VARIANT_BOOL enabled );
    PropertyObjectFilePtr NewPropertyObjectFile (
        enum PropertyObjectFileTypes FileType );
    PropertyObjectFilePtr GetGlobalsFile ( );
    UsersFilePtr GetUsersFile ( );
    PropertyObjectFilePtr GetConfigFile ( );
    StepTypePtr NewStepType ( );
    long GetSmallImageList ( );
    long GetLargeImageList ( );
    long AddImage (
        IPictureDisp * image,
        _bstr_t imageName );
    SequenceFilePtr GetSequenceFileEx (
        _bstr_t SequenceFilePath,
        long getSeqFileFlags,
        enum TypeConflictHandlerTypes handlerType );
    VARIANT_BOOL ShouldAutoLaunchExternalReportViewer (
        _bstr_t FilePath );
    VARIANT_BOOL CanCreateStep (
        _bstr_t adapterKeyNameVal,
        _bstr_t stepTypeName );
    long GetDefaultAdapterIndex ( );
    void PutDefaultAdapterIndex (
        long index );
    VARIANT_BOOL DisplayEditPathsInFilesDialog (
        _bstr_t dlgTitle,
        long dlgOptions,
        const _variant_t & initialFile = vtMissing );
    HRESULT DisplayRunTimeErrorDialogEx (
        _bstr_t dlgTitle,
        struct SequenceContext * sequenceContextParam,
        long dlgOptions,
        VARIANT_BOOL * suspendExecution,
        VARIANT_BOOL * dontShowAgainForExecution,
        VARIANT_BOOL * dontShowAgainForBatch,
        enum RTEOptions * runTimeErrorAction );
    VARIANT_BOOL DisplayBrowseExprDialogEx (
        _bstr_t dlgTitle,
        struct PropertyObject * objectToBrowse,
        _bstr_t expressionIn,
        long selectionStartIn,
        long selectionEndIn,
        _bstr_t initialVariableName,
        long dlgOptions,
        BSTR * expressionOut,
        long * selectionStartOut,
        long * selectionEndOut );
    HRESULT DisplayBrowsePropertyObjectDialog (
        _bstr_t dlgTitle,
        struct PropertyObject * objectToBrowse,
        _bstr_t initialLocation,
        long dlgOptions );
    VARIANT_BOOL SaveAllModifiedSeqFiles (
        long options );
    ExecutionPtr CallFrontEndCallbackEx (
        _bstr_t sequenceNameParam,
        struct PropertyObject * argumentList,
        enum TypeConflictHandlerTypes handlerType,
        long reservedParam );
    VARIANT_BOOL DisplaySequenceFileCallbacksDialog (
        _bstr_t dlgTitle,
        struct SequenceFile * sequenceFileParam,
        long dlgOptions,
        BSTR * sequenceToEdit,
        long * numCallbacksAdded,
        long * numCallbacksDeleted );
    VARIANT_BOOL GetProductRegistrationInfo (
        BSTR * userName,
        BSTR * companyName,
        BSTR * serialNumber );
    VARIANT_BOOL SetProductRegistrationInfo (
        _bstr_t userName,
        _bstr_t companyName,
        _bstr_t serialNumber );
    VARIANT_BOOL ReleaseSequenceFileEx (
        struct SequenceFile * sequenceFileToRelease,
        long options );
    WorkspaceFilePtr GetCurrentWorkspaceFile ( );
    void PutCurrentWorkspaceFile (
        struct WorkspaceFile * val );
    void PutRefCurrentWorkspaceFile (
        struct WorkspaceFile * val );
    double GetSecondsSinceStart ( );
    long RegisterModalWindow (
        struct SequenceContext * sequenceContextParam,
        long modalHWND,
        VARIANT_BOOL * shouldAbort );
    HRESULT UnregisterModalWindow (
        long modalID );
    VARIANT_BOOL DisplayFileDialog (
        _bstr_t dlgTitle,
        _bstr_t okButtonText,
        _bstr_t initialPath,
        SAFEARRAY * * selectedPaths,
        SAFEARRAY * * absolutePaths,
        long openFileDialogFlags,
        _bstr_t defaultExtension,
        long win32Flags,
        _bstr_t fileFilter,
        const _variant_t & currentFile,
        VARIANT * fileFilterIndex,
        VARIANT * dirHistoryList );
    _bstr_t SerializeObjects (
        SAFEARRAY * objects,
        long options );
    SAFEARRAY * UnserializeObjects (
        _bstr_t stream,
        long reservedParam,
        enum TypeConflictHandlerTypes handlerType );
    VARIANT_BOOL GetCheckOutFilesWhenEdited ( );
    void PutCheckOutFilesWhenEdited (
        VARIANT_BOOL checkOutFiles );
    VARIANT_BOOL GetCheckOutOnlySelectedFiles ( );
    void PutCheckOutOnlySelectedFiles (
        VARIANT_BOOL onlySelectedFiles );
    _bstr_t GetLastWorkspacePath ( );
    void PutLastWorkspacePath (
        _bstr_t pathString );
    VARIANT_BOOL GetPromptWhenAddingFilesToSC ( );
    void PutPromptWhenAddingFilesToSC (
        VARIANT_BOOL promptAddFile );
    VARIANT_BOOL GetReloadDocsWhenOpeningWorkspace ( );
    void PutReloadDocsWhenOpeningWorkspace (
        VARIANT_BOOL reloadDocs );
    VARIANT_BOOL GetReloadWorkspaceAtStartup ( );
    void PutReloadWorkspaceAtStartup (
        VARIANT_BOOL reloadWorkspace );
    VARIANT_BOOL GetUseDialogForCheckOut ( );
    void PutUseDialogForCheckOut (
        VARIANT_BOOL useDialog );
    HRESULT DisplayWorkspaceBrowserDialog (
        _bstr_t dlgTitle,
        long dlgOptions );
    SAFEARRAY * GetTypeUsageLocations (
        _bstr_t typeNameParam );
    VARIANT_BOOL ResetTypeInstances (
        struct PropertyObject * typeParam,
        long resetTypeInstancesOptions );
    VARIANT_BOOL GetShowHiddenProperties ( );
    void PutShowHiddenProperties (
        VARIANT_BOOL show );
    PropertyObjectPtr GetTypeDefinition (
        _bstr_t typeNameParam );
    SAFEARRAY * GetTypeNames ( );
    PropertyObjectPtr NewDataType (
        enum PropertyValueTypes ValueType,
        VARIANT_BOOL asArray,
        _bstr_t typeNameParam,
        long options );
    PropertyObjectPtr GetInsertStepMenuStructure (
        struct PropertyObjectFile * SelectedFile,
        long hiddenFlags );
    VARIANT_BOOL DisplayStepTypeMenuEditor (
        _bstr_t dlgTitle,
        VARIANT_BOOL forSubsteps,
        long dlgOptions );
    HRESULT LoadTypePaletteFiles ( );
    HRESULT UnloadTypePaletteFiles ( );
    SAFEARRAY * GetTypePaletteFileList ( );
    HRESULT SetTypePaletteFileList (
        SAFEARRAY * typePaletteFiles );
    _bstr_t GetComputerName ( );
    _bstr_t GetUniqueEngineId ( );
    PropertyObjectPtr GetToolMenuStructure ( );
    SAFEARRAY * GetResourceSymbols (
        _bstr_t section );
    _bstr_t GetCVIAdapter_ExternalCVIPrj ( );
    void PutCVIAdapter_ExternalCVIPrj (
        _bstr_t val );
    VARIANT_BOOL GetCVIAdapter_ExecuteStepsInCVI ( );
    void PutCVIAdapter_ExecuteStepsInCVI (
        VARIANT_BOOL val );
    VARIANT_BOOL CheckExpression (
        struct PropertyObject * evaluationContext,
        _bstr_t expressionStr,
        long EvaluationOptions,
        BSTR * errorDescription,
        long * startErrPos,
        long * endErrPos );
    VARIANT_BOOL GetRequireUserLogin ( );
    void PutRequireUserLogin (
        VARIANT_BOOL requireUser );
    SAFEARRAY * GetFileDialogDirHistoryList ( );
    void PutFileDialogDirHistoryList (
        SAFEARRAY * directories );
    _bstr_t GetStationID ( );
    void PutStationID (
        _bstr_t val );
    SequenceContextPtr NewEditContext (
        struct PropertyObject * obj,
        const _variant_t & editArgsParam,
        VARIANT * locationString );
    _bstr_t GetImageName (
        long imageIndex );
    long GetImageIndex (
        _bstr_t imageName );
    long GetNumImages ( );
    enum FileVersionAutoIncrement GetSeqFileVersionAutoIncrementOpt ( );
    void PutSeqFileVersionAutoIncrementOpt (
        enum FileVersionAutoIncrement option );
    PropertyObjectPtr CopyPropertyObject (
        struct PropertyObject * srcObj );
    PropertyObjectPtr GetTemporaryGlobals ( );
    IUnknownPtr GetSyncManager (
        _bstr_t syncObjectName );
    enum RTEOptions GetRTEOption ( );
    void PutRTEOption (
        enum RTEOptions option );
    ExecutionPtr NewHierarchicalExecution (
        SAFEARRAY * sequenceCallSteps,
        long HierarchicalExecutionFlags,
        struct SequenceFile * sequenceFileParam,
        _bstr_t sequenceNameParam,
        struct SequenceFile * processModelParam,
        VARIANT_BOOL breakAtFirstStep,
        long executionTypeMaskParam,
        const _variant_t & sequenceArgsParam = vtMissing,
        const _variant_t & editArgsParam = vtMissing,
        const _variant_t & InteractiveArgsParam = vtMissing );
    double GetSecondsSince1970UniversalCoordinatedTime ( );
    VARIANT_BOOL DisplayEditNumericFormatDialog (
        _bstr_t dlgTitle,
        BSTR * NumericFormat,
        long dlgOptions,
        double sampleNumber );
    PropertyObjectPtr GetInsertVariableMenuStructure (
        struct PropertyObjectFile * SelectedFile,
        long hiddenFlags );
    long IsCurrentSequenceFileVersion (
        _bstr_t FilePath );
    _bstr_t GetStationModelSequenceFilePath ( );
    void PutStationModelSequenceFilePath (
        _bstr_t ModelPath );
    long NotifyStartOfModalDialogEx (
        struct SequenceContext * sequenceContextParam,
        VARIANT_BOOL * shouldAbort );
    _variant_t GetInternalOption (
        enum InternalOptions option );
    HRESULT SetInternalOption (
        enum InternalOptions option,
        const _variant_t & newValue );
    long DisplayHelpTopic (
        long tagID,
        _bstr_t helpFile,
        _bstr_t tableOfContentsFile,
        _bstr_t indexFile,
        _bstr_t homeFile,
        _bstr_t windowCaption );
    VARIANT_BOOL DisplayBreakpointDialog (
        _bstr_t dlgTitle,
        struct SequenceContext * sequenceContextParam,
        struct Execution * executionParam,
        struct Step * selectedStep,
        enum StepGroups stepGroupParam,
        long dlgOptions );
    SearchResultsPtr SearchFiles (
        _bstr_t searchString,
        long SearchOptions,
        long filterOptions,
        long elementsToSearch,
        SAFEARRAY * limitToAdapters,
        SAFEARRAY * limitToNamedProps,
        SAFEARRAY * limitToPropsOfNamedTypes,
        SAFEARRAY * openFilesToSearch,
        SAFEARRAY * directoriesAndFilePaths );
    long GetWatchExpressionsChangeCount ( );
    WatchExpressionsPtr GetWatchExpressions (
        struct SequenceFile * clientSequenceFileParam,
        struct SequenceContext * scopingSeqContext,
        long filterOptions );
    HRESULT SetLocationForNextDialog (
        _bstr_t locationLookupString,
        long elementAtLocation,
        long selectionStart,
        long selectionLength );
    long DisplayHelpFile (
        _bstr_t htmlFile,
        _bstr_t helpFile,
        _bstr_t tableOfContentsFile,
        _bstr_t indexFile,
        _bstr_t homeFile,
        _bstr_t windowCaption );
    HRESULT DisplayEditBreakAndWatchDialog (
        _bstr_t dlgTitle,
        long dlgOptions,
        VARIANT * selectedItemParam );
    VARIANT_BOOL DisplayExpressionEditOptionsDialog (
        _bstr_t dlgTitle,
        long dlgOptions );
    SearchDirectoriesPtr GetSearchDirectories ( );
    HRESULT LoadTypePaletteFilesEx (
        enum TypeConflictHandlerTypes handlerType,
        long options );
    long RegisterUIMessage (
        _bstr_t messageName );
    ExternalReportViewersPtr GetExternalReportViewers ( );
    WorkspaceFilePtr NewWorkspaceFile ( );
    WorkspaceFilePtr OpenWorkspaceFile (
        _bstr_t workspaceFilePath,
        long options,
        enum TypeConflictHandlerTypes handlerType );
    HRESULT ReloadStringResourceFiles ( );
    AdapterPtr GetAdapterByKeyName (
        _bstr_t AdapterKeyName );
    HRESULT PostUIMessage (
        struct Execution * executionParam,
        struct Thread * threadParam,
        enum UIMessageCodes eventCode,
        double numericDataParam,
        _bstr_t stringDataParam,
        IUnknown * activeXDataParam,
        VARIANT_BOOL synchronous );
    VARIANT_BOOL DisplayBrowseExprDialogFromControl (
        IUnknown * expressionEdit,
        _bstr_t dlgTitle,
        long selectionStart,
        long selectionEnd,
        _bstr_t initVarName,
        long dlgOptions,
        VARIANT_BOOL * contextChanged );
    ExpressionPtr NewExpression ( );
    StationOptionsPtr GetStationOptions ( );
    VARIANT_BOOL DisplayStepTypeMenuEditorEx (
        _bstr_t dlgTitle,
        struct PropertyObjectFile * SelectedFile,
        VARIANT_BOOL forSubsteps,
        long dlgOptions );
    TypeUsageListPtr NewTypeUsageList (
        long reservedParam );
    SAFEARRAY * UnserializeObjectsAndTypes (
        _bstr_t stream,
        struct TypeUsageList * * typesUsed,
        long reservedParam,
        enum TypeConflictHandlerTypes handlerType );
    ImagesPtr GetImages ( );
    EditTimeMenuItemsPtr GetEditTimeToolMenuItems (
        long reserved );
    RunTimeMenuItemsPtr GetRunTimeToolMenuItems (
        const _variant_t & editArgsParam,
        long reserved );
    VARIANT_BOOL GetWatchExpressionsEnabled ( );
    void PutWatchExpressionsEnabled (
        VARIANT_BOOL enable );
    HRESULT WriteToolMenuToDisk (
        long reserved );
    HRESULT CreateNewUniqueStepIds (
        SAFEARRAY * steps );
    enum LicenseTypes GetLicenseType ( );
    VARIANT_BOOL GetPersistBreakpoints ( );
    void PutPersistBreakpoints (
        VARIANT_BOOL returnVal );
    VARIANT_BOOL GetPersistWatchExpressions ( );
    void PutPersistWatchExpressions (
        VARIANT_BOOL returnVal );
    _bstr_t GetLicenseDescription (
        long reserved );
    HRESULT GetLocationForNextDialog (
        BSTR * locationLookupString,
        long * elementAtLocation,
        long * selectionStart,
        long * selectionLength,
        VARIANT_BOOL clearLoc );
    HRESULT SetConfigDirectory (
        _bstr_t Path,
        VARIANT_BOOL CopyFilesOnEngineShutdown );
    VARIANT_BOOL DisplayLockUnlockDialog (
        _bstr_t dlgTitle,
        _bstr_t dlgMsg,
        struct PropertyObject * propObject,
        long options,
        VARIANT * passwordString );
    UserPtr GetUserGroup (
        _bstr_t userGroupName );
    VARIANT_BOOL GetPersistConfigFile ( );
    void PutPersistConfigFile (
        VARIANT_BOOL returnVal );
    SequenceFileDifferPtr DiffSequenceFiles (
        struct SequenceFile * sequenceFile1Param,
        struct SequenceFile * sequenceFile2Param,
        long options );
    LocationsPtr NewLocations ( );
    UndoItemCreatorPtr NewUndoItemCreator (
        enum EditKinds kindParam,
        struct PropertyObjectFile * editedFileParam,
        _bstr_t editDescription );
    OutputMessagesPtr GetOutputMessages ( );
    OutputMessagePtr NewOutputMessage (
        _bstr_t messageText,
        _bstr_t categoryText,
        enum OutputMessageSeverityTypes Severity,
        struct SequenceContext * SequenceContext );
    VARIANT_BOOL GetOutputMessagesEnabled ( );
    void PutOutputMessagesEnabled (
        VARIANT_BOOL enable );
    OutputMessagesPtr NewOutputMessages ( );
    UndoStackPtr NewUndoStack ( );
    SAFEARRAY * ParseLookupString (
        _bstr_t lookupString,
        long options );
    enum PromptResults DisplaySaveOverOldFormatDialog (
        _bstr_t Path,
        enum PerformActionOptions * promptForOverwriteOption,
        _bstr_t dlgTitle,
        long dlgOptions );
    VARIANT_BOOL DisplayPreconditionBuilderDialog (
        _bstr_t dlgTitle,
        BSTR * preconditionExpr,
        struct Sequence * Sequence,
        long dlgOptions,
        struct SequenceContext * SequenceContext );
    VARIANT_BOOL DisplayConfigureTypePalettesDialog (
        _bstr_t dlgTitle,
        long dlgOptions );
    EvaluationTypesPtr NewEvaluationTypes (
        long initialPropertyValueTypes );
    VARIANT_BOOL DisplayEditNumericFormatDialogEx (
        _bstr_t dlgTitle,
        BSTR * NumericFormat,
        VARIANT_BOOL * validFormat,
        long dlgOptions,
        double sampleNumber );
    FileInformationPtr GetFileInformation (
        _bstr_t Path );
    enum PromptResults DisplaySaveAsPreviousOverExistingFileDialog (
        _bstr_t Path,
        _bstr_t dlgTitle );
    PropertyObjectFilePtr GetTemplatesFile (
        long options );
    long AcquireLicense (
        enum ApplicationLicenses license,
        long options );
    HRESULT ReleaseLicense (
        long licenseHandle,
        long reserved );
    enum ApplicationLicenses GetApplicationLicense ( );
    long GetUndoLimit ( );
    void PutUndoLimit (
        long val );
    _bstr_t GetTestStandPath (
        enum TestStandPaths testStandPath );
    UtilityPtr GetUtility ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_ShutDown (
        /*[in]*/ VARIANT_BOOL final ) = 0;
      virtual HRESULT __stdcall raw_GetSequenceFile (
        /*[in]*/ BSTR SequenceFilePath,
        /*[in]*/ long getSeqFileFlags,
        /*[out,retval]*/ struct SequenceFile * * val ) = 0;
      virtual HRESULT __stdcall raw_NewSequenceFile (
        /*[out,retval]*/ struct SequenceFile * * val ) = 0;
      virtual HRESULT __stdcall raw_ReleaseSequenceFile (
        /*[in]*/ struct SequenceFile * sequenceFileToRelease ) = 0;
      virtual HRESULT __stdcall raw_NewSequence (
        /*[out,retval]*/ struct Sequence * * val ) = 0;
      virtual HRESULT __stdcall raw_NewStep (
        /*[in]*/ BSTR adapterKeyNameVal,
        /*[in]*/ BSTR stepTypeName,
        /*[out,retval]*/ struct Step * * val ) = 0;
      virtual HRESULT __stdcall raw_NewUser (
        /*[in]*/ struct User * userProfile,
        /*[out,retval]*/ struct User * * val ) = 0;
      virtual HRESULT __stdcall raw_UserNameExists (
        /*[in]*/ BSTR LoginName,
        /*[out,retval]*/ VARIANT_BOOL * Exists ) = 0;
      virtual HRESULT __stdcall raw_GetUser (
        /*[in]*/ BSTR LoginName,
        /*[out,retval]*/ struct User * * val ) = 0;
      virtual HRESULT __stdcall raw_CurrentUserHasPrivilege (
        /*[in]*/ BSTR privilegeName,
        /*[out,retval]*/ VARIANT_BOOL * HasPrivilege ) = 0;
      virtual HRESULT __stdcall raw_GetUserProfile (
        /*[in]*/ BSTR userProfileName,
        /*[out,retval]*/ struct User * * val ) = 0;
      virtual HRESULT __stdcall raw_GetAdapter (
        /*[in]*/ long adapterIndex,
        /*[out,retval]*/ struct Adapter * * val ) = 0;
      virtual HRESULT __stdcall raw_NewExecution (
        /*[in]*/ struct SequenceFile * sequenceFileParam,
        /*[in]*/ BSTR sequenceNameParam,
        /*[in]*/ struct SequenceFile * processModelParam,
        /*[in]*/ VARIANT_BOOL breakAtFirstStep,
        /*[in]*/ long executionTypeMaskParam,
        /*[in]*/ VARIANT sequenceArgsParam,
        /*[in]*/ VARIANT editArgsParam,
        /*[in]*/ VARIANT InteractiveArgsParam,
        /*[out,retval]*/ struct Execution * * val ) = 0;
      virtual HRESULT __stdcall raw_CallFrontEndCallback (
        /*[in]*/ BSTR sequenceNameParam,
        /*[in]*/ struct PropertyObject * argumentList,
        /*[out,retval]*/ struct Execution * * exeHandleObj ) = 0;
      virtual HRESULT __stdcall raw_AbortAll ( ) = 0;
      virtual HRESULT __stdcall raw_BreakAll ( ) = 0;
      virtual HRESULT __stdcall raw_TerminateAll ( ) = 0;
      virtual HRESULT __stdcall raw_GetRemoteExecutorInterface (
        /*[in]*/ long adapterIndex,
        /*[out,retval]*/ struct RExecutor * * val ) = 0;
      virtual HRESULT __stdcall raw_NewInteractiveArgs (
        /*[out,retval]*/ struct InteractiveArgs * * val ) = 0;
      virtual HRESULT __stdcall raw_NewEditArgs (
        /*[out,retval]*/ struct EditArgs * * val ) = 0;
      virtual HRESULT __stdcall raw_NewPropertyObject (
        /*[in]*/ enum PropertyValueTypes ValueType,
        /*[in]*/ VARIANT_BOOL asArray,
        /*[in]*/ BSTR typeNameParam,
        /*[in]*/ long options,
        /*[out,retval]*/ struct PropertyObject * * val ) = 0;
      virtual HRESULT __stdcall raw_RegisterUIMessageCallback (
        /*[in]*/ long callbackFuncAddr ) = 0;
      virtual HRESULT __stdcall raw_GetUIMessage (
        /*[out,retval]*/ struct UIMessage * * msg ) = 0;
      virtual HRESULT __stdcall raw_DisplayLoginDialog (
        /*[in]*/ BSTR dlgTitle,
        /*[in]*/ BSTR initialLoginName,
        /*[in]*/ BSTR initialPassword,
        /*[in]*/ VARIANT_BOOL modalToAppMainWind,
        /*[out]*/ struct User * * userObject,
        /*[out,retval]*/ VARIANT_BOOL * success ) = 0;
      virtual HRESULT __stdcall raw_DisplayEditUserDialog (
        /*[in]*/ BSTR dlgTitle,
        /*[in]*/ struct User * userObject,
        /*[in]*/ VARIANT_BOOL modalToAppMainWind,
        /*[out,retval]*/ VARIANT_BOOL * modified ) = 0;
      virtual HRESULT __stdcall raw_DisplayNewUserDialog (
        /*[in]*/ BSTR dlgTitle,
        /*[in]*/ VARIANT_BOOL modalToAppMainWind,
        /*[out]*/ struct User * * userObject,
        /*[out,retval]*/ VARIANT_BOOL * success ) = 0;
      virtual HRESULT __stdcall raw_DisplaySearchDirDialog (
        /*[in]*/ BSTR dlgTitle,
        /*[in]*/ VARIANT_BOOL readOnly,
        /*[in]*/ VARIANT_BOOL modalToAppMainWind,
        /*[out,retval]*/ VARIANT_BOOL * modified ) = 0;
      virtual HRESULT __stdcall raw_DisplayOptionsDialog (
        /*[in]*/ BSTR dlgTitle,
        /*[in]*/ VARIANT_BOOL readOnly,
        /*[in]*/ VARIANT_BOOL modalToAppMainWind,
        /*[out,retval]*/ VARIANT_BOOL * modified ) = 0;
      virtual HRESULT __stdcall raw_DisplayRunTimeErrorDialog (
        /*[in]*/ BSTR dlgTitle,
        /*[in]*/ BSTR errorMessage,
        /*[in]*/ VARIANT_BOOL inCleanupStepGroup,
        /*[in]*/ VARIANT_BOOL modalToAppMainWind,
        /*[out]*/ VARIANT_BOOL * displayOnNextError,
        /*[out]*/ VARIANT_BOOL * suspendExecution,
        /*[out]*/ enum RTEOptions * runTimeErrorAction ) = 0;
      virtual HRESULT __stdcall raw_DisplayOpenFileDialog (
        /*[in]*/ BSTR dlgTitle,
        /*[in]*/ BSTR okButtonText,
        /*[in]*/ BSTR initialPath,
        /*[in]*/ VARIANT_BOOL modalToAppMainWind,
        /*[out]*/ BSTR * selectedPath,
        /*[out]*/ BSTR * absolutePath,
        /*[in]*/ long openFileDialogFlags,
        /*[in]*/ BSTR defaultExtension,
        /*[in]*/ long win32Flags,
        /*[in]*/ BSTR fileFilter,
        /*[in]*/ VARIANT currentSequenceFile,
        /*[out,retval]*/ VARIANT_BOOL * fileWasSelected ) = 0;
      virtual HRESULT __stdcall raw_DisplayStepPropDialog (
        /*[in]*/ BSTR dlgTitle,
        /*[in]*/ struct Step * Step,
        /*[in]*/ VARIANT_BOOL readOnly,
        /*[in]*/ VARIANT_BOOL modalToAppMainWind,
        /*[in]*/ VARIANT_BOOL showViewContentsBtn,
        /*[out]*/ VARIANT_BOOL * viewContents,
        /*[out]*/ VARIANT_BOOL * modifiedStep,
        /*[out,retval]*/ VARIANT_BOOL * userHitOK ) = 0;
      virtual HRESULT __stdcall raw_DisplaySequencePropDialog (
        /*[in]*/ BSTR dlgTitle,
        /*[in]*/ struct Sequence * Sequence,
        /*[in]*/ VARIANT_BOOL readOnly,
        /*[in]*/ VARIANT_BOOL modalToAppMainWind,
        /*[in]*/ VARIANT_BOOL showViewContentsBtn,
        /*[out]*/ VARIANT_BOOL * viewContents,
        /*[out,retval]*/ VARIANT_BOOL * modifiedSeq ) = 0;
      virtual HRESULT __stdcall raw_DisplaySeqFilePropDialog (
        /*[in]*/ BSTR dlgTitle,
        /*[in]*/ struct SequenceFile * sequenceFileParam,
        /*[in]*/ VARIANT_BOOL readOnly,
        /*[in]*/ VARIANT_BOOL modalToAppMainWind,
        /*[in]*/ VARIANT_BOOL showViewContentsBtn,
        /*[out]*/ VARIANT_BOOL * viewContents,
        /*[out,retval]*/ VARIANT_BOOL * modifiedSeqFile ) = 0;
      virtual HRESULT __stdcall raw_DisplayPreconditionDialog (
        /*[in]*/ BSTR dlgTitle,
        /*[in]*/ struct Sequence * Sequence,
        /*[in]*/ VARIANT_BOOL readOnly,
        /*[in]*/ VARIANT_BOOL modalToAppMainWind,
        /*[in]*/ VARIANT initialStep,
        /*[out,retval]*/ VARIANT_BOOL * modifiedSeq ) = 0;
      virtual HRESULT __stdcall raw_DisplayBrowseExprDialog (
        /*[in]*/ BSTR dlgTitle,
        /*[in]*/ struct SequenceContext * sequenceContextParam,
        /*[in]*/ BSTR expressionIn,
        /*[in]*/ long selectionStartIn,
        /*[in]*/ long selectionEndIn,
        /*[in]*/ BSTR initialVariableName,
        /*[in]*/ VARIANT_BOOL usesCRLF,
        /*[in]*/ VARIANT_BOOL modalToAppMainWind,
        /*[out]*/ BSTR * expressionOut,
        /*[out]*/ long * selectionStartOut,
        /*[out]*/ long * selectionEndOut,
        /*[out,retval]*/ VARIANT_BOOL * pressedOK ) = 0;
      virtual HRESULT __stdcall raw_DisplayToolMenuDialog (
        /*[in]*/ BSTR dlgTitle,
        /*[in]*/ VARIANT_BOOL readOnly,
        /*[in]*/ VARIANT_BOOL modalToAppMainWind,
        /*[out,retval]*/ VARIANT_BOOL * modifiedMenu ) = 0;
      virtual HRESULT __stdcall raw_DisplayExternalViewerDialog (
        /*[in]*/ BSTR dlgTitle,
        /*[in]*/ VARIANT_BOOL readOnly,
        /*[in]*/ VARIANT_BOOL modalToAppMainWind,
        /*[out,retval]*/ VARIANT_BOOL * pressedOK ) = 0;
      virtual HRESULT __stdcall raw_DisplayAdapterConfigDialog (
        /*[in]*/ BSTR dlgTitle,
        /*[in]*/ VARIANT_BOOL adapterSelectorReadOnly,
        /*[in]*/ VARIANT_BOOL adapterCfgReadOnly,
        /*[in]*/ VARIANT_BOOL hideAdapterSelector,
        /*[in]*/ VARIANT_BOOL modalToAppMainWind,
        /*[out,retval]*/ VARIANT_BOOL * modifiedSettings ) = 0;
      virtual HRESULT __stdcall raw_DisplayLoopOnStepsDialog (
        /*[in]*/ BSTR dlgTitle,
        /*[in]*/ struct Step * selectedStep,
        /*[in]*/ VARIANT_BOOL modalToAppMainWnd,
        /*[out]*/ long * loopCountValue,
        /*[out]*/ BSTR * stopExpressionValue,
        /*[out,retval]*/ VARIANT_BOOL * userHitOK ) = 0;
      virtual HRESULT __stdcall raw_ConstructToolMenus (
        /*[in]*/ VARIANT editArgsParam,
        /*[out,retval]*/ long * numMenus ) = 0;
      virtual HRESULT __stdcall raw_GetNumToolMenus (
        /*[out,retval]*/ long * numMenus ) = 0;
      virtual HRESULT __stdcall raw_GetNumToolMenuItems (
        /*[in]*/ long menuIndex,
        /*[out,retval]*/ long * numItems ) = 0;
      virtual HRESULT __stdcall raw_GetToolMenuItemInfo (
        /*[in]*/ long menuIndex,
        /*[in]*/ long itemIndex,
        /*[out]*/ BSTR * itemText,
        /*[out]*/ long * subMenuIndex,
        /*[out]*/ VARIANT_BOOL * enabled,
        /*[out]*/ long * uniqueItemID ) = 0;
      virtual HRESULT __stdcall raw_GetToolMenuItemInfoWithID (
        /*[in]*/ long uniqueItemID,
        /*[out]*/ BSTR * itemText,
        /*[out]*/ long * subMenuIndex,
        /*[out]*/ VARIANT_BOOL * enabled ) = 0;
      virtual HRESULT __stdcall raw_InvokeToolMenuItem (
        /*[in]*/ long menuIndex,
        /*[in]*/ long itemIndex ) = 0;
      virtual HRESULT __stdcall raw_InvokeToolMenuItemWithID (
        /*[in]*/ long uniqueItemID ) = 0;
      virtual HRESULT __stdcall raw_EvalToolMenuItemExprs (
        /*[in]*/ VARIANT editArgsParam = vtMissing ) = 0;
      virtual HRESULT __stdcall raw_FindFile (
        /*[in]*/ BSTR fileToFind,
        /*[out]*/ BSTR * absolutePath,
        /*[out]*/ VARIANT_BOOL * userCancelled,
        /*[in]*/ enum FindFilePromptOptions promptOption,
        /*[in]*/ enum FindFileSearchListOptions srchListOption,
        /*[in]*/ VARIANT_BOOL isCommand,
        /*[in]*/ VARIANT currentSequenceFile,
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall raw_FindPath (
        /*[in]*/ BSTR pathToFind,
        /*[out]*/ BSTR * absolutePath,
        /*[out]*/ enum FindPathStatusValues * statusFlag,
        /*[in]*/ VARIANT currentSequenceFile,
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall raw_CreateTempFile (
        /*[in]*/ BSTR baseName,
        /*[in]*/ BSTR extension,
        /*[in]*/ BSTR directory,
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall raw_CheckExprSyntax (
        /*[in]*/ BSTR expressionStr,
        /*[out]*/ BSTR * errorDescription,
        /*[out]*/ long * startErrPos,
        /*[out]*/ long * endErrPos,
        /*[out,retval]*/ VARIANT_BOOL * syntaxIsOK ) = 0;
      virtual HRESULT __stdcall raw_GetErrorString (
        /*[in]*/ enum TSError errorCode,
        /*[out]*/ BSTR * errorString,
        /*[out,retval]*/ VARIANT_BOOL * found ) = 0;
      virtual HRESULT __stdcall raw_GetResourceString (
        /*[in]*/ BSTR section,
        /*[in]*/ BSTR symbol,
        /*[in]*/ VARIANT defaultString,
        /*[out]*/ VARIANT * found,
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall raw_LaunchExternalViewer (
        /*[in]*/ BSTR FilePath ) = 0;
      virtual HRESULT __stdcall raw_NotifyStartOfModalDialog (
        /*[out,retval]*/ long * modalID ) = 0;
      virtual HRESULT __stdcall raw_NotifyEndOfModalDialog (
        /*[in]*/ long modalID ) = 0;
      virtual HRESULT __stdcall raw_CommitGlobalsToDisk (
        /*[in]*/ VARIANT_BOOL promptOnSaveConflicts ) = 0;
      virtual HRESULT __stdcall raw_UnloadAllModules ( ) = 0;
      virtual HRESULT __stdcall raw_GetStationModelSequenceFile (
        /*[out]*/ BSTR * modelDescriptionString,
        /*[out,retval]*/ struct SequenceFile * * val ) = 0;
      virtual HRESULT __stdcall raw_ReloadGlobals ( ) = 0;
      virtual HRESULT __stdcall get_Globals (
        /*[out,retval]*/ struct PropertyObject * * val ) = 0;
      virtual HRESULT __stdcall get_CurrentUser (
        /*[out,retval]*/ struct User * * val ) = 0;
      virtual HRESULT __stdcall put_CurrentUser (
        /*[in]*/ struct User * val ) = 0;
      virtual HRESULT __stdcall get_ApplicationIsEditor (
        /*[out,retval]*/ VARIANT_BOOL * isEditor ) = 0;
      virtual HRESULT __stdcall put_ApplicationIsEditor (
        /*[in]*/ VARIANT_BOOL isEditor ) = 0;
      virtual HRESULT __stdcall get_AppMainHwnd (
        /*[out,retval]*/ long * hwnd ) = 0;
      virtual HRESULT __stdcall put_AppMainHwnd (
        /*[in]*/ long hwnd ) = 0;
      virtual HRESULT __stdcall get_NumAdapters (
        /*[out,retval]*/ long * NumAdapters ) = 0;
      virtual HRESULT __stdcall get_DefaultAdapter (
        /*[out,retval]*/ BSTR * adapterKeyNameVal ) = 0;
      virtual HRESULT __stdcall put_DefaultAdapter (
        /*[in]*/ BSTR adapterKeyNameVal ) = 0;
      virtual HRESULT __stdcall get_EnableUserPrivilegeChecking (
        /*[out,retval]*/ VARIANT_BOOL * enabled ) = 0;
      virtual HRESULT __stdcall put_EnableUserPrivilegeChecking (
        /*[in]*/ VARIANT_BOOL enabled ) = 0;
      virtual HRESULT __stdcall get_AutoLoginSystemUser (
        /*[out,retval]*/ VARIANT_BOOL * enabled ) = 0;
      virtual HRESULT __stdcall put_AutoLoginSystemUser (
        /*[in]*/ VARIANT_BOOL enabled ) = 0;
      virtual HRESULT __stdcall get_MajorVersion (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall get_MinorVersion (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall get_RevisionVersion (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall get_VersionString (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall get_EnableRemote (
        /*[out,retval]*/ VARIANT_BOOL * enabled ) = 0;
      virtual HRESULT __stdcall put_EnableRemote (
        /*[in]*/ VARIANT_BOOL enabled ) = 0;
      virtual HRESULT __stdcall get_ConfigDirectory (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall get_BinDirectory (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall get_TestStandDirectory (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall get_StepTypes (
        /*[out,retval]*/ struct PropertyObject * * val ) = 0;
      virtual HRESULT __stdcall get_CustomDataTypes (
        /*[out,retval]*/ struct PropertyObject * * val ) = 0;
      virtual HRESULT __stdcall get_BuiltinDataTypes (
        /*[out,retval]*/ struct PropertyObject * * val ) = 0;
      virtual HRESULT __stdcall get_TracingEnabled (
        /*[out,retval]*/ VARIANT_BOOL * isEnabled ) = 0;
      virtual HRESULT __stdcall put_TracingEnabled (
        /*[in]*/ VARIANT_BOOL isEnabled ) = 0;
      virtual HRESULT __stdcall get_BreakpointsEnabled (
        /*[out,retval]*/ VARIANT_BOOL * isEnabled ) = 0;
      virtual HRESULT __stdcall put_BreakpointsEnabled (
        /*[in]*/ VARIANT_BOOL isEnabled ) = 0;
      virtual HRESULT __stdcall get_DisableResults (
        /*[out,retval]*/ VARIANT_BOOL * isDisabled ) = 0;
      virtual HRESULT __stdcall put_DisableResults (
        /*[in]*/ VARIANT_BOOL isDisabled ) = 0;
      virtual HRESULT __stdcall get_AlwaysGotoCleanupOnFailure (
        /*[out,retval]*/ VARIANT_BOOL * isEnabled ) = 0;
      virtual HRESULT __stdcall put_AlwaysGotoCleanupOnFailure (
        /*[in]*/ VARIANT_BOOL isEnabled ) = 0;
      virtual HRESULT __stdcall get_BreakOnRTE (
        /*[out,retval]*/ VARIANT_BOOL * isEnabled ) = 0;
      virtual HRESULT __stdcall put_BreakOnRTE (
        /*[in]*/ VARIANT_BOOL isEnabled ) = 0;
      virtual HRESULT __stdcall get_ExecutionMask (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall put_ExecutionMask (
        /*[in]*/ long val ) = 0;
      virtual HRESULT __stdcall get_UIMessagePollingEnabled (
        /*[out,retval]*/ VARIANT_BOOL * isEnabled ) = 0;
      virtual HRESULT __stdcall put_UIMessagePollingEnabled (
        /*[in]*/ VARIANT_BOOL isEnabled ) = 0;
      virtual HRESULT __stdcall get_IsUIMessageQueueEmpty (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall get_UIMessageDelay (
        /*[out,retval]*/ long * millisecDelay ) = 0;
      virtual HRESULT __stdcall put_UIMessageDelay (
        /*[in]*/ long millisecDelay ) = 0;
      virtual HRESULT __stdcall get_UIMessageMinDelay (
        /*[out,retval]*/ long * millisecDelay ) = 0;
      virtual HRESULT __stdcall put_UIMessageMinDelay (
        /*[in]*/ long millisecDelay ) = 0;
      virtual HRESULT __stdcall put_IsRemote (
        /*[in]*/ VARIANT_BOOL isRemoteParam ) = 0;
      virtual HRESULT __stdcall get_IsRemote (
        /*[out,retval]*/ VARIANT_BOOL * isRemoteParam ) = 0;
      virtual HRESULT __stdcall raw_LocalizeExpression (
        /*[in]*/ BSTR expressionString,
        /*[in]*/ enum DecimalPointLocalizationOptions decimalPointOption,
        /*[out,retval]*/ BSTR * localizedExpressionString ) = 0;
      virtual HRESULT __stdcall raw_DelocalizeExpression (
        /*[in]*/ BSTR localizedExpressionString,
        /*[in]*/ enum DecimalPointLocalizationOptions decimalPointOption,
        /*[out,retval]*/ BSTR * delocalizedExpressionString ) = 0;
      virtual HRESULT __stdcall raw_GetLocalizedDecimalPoint (
        /*[in]*/ enum DecimalPointLocalizationOptions decimalPointOption,
        /*[out,retval]*/ BSTR * localizedDecimalPoint ) = 0;
      virtual HRESULT __stdcall raw_DisplayMessageBox (
        /*[in]*/ BSTR dlgTitle,
        /*[in]*/ BSTR messageText,
        /*[in]*/ enum MsgBoxTypes msgBoxType,
        /*[in]*/ long dlgOptions,
        /*[in]*/ long win32Flags,
        /*[out,retval]*/ long * userResponse ) = 0;
      virtual HRESULT __stdcall put_MasterEngine (
        /*[in]*/ IDispatch * MasterEngine ) = 0;
      virtual HRESULT __stdcall putref_MasterEngine (
        /*[in]*/ IDispatch * MasterEngine ) = 0;
      virtual HRESULT __stdcall get_MasterEngine (
        /*[out,retval]*/ IDispatch * * MasterEngine ) = 0;
      virtual HRESULT __stdcall raw_GetToolMenuItemInfoEx (
        /*[in]*/ long menuIndex,
        /*[in]*/ long itemIndex,
        /*[out]*/ BSTR * itemText,
        /*[out]*/ long * subMenuIndex,
        /*[out]*/ long * itemAttributes,
        /*[out]*/ long * uniqueItemID ) = 0;
      virtual HRESULT __stdcall raw_GetToolMenuItemInfoWithIDEx (
        /*[in]*/ long uniqueItemID,
        /*[out]*/ BSTR * itemText,
        /*[out]*/ long * subMenuIndex,
        /*[out]*/ long * itemAttributes ) = 0;
      virtual HRESULT __stdcall get_UseLocalizedDecimalPoint (
        /*[out,retval]*/ VARIANT_BOOL * enabled ) = 0;
      virtual HRESULT __stdcall put_UseLocalizedDecimalPoint (
        /*[in]*/ VARIANT_BOOL enabled ) = 0;
      virtual HRESULT __stdcall raw_NewPropertyObjectFile (
        /*[in]*/ enum PropertyObjectFileTypes FileType,
        /*[out,retval]*/ struct PropertyObjectFile * * val ) = 0;
      virtual HRESULT __stdcall get_GlobalsFile (
        /*[out,retval]*/ struct PropertyObjectFile * * val ) = 0;
      virtual HRESULT __stdcall get_UsersFile (
        /*[out,retval]*/ struct UsersFile * * val ) = 0;
      virtual HRESULT __stdcall get_ConfigFile (
        /*[out,retval]*/ struct PropertyObjectFile * * val ) = 0;
      virtual HRESULT __stdcall raw_NewStepType (
        /*[out,retval]*/ struct StepType * * val ) = 0;
      virtual HRESULT __stdcall get_SmallImageList (
        /*[out,retval]*/ long * imageListHandle ) = 0;
      virtual HRESULT __stdcall get_LargeImageList (
        /*[out,retval]*/ long * imageListHandle ) = 0;
      virtual HRESULT __stdcall raw_AddImage (
        /*[in]*/ IPictureDisp * image,
        /*[in]*/ BSTR imageName,
        /*[out,retval]*/ long * imageIndex ) = 0;
      virtual HRESULT __stdcall raw_GetSequenceFileEx (
        /*[in]*/ BSTR SequenceFilePath,
        /*[in]*/ long getSeqFileFlags,
        /*[in]*/ enum TypeConflictHandlerTypes handlerType,
        /*[out,retval]*/ struct SequenceFile * * val ) = 0;
      virtual HRESULT __stdcall raw_ShouldAutoLaunchExternalReportViewer (
        /*[in]*/ BSTR FilePath,
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall raw_CanCreateStep (
        /*[in]*/ BSTR adapterKeyNameVal,
        /*[in]*/ BSTR stepTypeName,
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall get_DefaultAdapterIndex (
        /*[out,retval]*/ long * index ) = 0;
      virtual HRESULT __stdcall put_DefaultAdapterIndex (
        /*[in]*/ long index ) = 0;
      virtual HRESULT __stdcall raw_DisplayEditPathsInFilesDialog (
        /*[in]*/ BSTR dlgTitle,
        /*[in]*/ long dlgOptions,
        /*[in]*/ VARIANT initialFile,
        /*[out,retval]*/ VARIANT_BOOL * modified ) = 0;
      virtual HRESULT __stdcall raw_DisplayRunTimeErrorDialogEx (
        /*[in]*/ BSTR dlgTitle,
        /*[in]*/ struct SequenceContext * sequenceContextParam,
        /*[in]*/ long dlgOptions,
        /*[out]*/ VARIANT_BOOL * suspendExecution,
        /*[out]*/ VARIANT_BOOL * dontShowAgainForExecution,
        /*[out]*/ VARIANT_BOOL * dontShowAgainForBatch,
        /*[out]*/ enum RTEOptions * runTimeErrorAction ) = 0;
      virtual HRESULT __stdcall raw_DisplayBrowseExprDialogEx (
        /*[in]*/ BSTR dlgTitle,
        /*[in]*/ struct PropertyObject * objectToBrowse,
        /*[in]*/ BSTR expressionIn,
        /*[in]*/ long selectionStartIn,
        /*[in]*/ long selectionEndIn,
        /*[in]*/ BSTR initialVariableName,
        /*[in]*/ long dlgOptions,
        /*[out]*/ BSTR * expressionOut,
        /*[out]*/ long * selectionStartOut,
        /*[out]*/ long * selectionEndOut,
        /*[out,retval]*/ VARIANT_BOOL * pressedOK ) = 0;
      virtual HRESULT __stdcall raw_DisplayBrowsePropertyObjectDialog (
        /*[in]*/ BSTR dlgTitle,
        /*[in]*/ struct PropertyObject * objectToBrowse,
        /*[in]*/ BSTR initialLocation,
        /*[in]*/ long dlgOptions ) = 0;
      virtual HRESULT __stdcall raw_SaveAllModifiedSeqFiles (
        /*[in]*/ long options,
        /*[out,retval]*/ VARIANT_BOOL * completed ) = 0;
      virtual HRESULT __stdcall raw_CallFrontEndCallbackEx (
        /*[in]*/ BSTR sequenceNameParam,
        /*[in]*/ struct PropertyObject * argumentList,
        /*[in]*/ enum TypeConflictHandlerTypes handlerType,
        /*[in]*/ long reservedParam,
        /*[out,retval]*/ struct Execution * * exeHandleObj ) = 0;
      virtual HRESULT __stdcall raw_DisplaySequenceFileCallbacksDialog (
        /*[in]*/ BSTR dlgTitle,
        /*[in]*/ struct SequenceFile * sequenceFileParam,
        /*[in]*/ long dlgOptions,
        /*[out]*/ BSTR * sequenceToEdit,
        /*[out]*/ long * numCallbacksAdded,
        /*[out]*/ long * numCallbacksDeleted,
        /*[out,retval]*/ VARIANT_BOOL * modifiedSeqFile ) = 0;
      virtual HRESULT __stdcall raw_GetProductRegistrationInfo (
        /*[out]*/ BSTR * userName,
        /*[out]*/ BSTR * companyName,
        /*[out]*/ BSTR * serialNumber,
        /*[out,retval]*/ VARIANT_BOOL * isValidInfo ) = 0;
      virtual HRESULT __stdcall raw_SetProductRegistrationInfo (
        /*[in]*/ BSTR userName,
        /*[in]*/ BSTR companyName,
        /*[in]*/ BSTR serialNumber,
        /*[out,retval]*/ VARIANT_BOOL * isValidInfo ) = 0;
      virtual HRESULT __stdcall raw_ReleaseSequenceFileEx (
        /*[in]*/ struct SequenceFile * sequenceFileToRelease,
        /*[in]*/ long options,
        /*[out,retval]*/ VARIANT_BOOL * unloaded ) = 0;
      virtual HRESULT __stdcall get_CurrentWorkspaceFile (
        /*[out,retval]*/ struct WorkspaceFile * * val ) = 0;
      virtual HRESULT __stdcall put_CurrentWorkspaceFile (
        /*[in]*/ struct WorkspaceFile * val ) = 0;
      virtual HRESULT __stdcall putref_CurrentWorkspaceFile (
        /*[in]*/ struct WorkspaceFile * val ) = 0;
      virtual HRESULT __stdcall get_SecondsSinceStart (
        /*[out,retval]*/ double * secondsReturnValue ) = 0;
      virtual HRESULT __stdcall raw_RegisterModalWindow (
        /*[in]*/ struct SequenceContext * sequenceContextParam,
        /*[in]*/ long modalHWND,
        /*[out]*/ VARIANT_BOOL * shouldAbort,
        /*[out,retval]*/ long * modalID ) = 0;
      virtual HRESULT __stdcall raw_UnregisterModalWindow (
        /*[in]*/ long modalID ) = 0;
      virtual HRESULT __stdcall raw_DisplayFileDialog (
        /*[in]*/ BSTR dlgTitle,
        /*[in]*/ BSTR okButtonText,
        /*[in]*/ BSTR initialPath,
        /*[out]*/ SAFEARRAY * * selectedPaths,
        /*[out]*/ SAFEARRAY * * absolutePaths,
        /*[in]*/ long openFileDialogFlags,
        /*[in]*/ BSTR defaultExtension,
        /*[in]*/ long win32Flags,
        /*[in]*/ BSTR fileFilter,
        /*[in]*/ VARIANT currentFile,
        /*[in,out]*/ VARIANT * fileFilterIndex,
        /*[in,out]*/ VARIANT * dirHistoryList,
        /*[out,retval]*/ VARIANT_BOOL * fileWasSelected ) = 0;
      virtual HRESULT __stdcall raw_SerializeObjects (
        /*[in]*/ SAFEARRAY * objects,
        /*[in]*/ long options,
        /*[out,retval]*/ BSTR * stream ) = 0;
      virtual HRESULT __stdcall raw_UnserializeObjects (
        /*[in]*/ BSTR stream,
        /*[in]*/ long reservedParam,
        /*[in]*/ enum TypeConflictHandlerTypes handlerType,
        /*[out,retval]*/ SAFEARRAY * * objects ) = 0;
      virtual HRESULT __stdcall get_CheckOutFilesWhenEdited (
        /*[out,retval]*/ VARIANT_BOOL * checkOutFiles ) = 0;
      virtual HRESULT __stdcall put_CheckOutFilesWhenEdited (
        /*[in]*/ VARIANT_BOOL checkOutFiles ) = 0;
      virtual HRESULT __stdcall get_CheckOutOnlySelectedFiles (
        /*[out,retval]*/ VARIANT_BOOL * onlySelectedFiles ) = 0;
      virtual HRESULT __stdcall put_CheckOutOnlySelectedFiles (
        /*[in]*/ VARIANT_BOOL onlySelectedFiles ) = 0;
      virtual HRESULT __stdcall get_LastWorkspacePath (
        /*[out,retval]*/ BSTR * pathString ) = 0;
      virtual HRESULT __stdcall put_LastWorkspacePath (
        /*[in]*/ BSTR pathString ) = 0;
      virtual HRESULT __stdcall get_PromptWhenAddingFilesToSC (
        /*[out,retval]*/ VARIANT_BOOL * promptAddFile ) = 0;
      virtual HRESULT __stdcall put_PromptWhenAddingFilesToSC (
        /*[in]*/ VARIANT_BOOL promptAddFile ) = 0;
      virtual HRESULT __stdcall get_ReloadDocsWhenOpeningWorkspace (
        /*[out,retval]*/ VARIANT_BOOL * reloadDocs ) = 0;
      virtual HRESULT __stdcall put_ReloadDocsWhenOpeningWorkspace (
        /*[in]*/ VARIANT_BOOL reloadDocs ) = 0;
      virtual HRESULT __stdcall get_ReloadWorkspaceAtStartup (
        /*[out,retval]*/ VARIANT_BOOL * reloadWorkspace ) = 0;
      virtual HRESULT __stdcall put_ReloadWorkspaceAtStartup (
        /*[in]*/ VARIANT_BOOL reloadWorkspace ) = 0;
      virtual HRESULT __stdcall get_UseDialogForCheckOut (
        /*[out,retval]*/ VARIANT_BOOL * useDialog ) = 0;
      virtual HRESULT __stdcall put_UseDialogForCheckOut (
        /*[in]*/ VARIANT_BOOL useDialog ) = 0;
      virtual HRESULT __stdcall raw_DisplayWorkspaceBrowserDialog (
        /*[in]*/ BSTR dlgTitle,
        /*[in]*/ long dlgOptions ) = 0;
      virtual HRESULT __stdcall raw_GetTypeUsageLocations (
        /*[in]*/ BSTR typeNameParam,
        /*[out,retval]*/ SAFEARRAY * * files ) = 0;
      virtual HRESULT __stdcall raw_ResetTypeInstances (
        /*[in]*/ struct PropertyObject * typeParam,
        /*[in]*/ long resetTypeInstancesOptions,
        /*[out,retval]*/ VARIANT_BOOL * modifiedInstances ) = 0;
      virtual HRESULT __stdcall get_ShowHiddenProperties (
        /*[out,retval]*/ VARIANT_BOOL * show ) = 0;
      virtual HRESULT __stdcall put_ShowHiddenProperties (
        /*[in]*/ VARIANT_BOOL show ) = 0;
      virtual HRESULT __stdcall raw_GetTypeDefinition (
        /*[in]*/ BSTR typeNameParam,
        /*[out,retval]*/ struct PropertyObject * * typeParam ) = 0;
      virtual HRESULT __stdcall raw_GetTypeNames (
        /*[out,retval]*/ SAFEARRAY * * typeNames ) = 0;
      virtual HRESULT __stdcall raw_NewDataType (
        /*[in]*/ enum PropertyValueTypes ValueType,
        /*[in]*/ VARIANT_BOOL asArray,
        /*[in]*/ BSTR typeNameParam,
        /*[in]*/ long options,
        /*[out,retval]*/ struct PropertyObject * * val ) = 0;
      virtual HRESULT __stdcall raw_GetInsertStepMenuStructure (
        /*[in]*/ struct PropertyObjectFile * SelectedFile,
        /*[in]*/ long hiddenFlags,
        /*[out,retval]*/ struct PropertyObject * * menuStructure ) = 0;
      virtual HRESULT __stdcall raw_DisplayStepTypeMenuEditor (
        /*[in]*/ BSTR dlgTitle,
        /*[in]*/ VARIANT_BOOL forSubsteps,
        /*[in]*/ long dlgOptions,
        /*[out,retval]*/ VARIANT_BOOL * modifiedMenu ) = 0;
      virtual HRESULT __stdcall raw_LoadTypePaletteFiles ( ) = 0;
      virtual HRESULT __stdcall raw_UnloadTypePaletteFiles ( ) = 0;
      virtual HRESULT __stdcall raw_GetTypePaletteFileList (
        /*[out,retval]*/ SAFEARRAY * * typePaletteFiles ) = 0;
      virtual HRESULT __stdcall raw_SetTypePaletteFileList (
        /*[in]*/ SAFEARRAY * typePaletteFiles ) = 0;
      virtual HRESULT __stdcall get_ComputerName (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall get_UniqueEngineId (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall raw_GetToolMenuStructure (
        /*[out,retval]*/ struct PropertyObject * * menuStructure ) = 0;
      virtual HRESULT __stdcall raw_GetResourceSymbols (
        /*[in]*/ BSTR section,
        /*[out,retval]*/ SAFEARRAY * * symbols ) = 0;
      virtual HRESULT __stdcall get_CVIAdapter_ExternalCVIPrj (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_CVIAdapter_ExternalCVIPrj (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_CVIAdapter_ExecuteStepsInCVI (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_CVIAdapter_ExecuteStepsInCVI (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall raw_CheckExpression (
        /*[in]*/ struct PropertyObject * evaluationContext,
        /*[in]*/ BSTR expressionStr,
        /*[in]*/ long EvaluationOptions,
        /*[out]*/ BSTR * errorDescription,
        /*[out]*/ long * startErrPos,
        /*[out]*/ long * endErrPos,
        /*[out,retval]*/ VARIANT_BOOL * isOK ) = 0;
      virtual HRESULT __stdcall get_RequireUserLogin (
        /*[out,retval]*/ VARIANT_BOOL * requireUser ) = 0;
      virtual HRESULT __stdcall put_RequireUserLogin (
        /*[in]*/ VARIANT_BOOL requireUser ) = 0;
      virtual HRESULT __stdcall get_FileDialogDirHistoryList (
        /*[out,retval]*/ SAFEARRAY * * directories ) = 0;
      virtual HRESULT __stdcall put_FileDialogDirHistoryList (
        /*[in]*/ SAFEARRAY * directories ) = 0;
      virtual HRESULT __stdcall get_StationID (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_StationID (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall raw_NewEditContext (
        /*[in]*/ struct PropertyObject * obj,
        /*[in]*/ VARIANT editArgsParam,
        /*[out]*/ VARIANT * locationString,
        /*[out,retval]*/ struct SequenceContext * * newContext ) = 0;
      virtual HRESULT __stdcall raw_GetImageName (
        /*[in]*/ long imageIndex,
        /*[out,retval]*/ BSTR * imageName ) = 0;
      virtual HRESULT __stdcall raw_GetImageIndex (
        /*[in]*/ BSTR imageName,
        /*[out,retval]*/ long * imageIndex ) = 0;
      virtual HRESULT __stdcall get_NumImages (
        /*[out,retval]*/ long * NumImages ) = 0;
      virtual HRESULT __stdcall get_SeqFileVersionAutoIncrementOpt (
        /*[out,retval]*/ enum FileVersionAutoIncrement * option ) = 0;
      virtual HRESULT __stdcall put_SeqFileVersionAutoIncrementOpt (
        /*[in]*/ enum FileVersionAutoIncrement option ) = 0;
      virtual HRESULT __stdcall raw_CopyPropertyObject (
        /*[in]*/ struct PropertyObject * srcObj,
        /*[out,retval]*/ struct PropertyObject * * val ) = 0;
      virtual HRESULT __stdcall get_TemporaryGlobals (
        /*[out,retval]*/ struct PropertyObject * * val ) = 0;
      virtual HRESULT __stdcall raw_GetSyncManager (
        /*[in]*/ BSTR syncObjectName,
        /*[out,retval]*/ IUnknown * * val ) = 0;
      virtual HRESULT __stdcall get_RTEOption (
        /*[out,retval]*/ enum RTEOptions * option ) = 0;
      virtual HRESULT __stdcall put_RTEOption (
        /*[in]*/ enum RTEOptions option ) = 0;
      virtual HRESULT __stdcall raw_NewHierarchicalExecution (
        /*[in]*/ SAFEARRAY * sequenceCallSteps,
        /*[in]*/ long HierarchicalExecutionFlags,
        /*[in]*/ struct SequenceFile * sequenceFileParam,
        /*[in]*/ BSTR sequenceNameParam,
        /*[in]*/ struct SequenceFile * processModelParam,
        /*[in]*/ VARIANT_BOOL breakAtFirstStep,
        /*[in]*/ long executionTypeMaskParam,
        /*[in]*/ VARIANT sequenceArgsParam,
        /*[in]*/ VARIANT editArgsParam,
        /*[in]*/ VARIANT InteractiveArgsParam,
        /*[out,retval]*/ struct Execution * * val ) = 0;
      virtual HRESULT __stdcall get_SecondsSince1970UniversalCoordinatedTime (
        /*[out,retval]*/ double * secondsReturnValue ) = 0;
      virtual HRESULT __stdcall raw_DisplayEditNumericFormatDialog (
        /*[in]*/ BSTR dlgTitle,
        /*[in,out]*/ BSTR * NumericFormat,
        /*[in]*/ long dlgOptions,
        /*[in]*/ double sampleNumber,
        /*[out,retval]*/ VARIANT_BOOL * pressedOK ) = 0;
      virtual HRESULT __stdcall raw_GetInsertVariableMenuStructure (
        /*[in]*/ struct PropertyObjectFile * SelectedFile,
        /*[in]*/ long hiddenFlags,
        /*[out,retval]*/ struct PropertyObject * * menuStructure ) = 0;
      virtual HRESULT __stdcall raw_IsCurrentSequenceFileVersion (
        /*[in]*/ BSTR FilePath,
        /*[out,retval]*/ long * nResult ) = 0;
      virtual HRESULT __stdcall get_StationModelSequenceFilePath (
        /*[out,retval]*/ BSTR * ModelPath ) = 0;
      virtual HRESULT __stdcall put_StationModelSequenceFilePath (
        /*[in]*/ BSTR ModelPath ) = 0;
      virtual HRESULT __stdcall raw_NotifyStartOfModalDialogEx (
        /*[in]*/ struct SequenceContext * sequenceContextParam,
        /*[out]*/ VARIANT_BOOL * shouldAbort,
        /*[out,retval]*/ long * modalID ) = 0;
      virtual HRESULT __stdcall raw_GetInternalOption (
        /*[in]*/ enum InternalOptions option,
        /*[out,retval]*/ VARIANT * val ) = 0;
      virtual HRESULT __stdcall raw_SetInternalOption (
        /*[in]*/ enum InternalOptions option,
        /*[in]*/ VARIANT newValue ) = 0;
      virtual HRESULT __stdcall raw_DisplayHelpTopic (
        /*[in]*/ long tagID,
        /*[in]*/ BSTR helpFile,
        /*[in]*/ BSTR tableOfContentsFile,
        /*[in]*/ BSTR indexFile,
        /*[in]*/ BSTR homeFile,
        /*[in]*/ BSTR windowCaption,
        /*[out,retval]*/ long * hwnd ) = 0;
      virtual HRESULT __stdcall raw_DisplayBreakpointDialog (
        /*[in]*/ BSTR dlgTitle,
        /*[in]*/ struct SequenceContext * sequenceContextParam,
        /*[in]*/ struct Execution * executionParam,
        /*[in]*/ struct Step * selectedStep,
        /*[in]*/ enum StepGroups stepGroupParam,
        /*[in]*/ long dlgOptions,
        /*[out,retval]*/ VARIANT_BOOL * userHitOK ) = 0;
      virtual HRESULT __stdcall raw_SearchFiles (
        /*[in]*/ BSTR searchString,
        /*[in]*/ long SearchOptions,
        /*[in]*/ long filterOptions,
        /*[in]*/ long elementsToSearch,
        /*[in]*/ SAFEARRAY * limitToAdapters,
        /*[in]*/ SAFEARRAY * limitToNamedProps,
        /*[in]*/ SAFEARRAY * limitToPropsOfNamedTypes,
        /*[in]*/ SAFEARRAY * openFilesToSearch,
        /*[in]*/ SAFEARRAY * directoriesAndFilePaths,
        /*[out,retval]*/ struct SearchResults * * val ) = 0;
      virtual HRESULT __stdcall raw_GetWatchExpressionsChangeCount (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall raw_GetWatchExpressions (
        /*[in]*/ struct SequenceFile * clientSequenceFileParam,
        /*[in]*/ struct SequenceContext * scopingSeqContext,
        /*[in]*/ long filterOptions,
        /*[out,retval]*/ struct WatchExpressions * * WatchExpressions ) = 0;
      virtual HRESULT __stdcall raw_SetLocationForNextDialog (
        /*[in]*/ BSTR locationLookupString,
        /*[in]*/ long elementAtLocation,
        /*[in]*/ long selectionStart,
        /*[in]*/ long selectionLength ) = 0;
      virtual HRESULT __stdcall raw_DisplayHelpFile (
        /*[in]*/ BSTR htmlFile,
        /*[in]*/ BSTR helpFile,
        /*[in]*/ BSTR tableOfContentsFile,
        /*[in]*/ BSTR indexFile,
        /*[in]*/ BSTR homeFile,
        /*[in]*/ BSTR windowCaption,
        /*[out,retval]*/ long * hwnd ) = 0;
      virtual HRESULT __stdcall raw_DisplayEditBreakAndWatchDialog (
        /*[in]*/ BSTR dlgTitle,
        /*[in]*/ long dlgOptions,
        /*[out]*/ VARIANT * selectedItemParam ) = 0;
      virtual HRESULT __stdcall raw_DisplayExpressionEditOptionsDialog (
        /*[in]*/ BSTR dlgTitle,
        /*[in]*/ long dlgOptions,
        /*[out,retval]*/ VARIANT_BOOL * pressedOK ) = 0;
      virtual HRESULT __stdcall get_SearchDirectories (
        /*[out,retval]*/ struct SearchDirectories * * SearchDirectories ) = 0;
      virtual HRESULT __stdcall raw_LoadTypePaletteFilesEx (
        /*[in]*/ enum TypeConflictHandlerTypes handlerType,
        /*[in]*/ long options ) = 0;
      virtual HRESULT __stdcall raw_RegisterUIMessage (
        /*[in]*/ BSTR messageName,
        /*[out,retval]*/ long * MsgCode ) = 0;
      virtual HRESULT __stdcall get_ExternalReportViewers (
        /*[out,retval]*/ struct ExternalReportViewers * * ExternalReportViewers ) = 0;
      virtual HRESULT __stdcall raw_NewWorkspaceFile (
        /*[out,retval]*/ struct WorkspaceFile * * val ) = 0;
      virtual HRESULT __stdcall raw_OpenWorkspaceFile (
        /*[in]*/ BSTR workspaceFilePath,
        /*[in]*/ long options,
        /*[in]*/ enum TypeConflictHandlerTypes handlerType,
        /*[out,retval]*/ struct WorkspaceFile * * val ) = 0;
      virtual HRESULT __stdcall raw_ReloadStringResourceFiles ( ) = 0;
      virtual HRESULT __stdcall raw_GetAdapterByKeyName (
        /*[in]*/ BSTR AdapterKeyName,
        /*[out,retval]*/ struct Adapter * * val ) = 0;
      virtual HRESULT __stdcall raw_PostUIMessage (
        /*[in]*/ struct Execution * executionParam,
        /*[in]*/ struct Thread * threadParam,
        /*[in]*/ enum UIMessageCodes eventCode,
        /*[in]*/ double numericDataParam,
        /*[in]*/ BSTR stringDataParam,
        /*[in]*/ IUnknown * activeXDataParam,
        /*[in]*/ VARIANT_BOOL synchronous ) = 0;
      virtual HRESULT __stdcall raw_DisplayBrowseExprDialogFromControl (
        /*[in]*/ IUnknown * expressionEdit,
        /*[in]*/ BSTR dlgTitle,
        /*[in]*/ long selectionStart,
        /*[in]*/ long selectionEnd,
        /*[in]*/ BSTR initVarName,
        /*[in]*/ long dlgOptions,
        /*[out]*/ VARIANT_BOOL * contextChanged,
        /*[out,retval]*/ VARIANT_BOOL * pressedOK ) = 0;
      virtual HRESULT __stdcall raw_NewExpression (
        /*[out,retval]*/ struct Expression * * val ) = 0;
      virtual HRESULT __stdcall get_StationOptions (
        /*[out,retval]*/ struct StationOptions * * StationOptions ) = 0;
      virtual HRESULT __stdcall raw_DisplayStepTypeMenuEditorEx (
        /*[in]*/ BSTR dlgTitle,
        /*[in]*/ struct PropertyObjectFile * SelectedFile,
        /*[in]*/ VARIANT_BOOL forSubsteps,
        /*[in]*/ long dlgOptions,
        /*[out,retval]*/ VARIANT_BOOL * modifiedMenu ) = 0;
      virtual HRESULT __stdcall raw_NewTypeUsageList (
        /*[in]*/ long reservedParam,
        /*[out,retval]*/ struct TypeUsageList * * val ) = 0;
      virtual HRESULT __stdcall raw_UnserializeObjectsAndTypes (
        /*[in]*/ BSTR stream,
        /*[out]*/ struct TypeUsageList * * typesUsed,
        /*[in]*/ long reservedParam,
        /*[in]*/ enum TypeConflictHandlerTypes handlerType,
        /*[out,retval]*/ SAFEARRAY * * objects ) = 0;
      virtual HRESULT __stdcall get_Images (
        /*[out,retval]*/ struct Images * * val ) = 0;
      virtual HRESULT __stdcall raw_GetEditTimeToolMenuItems (
        /*[in]*/ long reserved,
        /*[out,retval]*/ struct EditTimeMenuItems * * EditTimeMenuItems ) = 0;
      virtual HRESULT __stdcall raw_GetRunTimeToolMenuItems (
        /*[in]*/ VARIANT editArgsParam,
        /*[in]*/ long reserved,
        /*[out,retval]*/ struct RunTimeMenuItems * * RunTimeMenuItems ) = 0;
      virtual HRESULT __stdcall get_WatchExpressionsEnabled (
        /*[out,retval]*/ VARIANT_BOOL * enable ) = 0;
      virtual HRESULT __stdcall put_WatchExpressionsEnabled (
        /*[in]*/ VARIANT_BOOL enable ) = 0;
      virtual HRESULT __stdcall raw_WriteToolMenuToDisk (
        /*[in]*/ long reserved ) = 0;
      virtual HRESULT __stdcall raw_CreateNewUniqueStepIds (
        /*[in]*/ SAFEARRAY * steps ) = 0;
      virtual HRESULT __stdcall get_LicenseType (
        /*[out,retval]*/ enum LicenseTypes * val ) = 0;
      virtual HRESULT __stdcall get_PersistBreakpoints (
        /*[out,retval]*/ VARIANT_BOOL * returnVal ) = 0;
      virtual HRESULT __stdcall put_PersistBreakpoints (
        /*[in]*/ VARIANT_BOOL returnVal ) = 0;
      virtual HRESULT __stdcall get_PersistWatchExpressions (
        /*[out,retval]*/ VARIANT_BOOL * returnVal ) = 0;
      virtual HRESULT __stdcall put_PersistWatchExpressions (
        /*[in]*/ VARIANT_BOOL returnVal ) = 0;
      virtual HRESULT __stdcall raw_GetLicenseDescription (
        /*[in]*/ long reserved,
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall raw_GetLocationForNextDialog (
        /*[out]*/ BSTR * locationLookupString,
        /*[out]*/ long * elementAtLocation,
        /*[out]*/ long * selectionStart,
        /*[out]*/ long * selectionLength,
        /*[in]*/ VARIANT_BOOL clearLoc ) = 0;
      virtual HRESULT __stdcall raw_SetConfigDirectory (
        /*[in]*/ BSTR Path,
        /*[in]*/ VARIANT_BOOL CopyFilesOnEngineShutdown ) = 0;
      virtual HRESULT __stdcall raw_DisplayLockUnlockDialog (
        /*[in]*/ BSTR dlgTitle,
        /*[in]*/ BSTR dlgMsg,
        /*[in]*/ struct PropertyObject * propObject,
        /*[in]*/ long options,
        /*[in,out]*/ VARIANT * passwordString,
        /*[out,retval]*/ VARIANT_BOOL * userHitOK ) = 0;
      virtual HRESULT __stdcall raw_GetUserGroup (
        /*[in]*/ BSTR userGroupName,
        /*[out,retval]*/ struct User * * val ) = 0;
      virtual HRESULT __stdcall get_PersistConfigFile (
        /*[out,retval]*/ VARIANT_BOOL * returnVal ) = 0;
      virtual HRESULT __stdcall put_PersistConfigFile (
        /*[in]*/ VARIANT_BOOL returnVal ) = 0;
      virtual HRESULT __stdcall raw_DiffSequenceFiles (
        /*[in]*/ struct SequenceFile * sequenceFile1Param,
        /*[in]*/ struct SequenceFile * sequenceFile2Param,
        /*[in]*/ long options,
        /*[out,retval]*/ struct SequenceFileDiffer * * returnVal ) = 0;
      virtual HRESULT __stdcall raw_NewLocations (
        /*[out,retval]*/ struct Locations * * returnVal ) = 0;
      virtual HRESULT __stdcall raw_NewUndoItemCreator (
        /*[in]*/ enum EditKinds kindParam,
        /*[in]*/ struct PropertyObjectFile * editedFileParam,
        /*[in]*/ BSTR editDescription,
        /*[out,retval]*/ struct UndoItemCreator * * val ) = 0;
      virtual HRESULT __stdcall raw_GetOutputMessages (
        /*[out,retval]*/ struct OutputMessages * * val ) = 0;
      virtual HRESULT __stdcall raw_NewOutputMessage (
        /*[in]*/ BSTR messageText,
        /*[in]*/ BSTR categoryText,
        /*[in]*/ enum OutputMessageSeverityTypes Severity,
        /*[in]*/ struct SequenceContext * SequenceContext,
        /*[out,retval]*/ struct OutputMessage * * val ) = 0;
      virtual HRESULT __stdcall get_OutputMessagesEnabled (
        /*[out,retval]*/ VARIANT_BOOL * enable ) = 0;
      virtual HRESULT __stdcall put_OutputMessagesEnabled (
        /*[in]*/ VARIANT_BOOL enable ) = 0;
      virtual HRESULT __stdcall raw_NewOutputMessages (
        /*[out,retval]*/ struct OutputMessages * * OutputMessages ) = 0;
      virtual HRESULT __stdcall raw_NewUndoStack (
        /*[out,retval]*/ struct UndoStack * * val ) = 0;
      virtual HRESULT __stdcall raw_ParseLookupString (
        /*[in]*/ BSTR lookupString,
        /*[in]*/ long options,
        /*[out,retval]*/ SAFEARRAY * * val ) = 0;
      virtual HRESULT __stdcall raw_DisplaySaveOverOldFormatDialog (
        /*[in]*/ BSTR Path,
        /*[in,out]*/ enum PerformActionOptions * promptForOverwriteOption,
        /*[in]*/ BSTR dlgTitle,
        /*[in]*/ long dlgOptions,
        /*[out,retval]*/ enum PromptResults * result ) = 0;
      virtual HRESULT __stdcall raw_DisplayPreconditionBuilderDialog (
        /*[in]*/ BSTR dlgTitle,
        /*[in,out]*/ BSTR * preconditionExpr,
        /*[in]*/ struct Sequence * Sequence,
        /*[in]*/ long dlgOptions,
        /*[in]*/ struct SequenceContext * SequenceContext,
        /*[out,retval]*/ VARIANT_BOOL * pressedOK ) = 0;
      virtual HRESULT __stdcall raw_DisplayConfigureTypePalettesDialog (
        /*[in]*/ BSTR dlgTitle,
        /*[in]*/ long dlgOptions,
        /*[out,retval]*/ VARIANT_BOOL * modified ) = 0;
      virtual HRESULT __stdcall raw_NewEvaluationTypes (
        /*[in]*/ long initialPropertyValueTypes,
        /*[out,retval]*/ struct EvaluationTypes * * val ) = 0;
      virtual HRESULT __stdcall raw_DisplayEditNumericFormatDialogEx (
        /*[in]*/ BSTR dlgTitle,
        /*[in,out]*/ BSTR * NumericFormat,
        /*[out]*/ VARIANT_BOOL * validFormat,
        /*[in]*/ long dlgOptions,
        /*[in]*/ double sampleNumber,
        /*[out,retval]*/ VARIANT_BOOL * pressedOK ) = 0;
      virtual HRESULT __stdcall raw_GetFileInformation (
        /*[in]*/ BSTR Path,
        /*[out,retval]*/ struct FileInformation * * currentFileInformation ) = 0;
      virtual HRESULT __stdcall raw_DisplaySaveAsPreviousOverExistingFileDialog (
        /*[in]*/ BSTR Path,
        /*[in]*/ BSTR dlgTitle,
        /*[out,retval]*/ enum PromptResults * result ) = 0;
      virtual HRESULT __stdcall raw_GetTemplatesFile (
        /*[in]*/ long options,
        /*[out,retval]*/ struct PropertyObjectFile * * val ) = 0;
      virtual HRESULT __stdcall raw_AcquireLicense (
        /*[in]*/ enum ApplicationLicenses license,
        /*[in]*/ long options,
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall raw_ReleaseLicense (
        /*[in]*/ long licenseHandle,
        /*[in]*/ long reserved ) = 0;
      virtual HRESULT __stdcall get_ApplicationLicense (
        /*[out,retval]*/ enum ApplicationLicenses * returnVal ) = 0;
      virtual HRESULT __stdcall get_UndoLimit (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall put_UndoLimit (
        /*[in]*/ long val ) = 0;
      virtual HRESULT __stdcall raw_GetTestStandPath (
        /*[in]*/ enum TestStandPaths testStandPath,
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall get_Utility (
        /*[out,retval]*/ struct Utility * * val ) = 0;
};

struct __declspec(uuid("b2794ef9-c0b6-11d0-939c-0020af68e893"))
SequenceFile : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetSequenceFileType,put=PutSequenceFileType))
    enum SequenceFileTypes SequenceFileType;
    __declspec(property(get=GetNumSequences))
    long NumSequences;
    __declspec(property(get=GetFileGlobalsDefaultValues))
    PropertyObjectPtr FileGlobalsDefaultValues;
    __declspec(property(get=GetPath,put=PutPath))
    _bstr_t Path;
    __declspec(property(get=GetModuleLoadOption,put=PutModuleLoadOption))
    enum ModuleLoadOptions ModuleLoadOption;
    __declspec(property(get=GetModuleUnloadOption,put=PutModuleUnloadOption))
    enum ModuleUnloadOptions ModuleUnloadOption;
    __declspec(property(get=GetHasModel))
    VARIANT_BOOL HasModel;
    __declspec(property(get=GetUnloadCallbackEnabled,put=PutUnloadCallbackEnabled))
    VARIANT_BOOL UnloadCallbackEnabled;
    __declspec(property(get=GetIsExecuting))
    VARIANT_BOOL IsExecuting;
    __declspec(property(get=GetChangeCount))
    long ChangeCount;
    __declspec(property(get=GetCanUnload))
    VARIANT_BOOL CanUnload;
    __declspec(property(get=GetId))
    long Id;
    __declspec(property(get=GetModelOption,put=PutModelOption))
    enum ModelOptions ModelOption;
    __declspec(property(get=GetModelPath,put=PutModelPath))
    _bstr_t ModelPath;
    __declspec(property(get=GetBatchSyncOption,put=PutBatchSyncOption))
    enum SeqFileBatchSynchronizationOptions BatchSyncOption;

    //
    // Wrapper methods for error-handling
    //

    SequencePtr GetSequence (
        long index );
    SequencePtr GetSequenceByName (
        _bstr_t sequenceNameParam );
    VARIANT_BOOL SequenceNameExists (
        _bstr_t sequenceNameParam );
    HRESULT InsertSequence (
        struct Sequence * sequenceToInsert );
    SequencePtr RemoveSequence (
        long index );
    HRESULT DeleteSequence (
        long index );
    HRESULT Save (
        _bstr_t pathString );
    SequenceFilePtr GetModelSequenceFile (
        BSTR * modelDescriptionString );
    SequencePtr CreateCallbackOverrideSequence (
        _bstr_t callbackName,
        VARIANT_BOOL allowCopyDefaultSteps );
    SequenceContextPtr NewEditContext ( );
    HRESULT IncChangeCount ( );
    long GetSequenceIndex (
        _bstr_t sequenceNameParam );
    PropertyObjectPtr AsPropertyObject ( );
    long GetNumSequences ( );
    PropertyObjectPtr GetFileGlobalsDefaultValues ( );
    _bstr_t GetPath ( );
    void PutPath (
        _bstr_t val );
    enum ModuleLoadOptions GetModuleLoadOption ( );
    void PutModuleLoadOption (
        enum ModuleLoadOptions val );
    enum ModuleUnloadOptions GetModuleUnloadOption ( );
    void PutModuleUnloadOption (
        enum ModuleUnloadOptions val );
    VARIANT_BOOL GetHasModel ( );
    VARIANT_BOOL GetUnloadCallbackEnabled ( );
    void PutUnloadCallbackEnabled (
        VARIANT_BOOL val );
    VARIANT_BOOL GetIsExecuting ( );
    long GetChangeCount ( );
    VARIANT_BOOL LoadModules (
        long loadOptions,
        const _variant_t & sequenceContextParam = vtMissing );
    PropertyObjectFilePtr AsPropertyObjectFile ( );
    _bstr_t GetModelAbsolutePath (
        VARIANT_BOOL * modelExists );
    HRESULT InsertSequenceEx (
        long index,
        struct Sequence * sequenceToInsert );
    enum SequenceFileTypes GetSequenceFileType ( );
    void PutSequenceFileType (
        enum SequenceFileTypes val );
    VARIANT_BOOL GetCanUnload ( );
    VARIANT_BOOL UnloadModules ( );
    long GetId ( );
    enum ModelOptions GetModelOption ( );
    void PutModelOption (
        enum ModelOptions val );
    _bstr_t GetModelPath ( );
    void PutModelPath (
        _bstr_t val );
    SAFEARRAY * GetReservedCallbackNames ( );
    SAFEARRAY * GetModelCallbackNames ( );
    enum SeqFileBatchSynchronizationOptions GetBatchSyncOption ( );
    void PutBatchSyncOption (
        enum SeqFileBatchSynchronizationOptions val );
    HRESULT AddLoadReference ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetSequence (
        /*[in]*/ long index,
        /*[out,retval]*/ struct Sequence * * val ) = 0;
      virtual HRESULT __stdcall raw_GetSequenceByName (
        /*[in]*/ BSTR sequenceNameParam,
        /*[out,retval]*/ struct Sequence * * val ) = 0;
      virtual HRESULT __stdcall raw_SequenceNameExists (
        /*[in]*/ BSTR sequenceNameParam,
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall raw_InsertSequence (
        /*[in]*/ struct Sequence * sequenceToInsert ) = 0;
      virtual HRESULT __stdcall raw_RemoveSequence (
        /*[in]*/ long index,
        /*[out,retval]*/ struct Sequence * * val ) = 0;
      virtual HRESULT __stdcall raw_DeleteSequence (
        /*[in]*/ long index ) = 0;
      virtual HRESULT __stdcall raw_Save (
        /*[in]*/ BSTR pathString ) = 0;
      virtual HRESULT __stdcall raw_GetModelSequenceFile (
        /*[out]*/ BSTR * modelDescriptionString,
        /*[out,retval]*/ struct SequenceFile * * val ) = 0;
      virtual HRESULT __stdcall raw_CreateCallbackOverrideSequence (
        /*[in]*/ BSTR callbackName,
        /*[in]*/ VARIANT_BOOL allowCopyDefaultSteps,
        /*[out,retval]*/ struct Sequence * * val ) = 0;
      virtual HRESULT __stdcall raw_NewEditContext (
        /*[out,retval]*/ struct SequenceContext * * val ) = 0;
      virtual HRESULT __stdcall raw_IncChangeCount ( ) = 0;
      virtual HRESULT __stdcall raw_GetSequenceIndex (
        /*[in]*/ BSTR sequenceNameParam,
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall raw_AsPropertyObject (
        /*[out,retval]*/ struct PropertyObject * * val ) = 0;
      virtual HRESULT __stdcall get_NumSequences (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall get_FileGlobalsDefaultValues (
        /*[out,retval]*/ struct PropertyObject * * val ) = 0;
      virtual HRESULT __stdcall get_Path (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_Path (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_ModuleLoadOption (
        /*[out,retval]*/ enum ModuleLoadOptions * val ) = 0;
      virtual HRESULT __stdcall put_ModuleLoadOption (
        /*[in]*/ enum ModuleLoadOptions val ) = 0;
      virtual HRESULT __stdcall get_ModuleUnloadOption (
        /*[out,retval]*/ enum ModuleUnloadOptions * val ) = 0;
      virtual HRESULT __stdcall put_ModuleUnloadOption (
        /*[in]*/ enum ModuleUnloadOptions val ) = 0;
      virtual HRESULT __stdcall get_HasModel (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall get_UnloadCallbackEnabled (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_UnloadCallbackEnabled (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_IsExecuting (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall get_ChangeCount (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall raw_LoadModules (
        /*[in]*/ long loadOptions,
        /*[in]*/ VARIANT sequenceContextParam,
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall raw_AsPropertyObjectFile (
        /*[out,retval]*/ struct PropertyObjectFile * * val ) = 0;
      virtual HRESULT __stdcall raw_GetModelAbsolutePath (
        /*[out]*/ VARIANT_BOOL * modelExists,
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall raw_InsertSequenceEx (
        /*[in]*/ long index,
        /*[in]*/ struct Sequence * sequenceToInsert ) = 0;
      virtual HRESULT __stdcall get_SequenceFileType (
        /*[out,retval]*/ enum SequenceFileTypes * val ) = 0;
      virtual HRESULT __stdcall put_SequenceFileType (
        /*[in]*/ enum SequenceFileTypes val ) = 0;
      virtual HRESULT __stdcall get_CanUnload (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall raw_UnloadModules (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall get_Id (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall get_ModelOption (
        /*[out,retval]*/ enum ModelOptions * val ) = 0;
      virtual HRESULT __stdcall put_ModelOption (
        /*[in]*/ enum ModelOptions val ) = 0;
      virtual HRESULT __stdcall get_ModelPath (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_ModelPath (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall raw_GetReservedCallbackNames (
        /*[out,retval]*/ SAFEARRAY * * returnList ) = 0;
      virtual HRESULT __stdcall raw_GetModelCallbackNames (
        /*[out,retval]*/ SAFEARRAY * * returnList ) = 0;
      virtual HRESULT __stdcall get_BatchSyncOption (
        /*[out,retval]*/ enum SeqFileBatchSynchronizationOptions * val ) = 0;
      virtual HRESULT __stdcall put_BatchSyncOption (
        /*[in]*/ enum SeqFileBatchSynchronizationOptions val ) = 0;
      virtual HRESULT __stdcall raw_AddLoadReference ( ) = 0;
};

struct __declspec(uuid("7f73e909-96cc-4198-91b9-dd828ff9d348"))
SelectedBreakpointItem : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetSequenceFile))
    SequenceFilePtr SequenceFile;
    __declspec(property(get=GetSequenceName))
    _bstr_t SequenceName;
    __declspec(property(get=GetStepGroup))
    enum StepGroups StepGroup;
    __declspec(property(get=GetStepId))
    _bstr_t StepId;

    //
    // Wrapper methods for error-handling
    //

    SequenceFilePtr GetSequenceFile ( );
    _bstr_t GetSequenceName ( );
    enum StepGroups GetStepGroup ( );
    _bstr_t GetStepId ( );
    VARIANT_BOOL IsEndSelected ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_SequenceFile (
        /*[out,retval]*/ struct SequenceFile * * selectedFileParam ) = 0;
      virtual HRESULT __stdcall get_SequenceName (
        /*[out,retval]*/ BSTR * selectedSequenceNameParam ) = 0;
      virtual HRESULT __stdcall get_StepGroup (
        /*[out,retval]*/ enum StepGroups * selectedStepGroupParam ) = 0;
      virtual HRESULT __stdcall get_StepId (
        /*[out,retval]*/ BSTR * selectedStepIdParam ) = 0;
      virtual HRESULT __stdcall raw_IsEndSelected (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
};

struct __declspec(uuid("b2794ef7-c0b6-11d0-939c-0020af68e893"))
Sequence : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetParameters))
    PropertyObjectPtr Parameters;
    __declspec(property(get=GetLocals))
    PropertyObjectPtr Locals;
    __declspec(property(get=GetShowEntryPointForFileWindow,put=PutShowEntryPointForFileWindow))
    VARIANT_BOOL ShowEntryPointForFileWindow;
    __declspec(property(get=GetShowEntryPointForExeWindow,put=PutShowEntryPointForExeWindow))
    VARIANT_BOOL ShowEntryPointForExeWindow;
    __declspec(property(get=GetEntryPointInitiallyHidden,put=PutEntryPointInitiallyHidden))
    VARIANT_BOOL EntryPointInitiallyHidden;
    __declspec(property(get=GetType,put=PutType))
    enum SequenceTypes Type;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetGotoCleanupOnFailure,put=PutGotoCleanupOnFailure))
    VARIANT_BOOL GotoCleanupOnFailure;
    __declspec(property(get=GetDisableResults,put=PutDisableResults))
    VARIANT_BOOL DisableResults;
    __declspec(property(get=GetShowEntryPointForEditorOnly,put=PutShowEntryPointForEditorOnly))
    VARIANT_BOOL ShowEntryPointForEditorOnly;
    __declspec(property(get=GetShowEntryPointForAllWindows,put=PutShowEntryPointForAllWindows))
    VARIANT_BOOL ShowEntryPointForAllWindows;
    __declspec(property(get=GetAllowInteractiveExecutionOfEntryPoint,put=PutAllowInteractiveExecutionOfEntryPoint))
    VARIANT_BOOL AllowInteractiveExecutionOfEntryPoint;
    __declspec(property(get=GetOptimizeNonReentrantCalls,put=PutOptimizeNonReentrantCalls))
    VARIANT_BOOL OptimizeNonReentrantCalls;
    __declspec(property(get=GetCopyStepsOnOverride,put=PutCopyStepsOnOverride))
    VARIANT_BOOL CopyStepsOnOverride;
    __declspec(property(get=GetEntryPointIgnoreClient,put=PutEntryPointIgnoreClient))
    VARIANT_BOOL EntryPointIgnoreClient;
    __declspec(property(get=GetEntryPointCheckToSaveTitledSeqFiles,put=PutEntryPointCheckToSaveTitledSeqFiles))
    VARIANT_BOOL EntryPointCheckToSaveTitledSeqFiles;
    __declspec(property(get=GetEntryPointNameExpression,put=PutEntryPointNameExpression))
    _bstr_t EntryPointNameExpression;
    __declspec(property(get=GetEntryPointEnabledExpression,put=PutEntryPointEnabledExpression))
    _bstr_t EntryPointEnabledExpression;
    __declspec(property(get=GetEntryPointMenuHint,put=PutEntryPointMenuHint))
    _bstr_t EntryPointMenuHint;
    __declspec(property(get=GetSequenceFile))
    SequenceFilePtr SequenceFile;
    __declspec(property(get=GetHasMismatchedBlocks))
    VARIANT_BOOL HasMismatchedBlocks;
    __declspec(property(get=GetRequirements))
    PropertyObjectPtr Requirements;
    __declspec(property(get=GetSequenceIndex))
    long SequenceIndex;
    __declspec(property(get=GetId))
    long Id;

    //
    // Wrapper methods for error-handling
    //

    long GetNumSteps (
        enum StepGroups stepGroupParam );
    StepPtr GetStep (
        long index,
        enum StepGroups stepGroupParam );
    StepPtr GetStepByName (
        _bstr_t nameOfStep,
        enum StepGroups stepGroupParam );
    HRESULT InsertStep (
        struct Step * stepToInsert,
        long index,
        enum StepGroups stepGroupParam );
    StepPtr RemoveStep (
        long index,
        enum StepGroups stepGroupParam );
    HRESULT DeleteStep (
        long index,
        enum StepGroups stepGroupParam );
    VARIANT_BOOL StepNameExists (
        _bstr_t nameOfStep,
        enum StepGroups stepGroupParam );
    _bstr_t EvalEntryPointNameExpression (
        struct SequenceFile * sequenceFileParam );
    VARIANT_BOOL EvalEntryPointEnabledExpression (
        struct SequenceFile * sequenceFileParam );
    long GetEntryPointMenuFromHint (
        _bstr_t menuNameList );
    PropertyObjectPtr AsPropertyObject ( );
    long GetStepIndex (
        _bstr_t nameOfStep,
        enum StepGroups stepGroupParam );
    PropertyObjectPtr GetParameters ( );
    PropertyObjectPtr GetLocals ( );
    VARIANT_BOOL GetShowEntryPointForFileWindow ( );
    void PutShowEntryPointForFileWindow (
        VARIANT_BOOL val );
    VARIANT_BOOL GetShowEntryPointForExeWindow ( );
    void PutShowEntryPointForExeWindow (
        VARIANT_BOOL val );
    VARIANT_BOOL GetEntryPointInitiallyHidden ( );
    void PutEntryPointInitiallyHidden (
        VARIANT_BOOL val );
    enum SequenceTypes GetType ( );
    void PutType (
        enum SequenceTypes val );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t val );
    VARIANT_BOOL GetGotoCleanupOnFailure ( );
    void PutGotoCleanupOnFailure (
        VARIANT_BOOL val );
    VARIANT_BOOL GetDisableResults ( );
    void PutDisableResults (
        VARIANT_BOOL val );
    VARIANT_BOOL GetShowEntryPointForEditorOnly ( );
    void PutShowEntryPointForEditorOnly (
        VARIANT_BOOL val );
    VARIANT_BOOL GetShowEntryPointForAllWindows ( );
    void PutShowEntryPointForAllWindows (
        VARIANT_BOOL val );
    VARIANT_BOOL GetBreakOnEnd (
        enum StepGroups stepGroupParam,
        const _variant_t & executionParam = vtMissing );
    HRESULT SetBreakOnEnd (
        enum StepGroups stepGroupParam,
        VARIANT_BOOL breakOnEnd,
        const _variant_t & executionParam = vtMissing );
    VARIANT_BOOL LoadModules (
        long loadOptions,
        const _variant_t & sequenceContextParam = vtMissing );
    enum SequenceTypes GetEffectiveType ( );
    _bstr_t EvalEntryPointNameExpressionEx (
        struct EditArgs * EditArgs );
    VARIANT_BOOL EvalEntryPointEnabledExpressionEx (
        struct EditArgs * EditArgs );
    VARIANT_BOOL GetEntryPointIgnoreClient ( );
    void PutEntryPointIgnoreClient (
        VARIANT_BOOL val );
    VARIANT_BOOL GetEntryPointCheckToSaveTitledSeqFiles ( );
    void PutEntryPointCheckToSaveTitledSeqFiles (
        VARIANT_BOOL val );
    VARIANT_BOOL UnloadModules ( );
    SequenceFilePtr GetSequenceFile ( );
    VARIANT_BOOL GetAllowInteractiveExecutionOfEntryPoint ( );
    void PutAllowInteractiveExecutionOfEntryPoint (
        VARIANT_BOOL val );
    VARIANT_BOOL GetOptimizeNonReentrantCalls ( );
    void PutOptimizeNonReentrantCalls (
        VARIANT_BOOL val );
    VARIANT_BOOL GetCopyStepsOnOverride ( );
    void PutCopyStepsOnOverride (
        VARIANT_BOOL val );
    HRESULT SetBreakOnEndSettings (
        enum StepGroups stepGroupParam,
        VARIANT_BOOL isSet,
        VARIANT_BOOL enabled,
        long passCount,
        _bstr_t Condition,
        const _variant_t & executionParam = vtMissing );
    HRESULT GetBreakOnEndSettings (
        enum StepGroups stepGroupParam,
        VARIANT_BOOL * isSet,
        VARIANT_BOOL * enabled,
        long * passCount,
        BSTR * Condition,
        const _variant_t & executionParam = vtMissing );
    _bstr_t GetEntryPointNameExpression ( );
    void PutEntryPointNameExpression (
        _bstr_t val );
    _bstr_t GetEntryPointEnabledExpression ( );
    void PutEntryPointEnabledExpression (
        _bstr_t val );
    _bstr_t GetEntryPointMenuHint ( );
    void PutEntryPointMenuHint (
        _bstr_t val );
    HRESULT CreateNewUniqueStepIds ( );
    StepPtr GetStepByUniqueId (
        _bstr_t UniqueStepId );
    VARIANT_BOOL GetHasMismatchedBlocks ( );
    PropertyObjectPtr GetRequirements ( );
    long GetSequenceIndex ( );
    long GetId ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetNumSteps (
        /*[in]*/ enum StepGroups stepGroupParam,
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall raw_GetStep (
        /*[in]*/ long index,
        /*[in]*/ enum StepGroups stepGroupParam,
        /*[out,retval]*/ struct Step * * val ) = 0;
      virtual HRESULT __stdcall raw_GetStepByName (
        /*[in]*/ BSTR nameOfStep,
        /*[in]*/ enum StepGroups stepGroupParam,
        /*[out,retval]*/ struct Step * * val ) = 0;
      virtual HRESULT __stdcall raw_InsertStep (
        /*[in]*/ struct Step * stepToInsert,
        /*[in]*/ long index,
        /*[in]*/ enum StepGroups stepGroupParam ) = 0;
      virtual HRESULT __stdcall raw_RemoveStep (
        /*[in]*/ long index,
        /*[in]*/ enum StepGroups stepGroupParam,
        /*[out,retval]*/ struct Step * * val ) = 0;
      virtual HRESULT __stdcall raw_DeleteStep (
        /*[in]*/ long index,
        /*[in]*/ enum StepGroups stepGroupParam ) = 0;
      virtual HRESULT __stdcall raw_StepNameExists (
        /*[in]*/ BSTR nameOfStep,
        /*[in]*/ enum StepGroups stepGroupParam,
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall raw_EvalEntryPointNameExpression (
        /*[in]*/ struct SequenceFile * sequenceFileParam,
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall raw_EvalEntryPointEnabledExpression (
        /*[in]*/ struct SequenceFile * sequenceFileParam,
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall raw_GetEntryPointMenuFromHint (
        /*[in]*/ BSTR menuNameList,
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall raw_AsPropertyObject (
        /*[out,retval]*/ struct PropertyObject * * val ) = 0;
      virtual HRESULT __stdcall raw_GetStepIndex (
        /*[in]*/ BSTR nameOfStep,
        /*[in]*/ enum StepGroups stepGroupParam,
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall get_Parameters (
        /*[out,retval]*/ struct PropertyObject * * val ) = 0;
      virtual HRESULT __stdcall get_Locals (
        /*[out,retval]*/ struct PropertyObject * * val ) = 0;
      virtual HRESULT __stdcall get_ShowEntryPointForFileWindow (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_ShowEntryPointForFileWindow (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_ShowEntryPointForExeWindow (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_ShowEntryPointForExeWindow (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_EntryPointInitiallyHidden (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_EntryPointInitiallyHidden (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum SequenceTypes * val ) = 0;
      virtual HRESULT __stdcall put_Type (
        /*[in]*/ enum SequenceTypes val ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_GotoCleanupOnFailure (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_GotoCleanupOnFailure (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_DisableResults (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_DisableResults (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_ShowEntryPointForEditorOnly (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_ShowEntryPointForEditorOnly (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_ShowEntryPointForAllWindows (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_ShowEntryPointForAllWindows (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall raw_GetBreakOnEnd (
        /*[in]*/ enum StepGroups stepGroupParam,
        /*[in]*/ VARIANT executionParam,
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall raw_SetBreakOnEnd (
        /*[in]*/ enum StepGroups stepGroupParam,
        /*[in]*/ VARIANT_BOOL breakOnEnd,
        /*[in]*/ VARIANT executionParam = vtMissing ) = 0;
      virtual HRESULT __stdcall raw_LoadModules (
        /*[in]*/ long loadOptions,
        /*[in]*/ VARIANT sequenceContextParam,
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall raw_GetEffectiveType (
        /*[out,retval]*/ enum SequenceTypes * val ) = 0;
      virtual HRESULT __stdcall raw_EvalEntryPointNameExpressionEx (
        /*[in]*/ struct EditArgs * EditArgs,
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall raw_EvalEntryPointEnabledExpressionEx (
        /*[in]*/ struct EditArgs * EditArgs,
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall get_EntryPointIgnoreClient (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_EntryPointIgnoreClient (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_EntryPointCheckToSaveTitledSeqFiles (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_EntryPointCheckToSaveTitledSeqFiles (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall raw_UnloadModules (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall get_SequenceFile (
        /*[out,retval]*/ struct SequenceFile * * val ) = 0;
      virtual HRESULT __stdcall get_AllowInteractiveExecutionOfEntryPoint (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_AllowInteractiveExecutionOfEntryPoint (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_OptimizeNonReentrantCalls (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_OptimizeNonReentrantCalls (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_CopyStepsOnOverride (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_CopyStepsOnOverride (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall raw_SetBreakOnEndSettings (
        /*[in]*/ enum StepGroups stepGroupParam,
        /*[in]*/ VARIANT_BOOL isSet,
        /*[in]*/ VARIANT_BOOL enabled,
        /*[in]*/ long passCount,
        /*[in]*/ BSTR Condition,
        /*[in]*/ VARIANT executionParam = vtMissing ) = 0;
      virtual HRESULT __stdcall raw_GetBreakOnEndSettings (
        /*[in]*/ enum StepGroups stepGroupParam,
        /*[out]*/ VARIANT_BOOL * isSet,
        /*[out]*/ VARIANT_BOOL * enabled,
        /*[out]*/ long * passCount,
        /*[out]*/ BSTR * Condition,
        /*[in]*/ VARIANT executionParam = vtMissing ) = 0;
      virtual HRESULT __stdcall get_EntryPointNameExpression (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_EntryPointNameExpression (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_EntryPointEnabledExpression (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_EntryPointEnabledExpression (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_EntryPointMenuHint (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_EntryPointMenuHint (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall raw_CreateNewUniqueStepIds ( ) = 0;
      virtual HRESULT __stdcall raw_GetStepByUniqueId (
        /*[in]*/ BSTR UniqueStepId,
        /*[out,retval]*/ struct Step * * val ) = 0;
      virtual HRESULT __stdcall get_HasMismatchedBlocks (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall get_Requirements (
        /*[out,retval]*/ struct PropertyObject * * val ) = 0;
      virtual HRESULT __stdcall get_SequenceIndex (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall get_Id (
        /*[out,retval]*/ long * val ) = 0;
};

struct __declspec(uuid("608ba280-c332-11d1-a3eb-006008ca11d4"))
InteractiveArgs : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetLoopCount,put=PutLoopCount))
    long LoopCount;
    __declspec(property(get=GetStopExpression,put=PutStopExpression))
    _bstr_t StopExpression;
    __declspec(property(get=GetSequence,put=PutRefSequence))
    SequencePtr Sequence;
    __declspec(property(get=GetStepGroup,put=PutStepGroup))
    enum StepGroups StepGroup;
    __declspec(property(get=GetNumSteps))
    long NumSteps;

    //
    // Wrapper methods for error-handling
    //

    long GetStepIndex (
        long arrayIndexParam );
    HRESULT AddStepIndex (
        long stepIndexParam );
    VARIANT_BOOL ContainsStep (
        long stepIndexParam );
    HRESULT ClearStepList ( );
    PropertyObjectPtr AsPropertyObject ( );
    enum StepGroups GetStepGroup ( );
    void PutStepGroup (
        enum StepGroups val );
    long GetNumSteps ( );
    long GetLoopCount ( );
    void PutLoopCount (
        long val );
    _bstr_t GetStopExpression ( );
    void PutStopExpression (
        _bstr_t val );
    SequencePtr GetSequence ( );
    void PutSequence (
        struct Sequence * val );
    void PutRefSequence (
        struct Sequence * val );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetStepIndex (
        /*[in]*/ long arrayIndexParam,
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall raw_AddStepIndex (
        /*[in]*/ long stepIndexParam ) = 0;
      virtual HRESULT __stdcall raw_ContainsStep (
        /*[in]*/ long stepIndexParam,
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall raw_ClearStepList ( ) = 0;
      virtual HRESULT __stdcall raw_AsPropertyObject (
        /*[out,retval]*/ struct PropertyObject * * val ) = 0;
      virtual HRESULT __stdcall get_StepGroup (
        /*[out,retval]*/ enum StepGroups * val ) = 0;
      virtual HRESULT __stdcall put_StepGroup (
        /*[in]*/ enum StepGroups val ) = 0;
      virtual HRESULT __stdcall get_NumSteps (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall get_LoopCount (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall put_LoopCount (
        /*[in]*/ long val ) = 0;
      virtual HRESULT __stdcall get_StopExpression (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_StopExpression (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_Sequence (
        /*[out,retval]*/ struct Sequence * * val ) = 0;
      virtual HRESULT __stdcall put_Sequence (
        /*[in]*/ struct Sequence * val ) = 0;
      virtual HRESULT __stdcall putref_Sequence (
        /*[in]*/ struct Sequence * val ) = 0;
};

struct __declspec(uuid("17de8180-c3da-11d1-a3eb-006008ca11d4"))
InteractiveContext : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetSavedNextStepIndex))
    long SavedNextStepIndex;
    __declspec(property(get=GetSavedStepIndex))
    long SavedStepIndex;
    __declspec(property(get=GetInteractiveArgs))
    InteractiveArgsPtr InteractiveArgs;
    __declspec(property(get=GetIsRootExecution))
    VARIANT_BOOL IsRootExecution;
    __declspec(property(get=GetSavedPreviousStepIndex))
    long SavedPreviousStepIndex;

    //
    // Wrapper methods for error-handling
    //

    PropertyObjectPtr AsPropertyObject ( );
    VARIANT_BOOL GetIsRootExecution ( );
    long GetSavedPreviousStepIndex ( );
    long GetSavedNextStepIndex ( );
    long GetSavedStepIndex ( );
    InteractiveArgsPtr GetInteractiveArgs ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_AsPropertyObject (
        /*[out,retval]*/ struct PropertyObject * * val ) = 0;
      virtual HRESULT __stdcall get_IsRootExecution (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall get_SavedPreviousStepIndex (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall get_SavedNextStepIndex (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall get_SavedStepIndex (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall get_InteractiveArgs (
        /*[out,retval]*/ struct InteractiveArgs * * val ) = 0;
};

struct __declspec(uuid("b86de3e1-c234-11d0-939c-0020af68e893"))
Step : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetMutexNameOrRefExpr,put=PutMutexNameOrRefExpr))
    _bstr_t MutexNameOrRefExpr;
    __declspec(property(get=GetBatchSyncOption,put=PutBatchSyncOption))
    enum BatchSynchronizationOptions BatchSyncOption;
    __declspec(property(get=GetUniqueStepId))
    _bstr_t UniqueStepId;
    __declspec(property(get=GetModule))
    ModulePtr Module;
    __declspec(property(get=GetEditAsReadOnly,put=PutEditAsReadOnly))
    VARIANT_BOOL EditAsReadOnly;
    __declspec(property(get=GetBlockLevel))
    long BlockLevel;
    __declspec(property(get=GetBlockLevelsUnmatched))
    long BlockLevelsUnmatched;
    __declspec(property(get=GetCanCreateCode))
    VARIANT_BOOL CanCreateCode;
    __declspec(property(get=GetBlockFlags))
    long BlockFlags;
    __declspec(property(get=GetCanEditCode))
    VARIANT_BOOL CanEditCode;
    __declspec(property(get=GetBlockStartIndex))
    long BlockStartIndex;
    __declspec(property(get=GetBlockEndIndex))
    long BlockEndIndex;
    __declspec(property(get=GetBlockPreviousIndex))
    long BlockPreviousIndex;
    __declspec(property(get=GetIsSequenceCall))
    VARIANT_BOOL IsSequenceCall;
    __declspec(property(get=GetAdapterKeyName))
    _bstr_t AdapterKeyName;
    __declspec(property(get=GetBreakOnStep,put=PutBreakOnStep))
    VARIANT_BOOL BreakOnStep;
    __declspec(property(get=GetRunMode,put=PutRunMode))
    _bstr_t RunMode;
    __declspec(property(get=GetRunTimeRunMode,put=PutRunTimeRunMode))
    _bstr_t RunTimeRunMode;
    __declspec(property(get=GetStepFailCausesSequenceFail,put=PutStepFailCausesSequenceFail))
    VARIANT_BOOL StepFailCausesSequenceFail;
    __declspec(property(get=GetPrecondition,put=PutPrecondition))
    _bstr_t Precondition;
    __declspec(property(get=GetDescription))
    _bstr_t Description;
    __declspec(property(get=GetCanSpecifyModule))
    VARIANT_BOOL CanSpecifyModule;
    __declspec(property(get=GetCanExecuteEditSubstep))
    VARIANT_BOOL CanExecuteEditSubstep;
    __declspec(property(get=GetBlockNextIndex))
    long BlockNextIndex;
    __declspec(property(get=GetBlockParentIndex))
    long BlockParentIndex;
    __declspec(property(get=GetRequirements))
    PropertyObjectPtr Requirements;
    __declspec(property(get=GetSwitchExecEnabled,put=PutSwitchExecEnabled))
    VARIANT_BOOL SwitchExecEnabled;
    __declspec(property(get=GetStepType))
    StepTypePtr StepType;
    __declspec(property(get=GetSwitchExecVirtualDevice,put=PutSwitchExecVirtualDevice))
    _bstr_t SwitchExecVirtualDevice;
    __declspec(property(get=GetSwitchExecOperation,put=PutSwitchExecOperation))
    enum SwitchExecOperations SwitchExecOperation;
    __declspec(property(get=GetSwitchExecRoutesToConnect,put=PutSwitchExecRoutesToConnect))
    _bstr_t SwitchExecRoutesToConnect;
    __declspec(property(get=GetSwitchExecRoutesToDisconnect,put=PutSwitchExecRoutesToDisconnect))
    _bstr_t SwitchExecRoutesToDisconnect;
    __declspec(property(get=GetSwitchExecMulticonnectMode,put=PutSwitchExecMulticonnectMode))
    enum SwitchExecMulticonnectModes SwitchExecMulticonnectMode;
    __declspec(property(get=GetPassAction,put=PutPassAction))
    _bstr_t PassAction;
    __declspec(property(get=GetPassActionTarget,put=PutPassActionTarget))
    _bstr_t PassActionTarget;
    __declspec(property(get=GetFailAction,put=PutFailAction))
    _bstr_t FailAction;
    __declspec(property(get=GetFailActionTarget,put=PutFailActionTarget))
    _bstr_t FailActionTarget;
    __declspec(property(get=GetCustomTrueAction,put=PutCustomTrueAction))
    _bstr_t CustomTrueAction;
    __declspec(property(get=GetCustomTrueActionTarget,put=PutCustomTrueActionTarget))
    _bstr_t CustomTrueActionTarget;
    __declspec(property(get=GetCustomFalseAction,put=PutCustomFalseAction))
    _bstr_t CustomFalseAction;
    __declspec(property(get=GetCustomFalseActionTarget,put=PutCustomFalseActionTarget))
    _bstr_t CustomFalseActionTarget;
    __declspec(property(get=GetCustomActionExpression,put=PutCustomActionExpression))
    _bstr_t CustomActionExpression;
    __declspec(property(get=GetPassActionTargetByExpr,put=PutPassActionTargetByExpr))
    _bstr_t PassActionTargetByExpr;
    __declspec(property(get=GetFailActionTargetByExpr,put=PutFailActionTargetByExpr))
    _bstr_t FailActionTargetByExpr;
    __declspec(property(get=GetCustomTrueActionTargetByExpr,put=PutCustomTrueActionTargetByExpr))
    _bstr_t CustomTrueActionTargetByExpr;
    __declspec(property(get=GetCustomFalseActionTargetByExpr,put=PutCustomFalseActionTargetByExpr))
    _bstr_t CustomFalseActionTargetByExpr;
    __declspec(property(get=GetSwitchExecOperationOrder,put=PutSwitchExecOperationOrder))
    enum SwitchExecOperationOrders SwitchExecOperationOrder;
    __declspec(property(get=GetSwitchExecConnectionLifetime,put=PutSwitchExecConnectionLifetime))
    enum SwitchExecLifetimes SwitchExecConnectionLifetime;
    __declspec(property(get=GetSwitchExecWaitForDebounce,put=PutSwitchExecWaitForDebounce))
    VARIANT_BOOL SwitchExecWaitForDebounce;
    __declspec(property(get=GetAdditionalResults))
    StepAdditionalResultsPtr AdditionalResults;
    __declspec(property(get=GetAdditionalResultsHints))
    AdditionalResultsPtr AdditionalResultsHints;
    __declspec(property(get=GetLoopType,put=PutLoopType))
    _bstr_t LoopType;
    __declspec(property(get=GetLoopWhileExpression,put=PutLoopWhileExpression))
    _bstr_t LoopWhileExpression;
    __declspec(property(get=GetLoopStatusExpression,put=PutLoopStatusExpression))
    _bstr_t LoopStatusExpression;
    __declspec(property(get=GetLoopInitExpression,put=PutLoopInitExpression))
    _bstr_t LoopInitExpression;
    __declspec(property(get=GetLoopIncExpression,put=PutLoopIncExpression))
    _bstr_t LoopIncExpression;
    __declspec(property(get=GetStatusExpression,put=PutStatusExpression))
    _bstr_t StatusExpression;
    __declspec(property(get=GetResultStatus,put=PutResultStatus))
    _bstr_t ResultStatus;
    __declspec(property(get=GetPreExpression,put=PutPreExpression))
    _bstr_t PreExpression;
    __declspec(property(get=GetPostExpression,put=PutPostExpression))
    _bstr_t PostExpression;
    __declspec(property(get=GetRecordResult,put=PutRecordResult))
    VARIANT_BOOL RecordResult;
    __declspec(property(get=GetModuleLoadOption,put=PutModuleLoadOption))
    enum ModuleLoadOptions ModuleLoadOption;
    __declspec(property(get=GetModuleUnloadOption,put=PutModuleUnloadOption))
    enum ModuleUnloadOptions ModuleUnloadOption;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetCancelCurrentExecution,put=PutCancelCurrentExecution))
    VARIANT_BOOL CancelCurrentExecution;
    __declspec(property(get=GetCausedSequenceFailure,put=PutCausedSequenceFailure))
    VARIANT_BOOL CausedSequenceFailure;
    __declspec(property(get=GetSmallIcon))
    IPictureDisp * SmallIcon;
    __declspec(property(get=GetLargeIcon))
    IPictureDisp * LargeIcon;
    __declspec(property(get=GetSmallIconIndex))
    long SmallIconIndex;
    __declspec(property(get=GetLargeIconIndex))
    long LargeIconIndex;
    __declspec(property(get=GetIconName,put=PutIconName))
    _bstr_t IconName;
    __declspec(property(get=GetStepGroup))
    enum StepGroups StepGroup;
    __declspec(property(get=GetStepIndex))
    long StepIndex;
    __declspec(property(get=GetSequence))
    SequencePtr Sequence;
    __declspec(property(get=GetCancelStepCallback,put=PutCancelStepCallback))
    VARIANT_BOOL CancelStepCallback;
    __declspec(property(get=GetLastStepResult,put=PutLastStepResult))
    PropertyObjectPtr LastStepResult;
    __declspec(property(get=GetCurrentLoopResult,put=PutCurrentLoopResult))
    PropertyObjectPtr CurrentLoopResult;
    __declspec(property(get=GetEvalPrecondForInteractiveExecution,put=PutEvalPrecondForInteractiveExecution))
    enum EvalPrecondOptions EvalPrecondForInteractiveExecution;
    __declspec(property(get=GetIgnoreRTE,put=PutIgnoreRTE))
    VARIANT_BOOL IgnoreRTE;
    __declspec(property(get=GetWindowActivation,put=PutWindowActivation))
    enum WindowActivationOptions WindowActivation;
    __declspec(property(get=GetRecordLoopIterationResults,put=PutRecordLoopIterationResults))
    VARIANT_BOOL RecordLoopIterationResults;
    __declspec(property(get=GetUseMutex,put=PutUseMutex))
    VARIANT_BOOL UseMutex;

    //
    // Wrapper methods for error-handling
    //

    PropertyObjectPtr AsPropertyObject ( );
    VARIANT_BOOL ExecuteEditSubstep ( );
    VARIANT_BOOL SpecifyModule (
        long specModOptions );
    VARIANT_BOOL GetIsSequenceCall ( );
    _bstr_t GetAdapterKeyName ( );
    VARIANT_BOOL GetBreakOnStep ( );
    void PutBreakOnStep (
        VARIANT_BOOL val );
    _bstr_t GetRunMode ( );
    void PutRunMode (
        _bstr_t val );
    _bstr_t GetRunTimeRunMode ( );
    void PutRunTimeRunMode (
        _bstr_t val );
    VARIANT_BOOL GetStepFailCausesSequenceFail ( );
    void PutStepFailCausesSequenceFail (
        VARIANT_BOOL val );
    _bstr_t GetPrecondition ( );
    void PutPrecondition (
        _bstr_t val );
    _bstr_t GetDescription ( );
    VARIANT_BOOL GetCanSpecifyModule ( );
    VARIANT_BOOL GetCanExecuteEditSubstep ( );
    _bstr_t GetPassAction ( );
    void PutPassAction (
        _bstr_t val );
    _bstr_t GetPassActionTarget ( );
    void PutPassActionTarget (
        _bstr_t val );
    _bstr_t GetFailAction ( );
    void PutFailAction (
        _bstr_t val );
    _bstr_t GetFailActionTarget ( );
    void PutFailActionTarget (
        _bstr_t val );
    _bstr_t GetCustomTrueAction ( );
    void PutCustomTrueAction (
        _bstr_t val );
    _bstr_t GetCustomTrueActionTarget ( );
    void PutCustomTrueActionTarget (
        _bstr_t val );
    _bstr_t GetCustomFalseAction ( );
    void PutCustomFalseAction (
        _bstr_t val );
    _bstr_t GetCustomFalseActionTarget ( );
    void PutCustomFalseActionTarget (
        _bstr_t val );
    _bstr_t GetCustomActionExpression ( );
    void PutCustomActionExpression (
        _bstr_t val );
    _bstr_t GetPassActionTargetByExpr ( );
    void PutPassActionTargetByExpr (
        _bstr_t val );
    _bstr_t GetFailActionTargetByExpr ( );
    void PutFailActionTargetByExpr (
        _bstr_t val );
    _bstr_t GetCustomTrueActionTargetByExpr ( );
    void PutCustomTrueActionTargetByExpr (
        _bstr_t val );
    _bstr_t GetCustomFalseActionTargetByExpr ( );
    void PutCustomFalseActionTargetByExpr (
        _bstr_t val );
    _bstr_t GetLoopType ( );
    void PutLoopType (
        _bstr_t val );
    _bstr_t GetLoopWhileExpression ( );
    void PutLoopWhileExpression (
        _bstr_t val );
    _bstr_t GetLoopStatusExpression ( );
    void PutLoopStatusExpression (
        _bstr_t val );
    _bstr_t GetLoopInitExpression ( );
    void PutLoopInitExpression (
        _bstr_t val );
    _bstr_t GetLoopIncExpression ( );
    void PutLoopIncExpression (
        _bstr_t val );
    _bstr_t GetStatusExpression ( );
    void PutStatusExpression (
        _bstr_t val );
    _bstr_t GetResultStatus ( );
    _bstr_t GetPreExpression ( );
    void PutPreExpression (
        _bstr_t val );
    _bstr_t GetPostExpression ( );
    void PutPostExpression (
        _bstr_t val );
    VARIANT_BOOL GetRecordResult ( );
    void PutRecordResult (
        VARIANT_BOOL val );
    enum ModuleLoadOptions GetModuleLoadOption ( );
    void PutModuleLoadOption (
        enum ModuleLoadOptions val );
    enum ModuleUnloadOptions GetModuleUnloadOption ( );
    void PutModuleUnloadOption (
        enum ModuleUnloadOptions val );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t val );
    IPictureDisp * GetSmallIcon ( );
    IPictureDisp * GetLargeIcon ( );
    long GetSmallIconIndex ( );
    long GetLargeIconIndex ( );
    _bstr_t GetIconName ( );
    void PutResultStatus (
        _bstr_t val );
    VARIANT_BOOL GetCancelCurrentExecution ( );
    void PutCancelCurrentExecution (
        VARIANT_BOOL val );
    VARIANT_BOOL GetCausedSequenceFailure ( );
    void PutCausedSequenceFailure (
        VARIANT_BOOL val );
    enum StepGroups GetStepGroup ( );
    long GetStepIndex ( );
    SequencePtr GetSequence ( );
    HRESULT SetRunModeEx (
        _bstr_t newRunMode,
        const _variant_t & executionParam = vtMissing );
    _bstr_t GetRunModeEx (
        const _variant_t & executionParam = vtMissing );
    HRESULT SetBreakOnStepEx (
        VARIANT_BOOL newBreakSetting,
        const _variant_t & executionParam = vtMissing );
    VARIANT_BOOL GetBreakOnStepEx (
        const _variant_t & executionParam = vtMissing );
    VARIANT_BOOL LoadModule (
        long loadOptions,
        const _variant_t & sequenceContextParam = vtMissing );
    _bstr_t GetResultStatusDisplayString ( );
    _bstr_t GetExecutionFlowString (
        long options,
        const _variant_t & executionParam = vtMissing );
    VARIANT_BOOL GetCanCreateCode ( );
    VARIANT_BOOL CreateCode ( );
    VARIANT_BOOL GetCanEditCode ( );
    VARIANT_BOOL EditCode ( );
    VARIANT_BOOL CanExecuteSubstep (
        long substepIndex,
        const _variant_t & sequenceContextParam = vtMissing );
    VARIANT_BOOL ExecuteSubstep (
        long substepIndex,
        const _variant_t & sequenceContextParam = vtMissing );
    VARIANT_BOOL UnloadModule ( );
    StepTypePtr GetStepType ( );
    _bstr_t GetDescriptionEx (
        long options );
    VARIANT_BOOL GetCancelStepCallback ( );
    void PutCancelStepCallback (
        VARIANT_BOOL val );
    PropertyObjectPtr GetLastStepResult ( );
    PropertyObjectPtr GetCurrentLoopResult ( );
    PropertyObjectPtr GetEditSubstepMenuStructure ( );
    enum EvalPrecondOptions GetEvalPrecondForInteractiveExecution ( );
    void PutEvalPrecondForInteractiveExecution (
        enum EvalPrecondOptions val );
    VARIANT_BOOL GetIgnoreRTE ( );
    void PutIgnoreRTE (
        VARIANT_BOOL val );
    enum WindowActivationOptions GetWindowActivation ( );
    void PutWindowActivation (
        enum WindowActivationOptions val );
    VARIANT_BOOL GetRecordLoopIterationResults ( );
    void PutRecordLoopIterationResults (
        VARIANT_BOOL val );
    VARIANT_BOOL GetUseMutex ( );
    void PutUseMutex (
        VARIANT_BOOL val );
    _bstr_t GetMutexNameOrRefExpr ( );
    void PutMutexNameOrRefExpr (
        _bstr_t val );
    enum BatchSynchronizationOptions GetBatchSyncOption ( );
    void PutBatchSyncOption (
        enum BatchSynchronizationOptions val );
    HRESULT SetBreakSettings (
        VARIANT_BOOL isSet,
        VARIANT_BOOL enabled,
        long passCount,
        _bstr_t Condition,
        const _variant_t & executionParam = vtMissing );
    HRESULT GetBreakSettings (
        VARIANT_BOOL * isSet,
        VARIANT_BOOL * enabled,
        long * passCount,
        BSTR * Condition,
        const _variant_t & executionParam = vtMissing );
    HRESULT ChangeAdapter (
        _bstr_t adapterName );
    HRESULT ChangeStepType (
        struct StepType * stepTypePtr );
    VARIANT_BOOL CanChangeAdapter (
        _bstr_t adapterName );
    VARIANT_BOOL CanChangeStepType (
        struct StepType * stepTypePtr );
    HRESULT CreateNewUniqueStepId ( );
    _bstr_t GetUniqueStepId ( );
    ModulePtr GetModule ( );
    VARIANT_BOOL GetEditAsReadOnly ( );
    void PutEditAsReadOnly (
        VARIANT_BOOL val );
    long GetBlockLevel ( );
    long GetBlockLevelsUnmatched ( );
    long GetBlockFlags ( );
    long GetBlockStartIndex ( );
    long GetBlockEndIndex ( );
    long GetBlockPreviousIndex ( );
    long GetBlockNextIndex ( );
    long GetBlockParentIndex ( );
    void PutIconName (
        _bstr_t val );
    PropertyObjectPtr GetRequirements ( );
    void PutLastStepResult (
        struct PropertyObject * val );
    void PutCurrentLoopResult (
        struct PropertyObject * val );
    _bstr_t GetStepSettingsString (
        long options,
        struct Execution * executionParam );
    VARIANT_BOOL GetSwitchExecEnabled ( );
    void PutSwitchExecEnabled (
        VARIANT_BOOL val );
    _bstr_t GetSwitchExecVirtualDevice ( );
    void PutSwitchExecVirtualDevice (
        _bstr_t val );
    enum SwitchExecOperations GetSwitchExecOperation ( );
    void PutSwitchExecOperation (
        enum SwitchExecOperations val );
    _bstr_t GetSwitchExecRoutesToConnect ( );
    void PutSwitchExecRoutesToConnect (
        _bstr_t val );
    _bstr_t GetSwitchExecRoutesToDisconnect ( );
    void PutSwitchExecRoutesToDisconnect (
        _bstr_t val );
    enum SwitchExecMulticonnectModes GetSwitchExecMulticonnectMode ( );
    void PutSwitchExecMulticonnectMode (
        enum SwitchExecMulticonnectModes val );
    enum SwitchExecOperationOrders GetSwitchExecOperationOrder ( );
    void PutSwitchExecOperationOrder (
        enum SwitchExecOperationOrders val );
    enum SwitchExecLifetimes GetSwitchExecConnectionLifetime ( );
    void PutSwitchExecConnectionLifetime (
        enum SwitchExecLifetimes val );
    VARIANT_BOOL GetSwitchExecWaitForDebounce ( );
    void PutSwitchExecWaitForDebounce (
        VARIANT_BOOL val );
    StepAdditionalResultsPtr GetAdditionalResults ( );
    AdditionalResultsPtr GetAdditionalResultsHints ( );
    VARIANT_BOOL DisplayAdditionalResultsDialog (
        _bstr_t dlgTitle,
        long dlgOptions );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_AsPropertyObject (
        /*[out,retval]*/ struct PropertyObject * * val ) = 0;
      virtual HRESULT __stdcall raw_ExecuteEditSubstep (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall raw_SpecifyModule (
        /*[in]*/ long specModOptions,
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall get_IsSequenceCall (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall get_AdapterKeyName (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall get_BreakOnStep (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_BreakOnStep (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_RunMode (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_RunMode (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_RunTimeRunMode (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_RunTimeRunMode (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_StepFailCausesSequenceFail (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_StepFailCausesSequenceFail (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_Precondition (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_Precondition (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_Description (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall get_CanSpecifyModule (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall get_CanExecuteEditSubstep (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall get_PassAction (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_PassAction (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_PassActionTarget (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_PassActionTarget (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_FailAction (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_FailAction (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_FailActionTarget (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_FailActionTarget (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_CustomTrueAction (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_CustomTrueAction (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_CustomTrueActionTarget (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_CustomTrueActionTarget (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_CustomFalseAction (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_CustomFalseAction (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_CustomFalseActionTarget (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_CustomFalseActionTarget (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_CustomActionExpression (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_CustomActionExpression (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_PassActionTargetByExpr (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_PassActionTargetByExpr (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_FailActionTargetByExpr (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_FailActionTargetByExpr (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_CustomTrueActionTargetByExpr (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_CustomTrueActionTargetByExpr (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_CustomFalseActionTargetByExpr (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_CustomFalseActionTargetByExpr (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_LoopType (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_LoopType (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_LoopWhileExpression (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_LoopWhileExpression (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_LoopStatusExpression (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_LoopStatusExpression (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_LoopInitExpression (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_LoopInitExpression (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_LoopIncExpression (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_LoopIncExpression (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_StatusExpression (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_StatusExpression (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_ResultStatus (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall get_PreExpression (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_PreExpression (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_PostExpression (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_PostExpression (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_RecordResult (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_RecordResult (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_ModuleLoadOption (
        /*[out,retval]*/ enum ModuleLoadOptions * val ) = 0;
      virtual HRESULT __stdcall put_ModuleLoadOption (
        /*[in]*/ enum ModuleLoadOptions val ) = 0;
      virtual HRESULT __stdcall get_ModuleUnloadOption (
        /*[out,retval]*/ enum ModuleUnloadOptions * val ) = 0;
      virtual HRESULT __stdcall put_ModuleUnloadOption (
        /*[in]*/ enum ModuleUnloadOptions val ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_SmallIcon (
        /*[out,retval]*/ IPictureDisp * * val ) = 0;
      virtual HRESULT __stdcall get_LargeIcon (
        /*[out,retval]*/ IPictureDisp * * val ) = 0;
      virtual HRESULT __stdcall get_SmallIconIndex (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall get_LargeIconIndex (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall get_IconName (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_ResultStatus (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_CancelCurrentExecution (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_CancelCurrentExecution (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_CausedSequenceFailure (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_CausedSequenceFailure (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_StepGroup (
        /*[out,retval]*/ enum StepGroups * val ) = 0;
      virtual HRESULT __stdcall get_StepIndex (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall get_Sequence (
        /*[out,retval]*/ struct Sequence * * val ) = 0;
      virtual HRESULT __stdcall raw_SetRunModeEx (
        /*[in]*/ BSTR newRunMode,
        /*[in]*/ VARIANT executionParam = vtMissing ) = 0;
      virtual HRESULT __stdcall raw_GetRunModeEx (
        /*[in]*/ VARIANT executionParam,
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall raw_SetBreakOnStepEx (
        /*[in]*/ VARIANT_BOOL newBreakSetting,
        /*[in]*/ VARIANT executionParam = vtMissing ) = 0;
      virtual HRESULT __stdcall raw_GetBreakOnStepEx (
        /*[in]*/ VARIANT executionParam,
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall raw_LoadModule (
        /*[in]*/ long loadOptions,
        /*[in]*/ VARIANT sequenceContextParam,
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall raw_GetResultStatusDisplayString (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall raw_GetExecutionFlowString (
        /*[in]*/ long options,
        /*[in]*/ VARIANT executionParam,
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall get_CanCreateCode (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall raw_CreateCode (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall get_CanEditCode (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall raw_EditCode (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall raw_CanExecuteSubstep (
        /*[in]*/ long substepIndex,
        /*[in]*/ VARIANT sequenceContextParam,
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall raw_ExecuteSubstep (
        /*[in]*/ long substepIndex,
        /*[in]*/ VARIANT sequenceContextParam,
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall raw_UnloadModule (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall get_StepType (
        /*[out,retval]*/ struct StepType * * val ) = 0;
      virtual HRESULT __stdcall raw_GetDescriptionEx (
        /*[in]*/ long options,
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall get_CancelStepCallback (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_CancelStepCallback (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_LastStepResult (
        /*[out,retval]*/ struct PropertyObject * * val ) = 0;
      virtual HRESULT __stdcall get_CurrentLoopResult (
        /*[out,retval]*/ struct PropertyObject * * val ) = 0;
      virtual HRESULT __stdcall raw_GetEditSubstepMenuStructure (
        /*[out,retval]*/ struct PropertyObject * * val ) = 0;
      virtual HRESULT __stdcall get_EvalPrecondForInteractiveExecution (
        /*[out,retval]*/ enum EvalPrecondOptions * val ) = 0;
      virtual HRESULT __stdcall put_EvalPrecondForInteractiveExecution (
        /*[in]*/ enum EvalPrecondOptions val ) = 0;
      virtual HRESULT __stdcall get_IgnoreRTE (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_IgnoreRTE (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_WindowActivation (
        /*[out,retval]*/ enum WindowActivationOptions * val ) = 0;
      virtual HRESULT __stdcall put_WindowActivation (
        /*[in]*/ enum WindowActivationOptions val ) = 0;
      virtual HRESULT __stdcall get_RecordLoopIterationResults (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_RecordLoopIterationResults (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_UseMutex (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_UseMutex (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_MutexNameOrRefExpr (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_MutexNameOrRefExpr (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_BatchSyncOption (
        /*[out,retval]*/ enum BatchSynchronizationOptions * val ) = 0;
      virtual HRESULT __stdcall put_BatchSyncOption (
        /*[in]*/ enum BatchSynchronizationOptions val ) = 0;
      virtual HRESULT __stdcall raw_SetBreakSettings (
        /*[in]*/ VARIANT_BOOL isSet,
        /*[in]*/ VARIANT_BOOL enabled,
        /*[in]*/ long passCount,
        /*[in]*/ BSTR Condition,
        /*[in]*/ VARIANT executionParam = vtMissing ) = 0;
      virtual HRESULT __stdcall raw_GetBreakSettings (
        /*[out]*/ VARIANT_BOOL * isSet,
        /*[out]*/ VARIANT_BOOL * enabled,
        /*[out]*/ long * passCount,
        /*[out]*/ BSTR * Condition,
        /*[in]*/ VARIANT executionParam = vtMissing ) = 0;
      virtual HRESULT __stdcall raw_ChangeAdapter (
        /*[in]*/ BSTR adapterName ) = 0;
      virtual HRESULT __stdcall raw_ChangeStepType (
        /*[in]*/ struct StepType * stepTypePtr ) = 0;
      virtual HRESULT __stdcall raw_CanChangeAdapter (
        /*[in]*/ BSTR adapterName,
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall raw_CanChangeStepType (
        /*[in]*/ struct StepType * stepTypePtr,
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall raw_CreateNewUniqueStepId ( ) = 0;
      virtual HRESULT __stdcall get_UniqueStepId (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall get_Module (
        /*[out,retval]*/ struct Module * * val ) = 0;
      virtual HRESULT __stdcall get_EditAsReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_EditAsReadOnly (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_BlockLevel (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall get_BlockLevelsUnmatched (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall get_BlockFlags (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall get_BlockStartIndex (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall get_BlockEndIndex (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall get_BlockPreviousIndex (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall get_BlockNextIndex (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall get_BlockParentIndex (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall put_IconName (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_Requirements (
        /*[out,retval]*/ struct PropertyObject * * val ) = 0;
      virtual HRESULT __stdcall put_LastStepResult (
        /*[in]*/ struct PropertyObject * val ) = 0;
      virtual HRESULT __stdcall put_CurrentLoopResult (
        /*[in]*/ struct PropertyObject * val ) = 0;
      virtual HRESULT __stdcall raw_GetStepSettingsString (
        /*[in]*/ long options,
        /*[in]*/ struct Execution * executionParam,
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall get_SwitchExecEnabled (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_SwitchExecEnabled (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_SwitchExecVirtualDevice (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_SwitchExecVirtualDevice (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_SwitchExecOperation (
        /*[out,retval]*/ enum SwitchExecOperations * val ) = 0;
      virtual HRESULT __stdcall put_SwitchExecOperation (
        /*[in]*/ enum SwitchExecOperations val ) = 0;
      virtual HRESULT __stdcall get_SwitchExecRoutesToConnect (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_SwitchExecRoutesToConnect (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_SwitchExecRoutesToDisconnect (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_SwitchExecRoutesToDisconnect (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_SwitchExecMulticonnectMode (
        /*[out,retval]*/ enum SwitchExecMulticonnectModes * val ) = 0;
      virtual HRESULT __stdcall put_SwitchExecMulticonnectMode (
        /*[in]*/ enum SwitchExecMulticonnectModes val ) = 0;
      virtual HRESULT __stdcall get_SwitchExecOperationOrder (
        /*[out,retval]*/ enum SwitchExecOperationOrders * val ) = 0;
      virtual HRESULT __stdcall put_SwitchExecOperationOrder (
        /*[in]*/ enum SwitchExecOperationOrders val ) = 0;
      virtual HRESULT __stdcall get_SwitchExecConnectionLifetime (
        /*[out,retval]*/ enum SwitchExecLifetimes * val ) = 0;
      virtual HRESULT __stdcall put_SwitchExecConnectionLifetime (
        /*[in]*/ enum SwitchExecLifetimes val ) = 0;
      virtual HRESULT __stdcall get_SwitchExecWaitForDebounce (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_SwitchExecWaitForDebounce (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_AdditionalResults (
        /*[out,retval]*/ struct StepAdditionalResults * * val ) = 0;
      virtual HRESULT __stdcall get_AdditionalResultsHints (
        /*[out,retval]*/ struct AdditionalResults * * val ) = 0;
      virtual HRESULT __stdcall raw_DisplayAdditionalResultsDialog (
        /*[in]*/ BSTR dlgTitle,
        /*[in]*/ long dlgOptions,
        /*[out,retval]*/ VARIANT_BOOL * pressedOK ) = 0;
};

struct __declspec(uuid("39b81800-2fe4-11d3-afac-006097b79ef5"))
StepType : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetCanSpecifyModule))
    VARIANT_BOOL CanSpecifyModule;
    __declspec(property(get=GetMenuIcon))
    IPictureDisp * MenuIcon;
    __declspec(property(get=GetMenuIconIndex))
    long MenuIconIndex;
    __declspec(property(get=GetNumSubsteps))
    long NumSubsteps;
    __declspec(property(get=GetIconName,put=PutIconName))
    _bstr_t IconName;
    __declspec(property(get=GetDefaultNameExpr,put=PutDefaultNameExpr))
    _bstr_t DefaultNameExpr;
    __declspec(property(get=GetDescriptionExpr,put=PutDescriptionExpr))
    _bstr_t DescriptionExpr;
    __declspec(property(get=GetPrecondition,put=PutPrecondition))
    _bstr_t Precondition;
    __declspec(property(get=GetMenuItemNameExpr,put=PutMenuItemNameExpr))
    _bstr_t MenuItemNameExpr;
    __declspec(property(get=GetMenuGroupName,put=PutMenuGroupName))
    _bstr_t MenuGroupName;
    __declspec(property(get=GetModuleLoadOption,put=PutModuleLoadOption))
    enum ModuleLoadOptions ModuleLoadOption;
    __declspec(property(get=GetModuleUnloadOption,put=PutModuleUnloadOption))
    enum ModuleUnloadOptions ModuleUnloadOption;
    __declspec(property(get=GetRunMode,put=PutRunMode))
    _bstr_t RunMode;
    __declspec(property(get=GetEvalPrecondForInteractiveExecution,put=PutEvalPrecondForInteractiveExecution))
    enum EvalPrecondOptions EvalPrecondForInteractiveExecution;
    __declspec(property(get=GetWindowActivation,put=PutWindowActivation))
    enum WindowActivationOptions WindowActivation;
    __declspec(property(get=GetRecordResult,put=PutRecordResult))
    VARIANT_BOOL RecordResult;
    __declspec(property(get=GetStepFailCausesSequenceFail,put=PutStepFailCausesSequenceFail))
    VARIANT_BOOL StepFailCausesSequenceFail;
    __declspec(property(get=GetIgnoreRTE,put=PutIgnoreRTE))
    VARIANT_BOOL IgnoreRTE;
    __declspec(property(get=GetPassAction,put=PutPassAction))
    _bstr_t PassAction;
    __declspec(property(get=GetPassActionTargetByExpr,put=PutPassActionTargetByExpr))
    _bstr_t PassActionTargetByExpr;
    __declspec(property(get=GetFailAction,put=PutFailAction))
    _bstr_t FailAction;
    __declspec(property(get=GetFailActionTargetByExpr,put=PutFailActionTargetByExpr))
    _bstr_t FailActionTargetByExpr;
    __declspec(property(get=GetCustomTrueAction,put=PutCustomTrueAction))
    _bstr_t CustomTrueAction;
    __declspec(property(get=GetCustomTrueActionTargetByExpr,put=PutCustomTrueActionTargetByExpr))
    _bstr_t CustomTrueActionTargetByExpr;
    __declspec(property(get=GetCustomFalseAction,put=PutCustomFalseAction))
    _bstr_t CustomFalseAction;
    __declspec(property(get=GetCustomFalseActionTargetByExpr,put=PutCustomFalseActionTargetByExpr))
    _bstr_t CustomFalseActionTargetByExpr;
    __declspec(property(get=GetCustomActionExpression,put=PutCustomActionExpression))
    _bstr_t CustomActionExpression;
    __declspec(property(get=GetLoopType,put=PutLoopType))
    _bstr_t LoopType;
    __declspec(property(get=GetLoopWhileExpression,put=PutLoopWhileExpression))
    _bstr_t LoopWhileExpression;
    __declspec(property(get=GetLoopStatusExpression,put=PutLoopStatusExpression))
    _bstr_t LoopStatusExpression;
    __declspec(property(get=GetLoopInitExpression,put=PutLoopInitExpression))
    _bstr_t LoopInitExpression;
    __declspec(property(get=GetLoopIncExpression,put=PutLoopIncExpression))
    _bstr_t LoopIncExpression;
    __declspec(property(get=GetRecordLoopIterationResults,put=PutRecordLoopIterationResults))
    VARIANT_BOOL RecordLoopIterationResults;
    __declspec(property(get=GetUseMutex,put=PutUseMutex))
    VARIANT_BOOL UseMutex;
    __declspec(property(get=GetMutexNameOrRefExpr,put=PutMutexNameOrRefExpr))
    _bstr_t MutexNameOrRefExpr;
    __declspec(property(get=GetBatchSyncOption,put=PutBatchSyncOption))
    enum BatchSynchronizationOptions BatchSyncOption;
    __declspec(property(get=GetPreExpression,put=PutPreExpression))
    _bstr_t PreExpression;
    __declspec(property(get=GetPostExpression,put=PutPostExpression))
    _bstr_t PostExpression;
    __declspec(property(get=GetStatusExpression,put=PutStatusExpression))
    _bstr_t StatusExpression;
    __declspec(property(get=GetDimmablePropertyKeyNames))
    SAFEARRAY * DimmablePropertyKeyNames;
    __declspec(property(get=GetDesignatedAdapter))
    _bstr_t DesignatedAdapter;
    __declspec(property(get=GetModule))
    ModulePtr Module;
    __declspec(property(get=GetBlockStartTypes,put=PutBlockStartTypes))
    _bstr_t BlockStartTypes;
    __declspec(property(get=GetBlockEndTypes,put=PutBlockEndTypes))
    _bstr_t BlockEndTypes;
    __declspec(property(get=GetAppliesToBlockStructure,put=PutAppliesToBlockStructure))
    VARIANT_BOOL AppliesToBlockStructure;
    __declspec(property(get=GetSwitchExecEnabled,put=PutSwitchExecEnabled))
    VARIANT_BOOL SwitchExecEnabled;
    __declspec(property(get=GetSwitchExecVirtualDevice,put=PutSwitchExecVirtualDevice))
    _bstr_t SwitchExecVirtualDevice;
    __declspec(property(get=GetSwitchExecOperation,put=PutSwitchExecOperation))
    enum SwitchExecOperations SwitchExecOperation;
    __declspec(property(get=GetSwitchExecRoutesToConnect,put=PutSwitchExecRoutesToConnect))
    _bstr_t SwitchExecRoutesToConnect;
    __declspec(property(get=GetSwitchExecRoutesToDisconnect,put=PutSwitchExecRoutesToDisconnect))
    _bstr_t SwitchExecRoutesToDisconnect;
    __declspec(property(get=GetSwitchExecMulticonnectMode,put=PutSwitchExecMulticonnectMode))
    enum SwitchExecMulticonnectModes SwitchExecMulticonnectMode;
    __declspec(property(get=GetSwitchExecOperationOrder,put=PutSwitchExecOperationOrder))
    enum SwitchExecOperationOrders SwitchExecOperationOrder;
    __declspec(property(get=GetSwitchExecConnectionLifetime,put=PutSwitchExecConnectionLifetime))
    enum SwitchExecLifetimes SwitchExecConnectionLifetime;
    __declspec(property(get=GetSwitchExecWaitForDebounce,put=PutSwitchExecWaitForDebounce))
    VARIANT_BOOL SwitchExecWaitForDebounce;
    __declspec(property(get=GetCodeTemplates))
    CodeTemplatesPtr CodeTemplates;
    __declspec(property(get=GetAdditionalResultsHints))
    AdditionalResultsPtr AdditionalResultsHints;

    //
    // Wrapper methods for error-handling
    //

    PropertyObjectPtr AsPropertyObject ( );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t val );
    VARIANT_BOOL SpecifyModule (
        long specModOptions );
    VARIANT_BOOL GetCanSpecifyModule ( );
    IPictureDisp * GetMenuIcon ( );
    long GetMenuIconIndex ( );
    _bstr_t GetDefaultName ( );
    StepTypePtr CreateCombinedStepType (
        struct StepType * combineWith );
    long GetNumSubsteps ( );
    StepPtr GetSubstep (
        long substepIndex );
    _bstr_t GetIconName ( );
    void PutIconName (
        _bstr_t val );
    _bstr_t GetDefaultNameExpr ( );
    void PutDefaultNameExpr (
        _bstr_t val );
    _bstr_t GetDescriptionExpr ( );
    void PutDescriptionExpr (
        _bstr_t val );
    _bstr_t GetPrecondition ( );
    void PutPrecondition (
        _bstr_t val );
    _bstr_t GetMenuItemNameExpr ( );
    void PutMenuItemNameExpr (
        _bstr_t val );
    _bstr_t GetMenuGroupName ( );
    void PutMenuGroupName (
        _bstr_t val );
    enum ModuleLoadOptions GetModuleLoadOption ( );
    void PutModuleLoadOption (
        enum ModuleLoadOptions val );
    enum ModuleUnloadOptions GetModuleUnloadOption ( );
    void PutModuleUnloadOption (
        enum ModuleUnloadOptions val );
    _bstr_t GetRunMode ( );
    void PutRunMode (
        _bstr_t val );
    enum EvalPrecondOptions GetEvalPrecondForInteractiveExecution ( );
    void PutEvalPrecondForInteractiveExecution (
        enum EvalPrecondOptions val );
    enum WindowActivationOptions GetWindowActivation ( );
    void PutWindowActivation (
        enum WindowActivationOptions val );
    VARIANT_BOOL GetRecordResult ( );
    void PutRecordResult (
        VARIANT_BOOL val );
    VARIANT_BOOL GetStepFailCausesSequenceFail ( );
    void PutStepFailCausesSequenceFail (
        VARIANT_BOOL val );
    VARIANT_BOOL GetIgnoreRTE ( );
    void PutIgnoreRTE (
        VARIANT_BOOL val );
    _bstr_t GetPassAction ( );
    void PutPassAction (
        _bstr_t val );
    _bstr_t GetPassActionTargetByExpr ( );
    void PutPassActionTargetByExpr (
        _bstr_t val );
    _bstr_t GetFailAction ( );
    void PutFailAction (
        _bstr_t val );
    _bstr_t GetFailActionTargetByExpr ( );
    void PutFailActionTargetByExpr (
        _bstr_t val );
    _bstr_t GetCustomTrueAction ( );
    void PutCustomTrueAction (
        _bstr_t val );
    _bstr_t GetCustomTrueActionTargetByExpr ( );
    void PutCustomTrueActionTargetByExpr (
        _bstr_t val );
    _bstr_t GetCustomFalseAction ( );
    void PutCustomFalseAction (
        _bstr_t val );
    _bstr_t GetCustomFalseActionTargetByExpr ( );
    void PutCustomFalseActionTargetByExpr (
        _bstr_t val );
    _bstr_t GetCustomActionExpression ( );
    void PutCustomActionExpression (
        _bstr_t val );
    _bstr_t GetLoopType ( );
    void PutLoopType (
        _bstr_t val );
    _bstr_t GetLoopWhileExpression ( );
    void PutLoopWhileExpression (
        _bstr_t val );
    _bstr_t GetLoopStatusExpression ( );
    void PutLoopStatusExpression (
        _bstr_t val );
    _bstr_t GetLoopInitExpression ( );
    void PutLoopInitExpression (
        _bstr_t val );
    _bstr_t GetLoopIncExpression ( );
    void PutLoopIncExpression (
        _bstr_t val );
    VARIANT_BOOL GetRecordLoopIterationResults ( );
    void PutRecordLoopIterationResults (
        VARIANT_BOOL val );
    VARIANT_BOOL GetUseMutex ( );
    void PutUseMutex (
        VARIANT_BOOL val );
    _bstr_t GetMutexNameOrRefExpr ( );
    void PutMutexNameOrRefExpr (
        _bstr_t val );
    enum BatchSynchronizationOptions GetBatchSyncOption ( );
    void PutBatchSyncOption (
        enum BatchSynchronizationOptions val );
    _bstr_t GetPreExpression ( );
    void PutPreExpression (
        _bstr_t val );
    _bstr_t GetPostExpression ( );
    void PutPostExpression (
        _bstr_t val );
    _bstr_t GetStatusExpression ( );
    void PutStatusExpression (
        _bstr_t val );
    SAFEARRAY * GetDimmablePropertyKeyNames ( );
    _bstr_t GetDimmablePropertyDisplayName (
        _bstr_t propertyKeyName );
    VARIANT_BOOL IsPropertyDimmed (
        _bstr_t propertyKeyName );
    HRESULT DimProperty (
        _bstr_t propertyKeyName,
        VARIANT_BOOL newValue );
    HRESULT AddSubstep (
        struct Step * newSubstep );
    HRESULT RemoveSubstep (
        long substepIndex );
    HRESULT SwapSubsteps (
        long Index1,
        long index2 );
    _bstr_t GetDesignatedAdapter ( );
    HRESULT ChangeDesignatedAdapter (
        _bstr_t adapterName );
    ModulePtr GetModule ( );
    _bstr_t GetBlockStartTypes ( );
    void PutBlockStartTypes (
        _bstr_t val );
    _bstr_t GetBlockEndTypes ( );
    void PutBlockEndTypes (
        _bstr_t val );
    VARIANT_BOOL GetAppliesToBlockStructure ( );
    void PutAppliesToBlockStructure (
        VARIANT_BOOL val );
    VARIANT_BOOL GetSwitchExecEnabled ( );
    void PutSwitchExecEnabled (
        VARIANT_BOOL val );
    _bstr_t GetSwitchExecVirtualDevice ( );
    void PutSwitchExecVirtualDevice (
        _bstr_t val );
    enum SwitchExecOperations GetSwitchExecOperation ( );
    void PutSwitchExecOperation (
        enum SwitchExecOperations val );
    _bstr_t GetSwitchExecRoutesToConnect ( );
    void PutSwitchExecRoutesToConnect (
        _bstr_t val );
    _bstr_t GetSwitchExecRoutesToDisconnect ( );
    void PutSwitchExecRoutesToDisconnect (
        _bstr_t val );
    enum SwitchExecMulticonnectModes GetSwitchExecMulticonnectMode ( );
    void PutSwitchExecMulticonnectMode (
        enum SwitchExecMulticonnectModes val );
    enum SwitchExecOperationOrders GetSwitchExecOperationOrder ( );
    void PutSwitchExecOperationOrder (
        enum SwitchExecOperationOrders val );
    enum SwitchExecLifetimes GetSwitchExecConnectionLifetime ( );
    void PutSwitchExecConnectionLifetime (
        enum SwitchExecLifetimes val );
    VARIANT_BOOL GetSwitchExecWaitForDebounce ( );
    void PutSwitchExecWaitForDebounce (
        VARIANT_BOOL val );
    CodeTemplatesPtr GetCodeTemplates ( );
    AdditionalResultsPtr GetAdditionalResultsHints ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_AsPropertyObject (
        /*[out,retval]*/ struct PropertyObject * * val ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall raw_SpecifyModule (
        /*[in]*/ long specModOptions,
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall get_CanSpecifyModule (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall get_MenuIcon (
        /*[out,retval]*/ IPictureDisp * * val ) = 0;
      virtual HRESULT __stdcall get_MenuIconIndex (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall raw_GetDefaultName (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall raw_CreateCombinedStepType (
        /*[in]*/ struct StepType * combineWith,
        /*[out,retval]*/ struct StepType * * val ) = 0;
      virtual HRESULT __stdcall get_NumSubsteps (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall raw_GetSubstep (
        /*[in]*/ long substepIndex,
        /*[out,retval]*/ struct Step * * val ) = 0;
      virtual HRESULT __stdcall get_IconName (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_IconName (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_DefaultNameExpr (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_DefaultNameExpr (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_DescriptionExpr (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_DescriptionExpr (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_Precondition (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_Precondition (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_MenuItemNameExpr (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_MenuItemNameExpr (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_MenuGroupName (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_MenuGroupName (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_ModuleLoadOption (
        /*[out,retval]*/ enum ModuleLoadOptions * val ) = 0;
      virtual HRESULT __stdcall put_ModuleLoadOption (
        /*[in]*/ enum ModuleLoadOptions val ) = 0;
      virtual HRESULT __stdcall get_ModuleUnloadOption (
        /*[out,retval]*/ enum ModuleUnloadOptions * val ) = 0;
      virtual HRESULT __stdcall put_ModuleUnloadOption (
        /*[in]*/ enum ModuleUnloadOptions val ) = 0;
      virtual HRESULT __stdcall get_RunMode (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_RunMode (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_EvalPrecondForInteractiveExecution (
        /*[out,retval]*/ enum EvalPrecondOptions * val ) = 0;
      virtual HRESULT __stdcall put_EvalPrecondForInteractiveExecution (
        /*[in]*/ enum EvalPrecondOptions val ) = 0;
      virtual HRESULT __stdcall get_WindowActivation (
        /*[out,retval]*/ enum WindowActivationOptions * val ) = 0;
      virtual HRESULT __stdcall put_WindowActivation (
        /*[in]*/ enum WindowActivationOptions val ) = 0;
      virtual HRESULT __stdcall get_RecordResult (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_RecordResult (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_StepFailCausesSequenceFail (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_StepFailCausesSequenceFail (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_IgnoreRTE (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_IgnoreRTE (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_PassAction (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_PassAction (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_PassActionTargetByExpr (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_PassActionTargetByExpr (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_FailAction (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_FailAction (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_FailActionTargetByExpr (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_FailActionTargetByExpr (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_CustomTrueAction (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_CustomTrueAction (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_CustomTrueActionTargetByExpr (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_CustomTrueActionTargetByExpr (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_CustomFalseAction (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_CustomFalseAction (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_CustomFalseActionTargetByExpr (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_CustomFalseActionTargetByExpr (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_CustomActionExpression (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_CustomActionExpression (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_LoopType (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_LoopType (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_LoopWhileExpression (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_LoopWhileExpression (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_LoopStatusExpression (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_LoopStatusExpression (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_LoopInitExpression (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_LoopInitExpression (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_LoopIncExpression (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_LoopIncExpression (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_RecordLoopIterationResults (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_RecordLoopIterationResults (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_UseMutex (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_UseMutex (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_MutexNameOrRefExpr (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_MutexNameOrRefExpr (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_BatchSyncOption (
        /*[out,retval]*/ enum BatchSynchronizationOptions * val ) = 0;
      virtual HRESULT __stdcall put_BatchSyncOption (
        /*[in]*/ enum BatchSynchronizationOptions val ) = 0;
      virtual HRESULT __stdcall get_PreExpression (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_PreExpression (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_PostExpression (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_PostExpression (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_StatusExpression (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_StatusExpression (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_DimmablePropertyKeyNames (
        /*[out,retval]*/ SAFEARRAY * * returnList ) = 0;
      virtual HRESULT __stdcall raw_GetDimmablePropertyDisplayName (
        /*[in]*/ BSTR propertyKeyName,
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall raw_IsPropertyDimmed (
        /*[in]*/ BSTR propertyKeyName,
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall raw_DimProperty (
        /*[in]*/ BSTR propertyKeyName,
        /*[in]*/ VARIANT_BOOL newValue ) = 0;
      virtual HRESULT __stdcall raw_AddSubstep (
        /*[in]*/ struct Step * newSubstep ) = 0;
      virtual HRESULT __stdcall raw_RemoveSubstep (
        /*[in]*/ long substepIndex ) = 0;
      virtual HRESULT __stdcall raw_SwapSubsteps (
        /*[in]*/ long Index1,
        /*[in]*/ long index2 ) = 0;
      virtual HRESULT __stdcall get_DesignatedAdapter (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall raw_ChangeDesignatedAdapter (
        /*[in]*/ BSTR adapterName ) = 0;
      virtual HRESULT __stdcall get_Module (
        /*[out,retval]*/ struct Module * * val ) = 0;
      virtual HRESULT __stdcall get_BlockStartTypes (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_BlockStartTypes (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_BlockEndTypes (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_BlockEndTypes (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_AppliesToBlockStructure (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_AppliesToBlockStructure (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_SwitchExecEnabled (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_SwitchExecEnabled (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_SwitchExecVirtualDevice (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_SwitchExecVirtualDevice (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_SwitchExecOperation (
        /*[out,retval]*/ enum SwitchExecOperations * val ) = 0;
      virtual HRESULT __stdcall put_SwitchExecOperation (
        /*[in]*/ enum SwitchExecOperations val ) = 0;
      virtual HRESULT __stdcall get_SwitchExecRoutesToConnect (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_SwitchExecRoutesToConnect (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_SwitchExecRoutesToDisconnect (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_SwitchExecRoutesToDisconnect (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_SwitchExecMulticonnectMode (
        /*[out,retval]*/ enum SwitchExecMulticonnectModes * val ) = 0;
      virtual HRESULT __stdcall put_SwitchExecMulticonnectMode (
        /*[in]*/ enum SwitchExecMulticonnectModes val ) = 0;
      virtual HRESULT __stdcall get_SwitchExecOperationOrder (
        /*[out,retval]*/ enum SwitchExecOperationOrders * val ) = 0;
      virtual HRESULT __stdcall put_SwitchExecOperationOrder (
        /*[in]*/ enum SwitchExecOperationOrders val ) = 0;
      virtual HRESULT __stdcall get_SwitchExecConnectionLifetime (
        /*[out,retval]*/ enum SwitchExecLifetimes * val ) = 0;
      virtual HRESULT __stdcall put_SwitchExecConnectionLifetime (
        /*[in]*/ enum SwitchExecLifetimes val ) = 0;
      virtual HRESULT __stdcall get_SwitchExecWaitForDebounce (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_SwitchExecWaitForDebounce (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_CodeTemplates (
        /*[out,retval]*/ struct CodeTemplates * * val ) = 0;
      virtual HRESULT __stdcall get_AdditionalResultsHints (
        /*[out,retval]*/ struct AdditionalResults * * val ) = 0;
};

struct __declspec(uuid("56b1c191-2944-4e90-852a-b9c7a3d601bc"))
Module : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAdapter))
    AdapterPtr Adapter;
    __declspec(property(get=GetStep))
    StepPtr Step;
    __declspec(property(get=GetCanSpecify))
    VARIANT_BOOL CanSpecify;
    __declspec(property(get=GetCanCreateCode))
    VARIANT_BOOL CanCreateCode;
    __declspec(property(get=GetUnmappedArgumentValues))
    UnmappedArgumentValuesPtr UnmappedArgumentValues;
    __declspec(property(get=GetCanEditCode))
    VARIANT_BOOL CanEditCode;
    __declspec(property(get=GetIsPrototypeIncompatible))
    VARIANT_BOOL IsPrototypeIncompatible;

    //
    // Wrapper methods for error-handling
    //

    PropertyObjectPtr AsPropertyObject ( );
    AdapterPtr GetAdapter ( );
    StepPtr GetStep ( );
    VARIANT_BOOL Load (
        long loadOptions,
        const _variant_t & sequenceContextParam = vtMissing );
    VARIANT_BOOL Unload ( );
    VARIANT_BOOL GetCanSpecify ( );
    VARIANT_BOOL Specify (
        long specModOptions );
    VARIANT_BOOL GetCanCreateCode ( );
    VARIANT_BOOL CreateCode ( );
    VARIANT_BOOL GetCanEditCode ( );
    VARIANT_BOOL EditCode ( );
    _bstr_t GetDescription (
        long options );
    UnmappedArgumentValuesPtr GetUnmappedArgumentValues ( );
    VARIANT_BOOL LoadPrototype (
        long options );
    VARIANT_BOOL GetIsPrototypeIncompatible ( );
    HRESULT ClearUnmappedArgumentValues ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_AsPropertyObject (
        /*[out,retval]*/ struct PropertyObject * * val ) = 0;
      virtual HRESULT __stdcall get_Adapter (
        /*[out,retval]*/ struct Adapter * * val ) = 0;
      virtual HRESULT __stdcall get_Step (
        /*[out,retval]*/ struct Step * * val ) = 0;
      virtual HRESULT __stdcall raw_Load (
        /*[in]*/ long loadOptions,
        /*[in]*/ VARIANT sequenceContextParam,
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall raw_Unload (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall get_CanSpecify (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall raw_Specify (
        /*[in]*/ long specModOptions,
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall get_CanCreateCode (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall raw_CreateCode (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall get_CanEditCode (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall raw_EditCode (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall raw_GetDescription (
        /*[in]*/ long options,
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall get_UnmappedArgumentValues (
        /*[out,retval]*/ struct UnmappedArgumentValues * * propertyValue ) = 0;
      virtual HRESULT __stdcall raw_LoadPrototype (
        /*[in]*/ long options,
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall get_IsPrototypeIncompatible (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall raw_ClearUnmappedArgumentValues ( ) = 0;
};

struct __declspec(uuid("5db79c28-1f4c-429f-98a3-06e49d0557a3"))
UnmappedArgumentValues : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    UnmappedArgumentValuePtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    UnmappedArgumentValuePtr GetItem (
        const _variant_t & index );
    IUnknownPtr Get_NewEnum ( );
    long GetCount ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT index,
        /*[out,retval]*/ struct UnmappedArgumentValue * * unmappedArgumentValueObject ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * enumerator ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * numberOfValues ) = 0;
};

struct __declspec(uuid("03f58680-9dae-409e-a2c0-da86d840c103"))
UnmappedArgumentValue : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetValueExpr))
    _bstr_t ValueExpr;
    __declspec(property(get=GetTypeName))
    _bstr_t TypeName;
    __declspec(property(get=GetUnmappedArgumentValues))
    UnmappedArgumentValuesPtr UnmappedArgumentValues;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetName ( );
    _bstr_t GetValueExpr ( );
    _bstr_t GetTypeName ( );
    UnmappedArgumentValuesPtr GetUnmappedArgumentValues ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * propertyValue ) = 0;
      virtual HRESULT __stdcall get_ValueExpr (
        /*[out,retval]*/ BSTR * propertyValue ) = 0;
      virtual HRESULT __stdcall get_TypeName (
        /*[out,retval]*/ BSTR * propertyValue ) = 0;
      virtual HRESULT __stdcall get_UnmappedArgumentValues (
        /*[out,retval]*/ struct UnmappedArgumentValues * * propertyValue ) = 0;
};

struct __declspec(uuid("afb3481e-e079-4be6-ad65-8452ac2f8639"))
AdditionalResults : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    AdditionalResultPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetCheckedItemCount))
    long CheckedItemCount;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    AdditionalResultPtr GetItem (
        const _variant_t & index );
    IUnknownPtr Get_NewEnum ( );
    long GetCount ( );
    long GetCheckedItemCount ( );
    AdditionalResultPtr Insert (
        _bstr_t resultName,
        _bstr_t resultValueToLog,
        _bstr_t resultCondition,
        long resultFlags,
        long index );
    AdditionalResultPtr Remove (
        long index );
    HRESULT Clear ( );
    HRESULT Move (
        long index,
        long newIndex );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT index,
        /*[out,retval]*/ struct AdditionalResult * * val ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * enumerator ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall get_CheckedItemCount (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall raw_Insert (
        /*[in]*/ BSTR resultName,
        /*[in]*/ BSTR resultValueToLog,
        /*[in]*/ BSTR resultCondition,
        /*[in]*/ long resultFlags,
        /*[in]*/ long index,
        /*[out,retval]*/ struct AdditionalResult * * val ) = 0;
      virtual HRESULT __stdcall raw_Remove (
        /*[in]*/ long index,
        /*[out,retval]*/ struct AdditionalResult * * val ) = 0;
      virtual HRESULT __stdcall raw_Clear ( ) = 0;
      virtual HRESULT __stdcall raw_Move (
        /*[in]*/ long index,
        /*[in]*/ long newIndex ) = 0;
};

struct __declspec(uuid("5055d4d5-1339-4d93-bcbe-92fe24e4b228"))
AdditionalResult : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetCheckedState,put=PutCheckedState))
    enum CheckedStates CheckedState;
    __declspec(property(get=GetValueToLog,put=PutValueToLog))
    _bstr_t ValueToLog;
    __declspec(property(get=GetCondition,put=PutCondition))
    _bstr_t Condition;
    __declspec(property(get=GetFlags,put=PutFlags))
    long Flags;
    __declspec(property(get=GetIsAnyType,put=PutIsAnyType))
    VARIANT_BOOL IsAnyType;
    __declspec(property(get=GetElements))
    AdditionalResultsPtr Elements;
    __declspec(property(get=GetType,put=PutType))
    PropertyObjectTypePtr Type;
    __declspec(property(get=GetParentAdditionalResult))
    AdditionalResultPtr ParentAdditionalResult;
    __declspec(property(get=GetAreElementsIncompatibleWithType))
    VARIANT_BOOL AreElementsIncompatibleWithType;
    __declspec(property(get=GetUnmappedAdditionalResults))
    AdditionalResultsPtr UnmappedAdditionalResults;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetName ( );
    void PutName (
        _bstr_t val );
    enum CheckedStates GetCheckedState ( );
    void PutCheckedState (
        enum CheckedStates val );
    _bstr_t GetValueToLog ( );
    void PutValueToLog (
        _bstr_t val );
    _bstr_t GetCondition ( );
    void PutCondition (
        _bstr_t val );
    long GetFlags ( );
    void PutFlags (
        long val );
    VARIANT_BOOL GetIsAnyType ( );
    void PutIsAnyType (
        VARIANT_BOOL val );
    AdditionalResultsPtr GetElements ( );
    PropertyObjectTypePtr GetType ( );
    void PutType (
        struct PropertyObjectType * val );
    AdditionalResultPtr GetParentAdditionalResult ( );
    VARIANT_BOOL GetAreElementsIncompatibleWithType ( );
    AdditionalResultsPtr GetUnmappedAdditionalResults ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_CheckedState (
        /*[out,retval]*/ enum CheckedStates * val ) = 0;
      virtual HRESULT __stdcall put_CheckedState (
        /*[in]*/ enum CheckedStates val ) = 0;
      virtual HRESULT __stdcall get_ValueToLog (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_ValueToLog (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_Condition (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_Condition (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_Flags (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall put_Flags (
        /*[in]*/ long val ) = 0;
      virtual HRESULT __stdcall get_IsAnyType (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_IsAnyType (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_Elements (
        /*[out,retval]*/ struct AdditionalResults * * val ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ struct PropertyObjectType * * val ) = 0;
      virtual HRESULT __stdcall put_Type (
        /*[in]*/ struct PropertyObjectType * val ) = 0;
      virtual HRESULT __stdcall get_ParentAdditionalResult (
        /*[out,retval]*/ struct AdditionalResult * * val ) = 0;
      virtual HRESULT __stdcall get_AreElementsIncompatibleWithType (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall get_UnmappedAdditionalResults (
        /*[out,retval]*/ struct AdditionalResults * * val ) = 0;
};

struct __declspec(uuid("37157015-3906-4071-919e-a896e12769d5"))
StepAdditionalResults : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetParameterResults))
    AdditionalResultsPtr ParameterResults;
    __declspec(property(get=GetCustomResults))
    AdditionalResultsPtr CustomResults;

    //
    // Wrapper methods for error-handling
    //

    AdditionalResultsPtr GetParameterResults ( );
    AdditionalResultsPtr GetCustomResults ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ParameterResults (
        /*[out,retval]*/ struct AdditionalResults * * val ) = 0;
      virtual HRESULT __stdcall get_CustomResults (
        /*[out,retval]*/ struct AdditionalResults * * val ) = 0;
};

struct __declspec(uuid("7dc7e990-18dc-11d1-93be-0020af68e893"))
Execution : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetTimeResultsEnabled,put=PutTimeResultsEnabled))
    VARIANT_BOOL TimeResultsEnabled;
    __declspec(property(get=GetStandardResultsEnabled,put=PutStandardResultsEnabled))
    VARIANT_BOOL StandardResultsEnabled;
    __declspec(property(get=GetStationPostResultCallbackEnabled,put=PutStationPostResultCallbackEnabled))
    VARIANT_BOOL StationPostResultCallbackEnabled;
    __declspec(property(get=GetModelPostResultCallbackEnabled,put=PutModelPostResultCallbackEnabled))
    VARIANT_BOOL ModelPostResultCallbackEnabled;
    __declspec(property(get=GetSeqFilePostResultCallbackEnabled,put=PutSeqFilePostResultCallbackEnabled))
    VARIANT_BOOL SeqFilePostResultCallbackEnabled;
    __declspec(property(get=GetStationPostErrorCallbackEnabled,put=PutStationPostErrorCallbackEnabled))
    VARIANT_BOOL StationPostErrorCallbackEnabled;
    __declspec(property(get=GetModelPostErrorCallbackEnabled,put=PutModelPostErrorCallbackEnabled))
    VARIANT_BOOL ModelPostErrorCallbackEnabled;
    __declspec(property(get=GetSeqFilePostErrorCallbackEnabled,put=PutSeqFilePostErrorCallbackEnabled))
    VARIANT_BOOL SeqFilePostErrorCallbackEnabled;
    __declspec(property(get=GetStationPostFailCallbackEnabled,put=PutStationPostFailCallbackEnabled))
    VARIANT_BOOL StationPostFailCallbackEnabled;
    __declspec(property(get=GetModelPostFailCallbackEnabled,put=PutModelPostFailCallbackEnabled))
    VARIANT_BOOL ModelPostFailCallbackEnabled;
    __declspec(property(get=GetSeqFilePostFailCallbackEnabled,put=PutSeqFilePostFailCallbackEnabled))
    VARIANT_BOOL SeqFilePostFailCallbackEnabled;
    __declspec(property(get=GetDisableResults,put=PutDisableResults))
    VARIANT_BOOL DisableResults;
    __declspec(property(get=GetInInteractiveMode))
    VARIANT_BOOL InInteractiveMode;
    __declspec(property(get=GetTypeMask,put=PutTypeMask))
    long TypeMask;
    __declspec(property(get=GetResultStatus,put=PutResultStatus))
    _bstr_t ResultStatus;
    __declspec(property(get=GetErrorObject))
    PropertyObjectPtr ErrorObject;
    __declspec(property(get=GetReport))
    ReportPtr Report;
    __declspec(property(get=GetId))
    long Id;
    __declspec(property(get=GetDisplayName))
    _bstr_t DisplayName;
    __declspec(property(get=GetResultObject))
    PropertyObjectPtr ResultObject;
    __declspec(property(get=GetSequenceFilePath))
    _bstr_t SequenceFilePath;
    __declspec(property(get=GetModelSequenceFilePath))
    _bstr_t ModelSequenceFilePath;
    __declspec(property(get=GetBreakOnRTEForThisExecution,put=PutBreakOnRTEForThisExecution))
    VARIANT_BOOL BreakOnRTEForThisExecution;
    __declspec(property(get=GetSecondsExecuting))
    double SecondsExecuting;
    __declspec(property(get=GetSecondsSuspended))
    double SecondsSuspended;
    __declspec(property(get=GetSecondsAtStart))
    double SecondsAtStart;
    __declspec(property(get=GetNumThreads))
    long NumThreads;
    __declspec(property(get=GetForegroundThread,put=PutRefForegroundThread))
    ThreadPtr ForegroundThread;
    __declspec(property(get=GetForegroundThreadIndex,put=PutForegroundThreadIndex))
    long ForegroundThreadIndex;
    __declspec(property(get=GetClientFile,put=PutRefClientFile))
    SequenceFilePtr ClientFile;
    __declspec(property(get=GetTracingDisabled,put=PutTracingDisabled))
    VARIANT_BOOL TracingDisabled;
    __declspec(property(get=GetRTEOptionForThisExecution,put=PutRTEOptionForThisExecution))
    enum RTEOptions RTEOptionForThisExecution;
    __declspec(property(get=GetBreakOnEntry))
    VARIANT_BOOL BreakOnEntry;
    __declspec(property(get=GetStartCount))
    long StartCount;
    __declspec(property(get=GetRunTimeVariables))
    PropertyObjectPtr RunTimeVariables;
    __declspec(property(get=GetSeqFilePreStepCallbackEnabled,put=PutSeqFilePreStepCallbackEnabled))
    VARIANT_BOOL SeqFilePreStepCallbackEnabled;
    __declspec(property(get=GetSeqFilePostStepCallbackEnabled,put=PutSeqFilePostStepCallbackEnabled))
    VARIANT_BOOL SeqFilePostStepCallbackEnabled;
    __declspec(property(get=GetModelPreStepCallbackEnabled,put=PutModelPreStepCallbackEnabled))
    VARIANT_BOOL ModelPreStepCallbackEnabled;
    __declspec(property(get=GetModelPostStepCallbackEnabled,put=PutModelPostStepCallbackEnabled))
    VARIANT_BOOL ModelPostStepCallbackEnabled;
    __declspec(property(get=GetStationPreStepCallbackEnabled,put=PutStationPreStepCallbackEnabled))
    VARIANT_BOOL StationPreStepCallbackEnabled;
    __declspec(property(get=GetStationPostStepCallbackEnabled,put=PutStationPostStepCallbackEnabled))
    VARIANT_BOOL StationPostStepCallbackEnabled;
    __declspec(property(get=GetSeqFilePreInteractiveCallbackEnabled,put=PutSeqFilePreInteractiveCallbackEnabled))
    VARIANT_BOOL SeqFilePreInteractiveCallbackEnabled;
    __declspec(property(get=GetSeqFilePostInteractiveCallbackEnabled,put=PutSeqFilePostInteractiveCallbackEnabled))
    VARIANT_BOOL SeqFilePostInteractiveCallbackEnabled;
    __declspec(property(get=GetModelPreInteractiveCallbackEnabled,put=PutModelPreInteractiveCallbackEnabled))
    VARIANT_BOOL ModelPreInteractiveCallbackEnabled;
    __declspec(property(get=GetModelPostInteractiveCallbackEnabled,put=PutModelPostInteractiveCallbackEnabled))
    VARIANT_BOOL ModelPostInteractiveCallbackEnabled;
    __declspec(property(get=GetStationPreInteractiveCallbackEnabled,put=PutStationPreInteractiveCallbackEnabled))
    VARIANT_BOOL StationPreInteractiveCallbackEnabled;
    __declspec(property(get=GetStationPostInteractiveCallbackEnabled,put=PutStationPostInteractiveCallbackEnabled))
    VARIANT_BOOL StationPostInteractiveCallbackEnabled;

    //
    // Wrapper methods for error-handling
    //

    HRESULT Break ( );
    HRESULT Resume ( );
    HRESULT StepOver ( );
    HRESULT StepInto ( );
    HRESULT StepOut ( );
    HRESULT Abort ( );
    HRESULT Terminate ( );
    HRESULT TerminateInteractiveExecution ( );
    HRESULT CancelTermination ( );
    HRESULT Restart (
        VARIANT_BOOL breakOnEntryParam );
    VARIANT_BOOL WaitForEnd (
        long millisecondTimeOut,
        VARIANT_BOOL processWindowsMsgs,
        const _variant_t & callingExecution = vtMissing );
    ThreadPtr GetThread (
        long index );
    SequenceFilePtr GetSequenceFile ( );
    SequenceFilePtr GetModelSequenceFile ( );
    HRESULT AddExtraResult (
        _bstr_t propertyName,
        _bstr_t resultPropertyName );
    HRESULT DeleteExtraResult (
        _bstr_t propertyName );
    HRESULT ClearExtraResultList ( );
    HRESULT GetStates (
        enum ExecutionRunStates * runState,
        enum ExecutionTerminationStates * termState );
    PropertyObjectPtr AsPropertyObject ( );
    VARIANT_BOOL GetInInteractiveMode ( );
    long GetTypeMask ( );
    VARIANT_BOOL GetBreakOnRTEForThisExecution ( );
    void PutBreakOnRTEForThisExecution (
        VARIANT_BOOL val );
    long GetNumThreads ( );
    long GetForegroundThreadIndex ( );
    void PutForegroundThreadIndex (
        long val );
    VARIANT_BOOL GetSeqFilePreStepCallbackEnabled ( );
    void PutSeqFilePreStepCallbackEnabled (
        VARIANT_BOOL val );
    VARIANT_BOOL GetSeqFilePostStepCallbackEnabled ( );
    void PutSeqFilePostStepCallbackEnabled (
        VARIANT_BOOL val );
    VARIANT_BOOL GetModelPreStepCallbackEnabled ( );
    void PutModelPreStepCallbackEnabled (
        VARIANT_BOOL val );
    VARIANT_BOOL GetModelPostStepCallbackEnabled ( );
    void PutModelPostStepCallbackEnabled (
        VARIANT_BOOL val );
    VARIANT_BOOL GetStationPreStepCallbackEnabled ( );
    void PutStationPreStepCallbackEnabled (
        VARIANT_BOOL val );
    VARIANT_BOOL GetStationPostStepCallbackEnabled ( );
    void PutStationPostStepCallbackEnabled (
        VARIANT_BOOL val );
    VARIANT_BOOL GetSeqFilePreInteractiveCallbackEnabled ( );
    void PutSeqFilePreInteractiveCallbackEnabled (
        VARIANT_BOOL val );
    VARIANT_BOOL GetSeqFilePostInteractiveCallbackEnabled ( );
    void PutSeqFilePostInteractiveCallbackEnabled (
        VARIANT_BOOL val );
    VARIANT_BOOL GetModelPreInteractiveCallbackEnabled ( );
    void PutModelPreInteractiveCallbackEnabled (
        VARIANT_BOOL val );
    VARIANT_BOOL GetModelPostInteractiveCallbackEnabled ( );
    void PutModelPostInteractiveCallbackEnabled (
        VARIANT_BOOL val );
    VARIANT_BOOL GetStationPreInteractiveCallbackEnabled ( );
    void PutStationPreInteractiveCallbackEnabled (
        VARIANT_BOOL val );
    VARIANT_BOOL GetStationPostInteractiveCallbackEnabled ( );
    void PutStationPostInteractiveCallbackEnabled (
        VARIANT_BOOL val );
    VARIANT_BOOL GetTimeResultsEnabled ( );
    void PutTimeResultsEnabled (
        VARIANT_BOOL val );
    VARIANT_BOOL GetStandardResultsEnabled ( );
    void PutStandardResultsEnabled (
        VARIANT_BOOL val );
    VARIANT_BOOL GetStationPostResultCallbackEnabled ( );
    void PutStationPostResultCallbackEnabled (
        VARIANT_BOOL val );
    VARIANT_BOOL GetModelPostResultCallbackEnabled ( );
    void PutModelPostResultCallbackEnabled (
        VARIANT_BOOL val );
    VARIANT_BOOL GetSeqFilePostResultCallbackEnabled ( );
    void PutSeqFilePostResultCallbackEnabled (
        VARIANT_BOOL val );
    VARIANT_BOOL GetStationPostErrorCallbackEnabled ( );
    void PutStationPostErrorCallbackEnabled (
        VARIANT_BOOL val );
    VARIANT_BOOL GetModelPostErrorCallbackEnabled ( );
    void PutModelPostErrorCallbackEnabled (
        VARIANT_BOOL val );
    VARIANT_BOOL GetSeqFilePostErrorCallbackEnabled ( );
    void PutSeqFilePostErrorCallbackEnabled (
        VARIANT_BOOL val );
    VARIANT_BOOL GetStationPostFailCallbackEnabled ( );
    void PutStationPostFailCallbackEnabled (
        VARIANT_BOOL val );
    VARIANT_BOOL GetModelPostFailCallbackEnabled ( );
    void PutModelPostFailCallbackEnabled (
        VARIANT_BOOL val );
    VARIANT_BOOL GetSeqFilePostFailCallbackEnabled ( );
    void PutSeqFilePostFailCallbackEnabled (
        VARIANT_BOOL val );
    VARIANT_BOOL GetDisableResults ( );
    void PutDisableResults (
        VARIANT_BOOL val );
    _bstr_t GetResultStatus ( );
    void PutResultStatus (
        _bstr_t val );
    PropertyObjectPtr GetErrorObject ( );
    ReportPtr GetReport ( );
    long GetId ( );
    _bstr_t GetDisplayName ( );
    PropertyObjectPtr GetResultObject ( );
    _bstr_t GetSequenceFilePath ( );
    _bstr_t GetModelSequenceFilePath ( );
    HRESULT ClearTemporaryBreakpoints ( );
    double GetSecondsExecuting ( );
    double GetSecondsSuspended ( );
    double GetSecondsAtStart ( );
    PropertyObjectPtr GetFileGlobals (
        struct SequenceFile * sequenceFileParam );
    ThreadPtr GetForegroundThread ( );
    void PutForegroundThread (
        struct Thread * val );
    void PutRefForegroundThread (
        struct Thread * val );
    HRESULT RestartEx (
        long restartOptionsParam );
    SequenceFilePtr GetClientFile ( );
    void PutClientFile (
        struct SequenceFile * val );
    void PutRefClientFile (
        struct SequenceFile * val );
    VARIANT_BOOL GetTracingDisabled ( );
    void PutTracingDisabled (
        VARIANT_BOOL val );
    enum RTEOptions GetRTEOptionForThisExecution ( );
    void PutRTEOptionForThisExecution (
        enum RTEOptions val );
    VARIANT_BOOL WaitForEndEx (
        long millisecondTimeOut,
        VARIANT_BOOL processWindowsMsgs,
        const _variant_t & stepToStoreResultsIn = vtMissing,
        const _variant_t & callingSequenceContext = vtMissing );
    VARIANT_BOOL GetBreakOnEntry ( );
    long GetStartCount ( );
    PropertyObjectPtr InitTerminationMonitor ( );
    VARIANT_BOOL GetTerminationMonitorStatus (
        struct PropertyObject * terminationMonitorData,
        const _variant_t & sequenceContextParam = vtMissing );
    PropertyObjectPtr GetRunTimeVariables ( );
    HRESULT AddPostStepCustomUIMessage (
        long MsgCode,
        _bstr_t Expression,
        long CustomUIMessageOptions );
    HRESULT RemovePostStepCustomUIMessage (
        long MsgCode );
    HRESULT EnableCallback (
        enum CallbackTypes callbackType,
        VARIANT_BOOL newValue );
    VARIANT_BOOL IsCallbackEnabled (
        enum CallbackTypes callbackType );
    SequencePtr NewSequenceDefaultValues (
        struct Sequence * origSequence );
    SequencePtr GetSequenceDefaultValues (
        struct Sequence * origSequence,
        enum SequenceDefaultValueScopes defaultValueType );
    HRESULT SetSequenceDefaultValues (
        struct Sequence * defValSequence,
        enum SequenceDefaultValueScopes defaultValueType );
    HRESULT ClearSequenceDefaultValues (
        struct Sequence * origSequence,
        enum SequenceDefaultValueScopes defaultValueType );
    void PutTypeMask (
        long val );
    ThreadPtr NewThread (
        struct SequenceFile * sequenceFileParam,
        _bstr_t sequenceNameParam,
        long options,
        struct SequenceContext * sequenceContextParam,
        struct PropertyObject * sequenceArgsParam );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Break ( ) = 0;
      virtual HRESULT __stdcall raw_Resume ( ) = 0;
      virtual HRESULT __stdcall raw_StepOver ( ) = 0;
      virtual HRESULT __stdcall raw_StepInto ( ) = 0;
      virtual HRESULT __stdcall raw_StepOut ( ) = 0;
      virtual HRESULT __stdcall raw_Abort ( ) = 0;
      virtual HRESULT __stdcall raw_Terminate ( ) = 0;
      virtual HRESULT __stdcall raw_TerminateInteractiveExecution ( ) = 0;
      virtual HRESULT __stdcall raw_CancelTermination ( ) = 0;
      virtual HRESULT __stdcall raw_Restart (
        /*[in]*/ VARIANT_BOOL breakOnEntryParam ) = 0;
      virtual HRESULT __stdcall raw_WaitForEnd (
        /*[in]*/ long millisecondTimeOut,
        /*[in]*/ VARIANT_BOOL processWindowsMsgs,
        /*[in]*/ VARIANT callingExecution,
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall raw_GetThread (
        /*[in]*/ long index,
        /*[out,retval]*/ struct Thread * * val ) = 0;
      virtual HRESULT __stdcall raw_GetSequenceFile (
        /*[out,retval]*/ struct SequenceFile * * val ) = 0;
      virtual HRESULT __stdcall raw_GetModelSequenceFile (
        /*[out,retval]*/ struct SequenceFile * * val ) = 0;
      virtual HRESULT __stdcall raw_AddExtraResult (
        /*[in]*/ BSTR propertyName,
        /*[in]*/ BSTR resultPropertyName ) = 0;
      virtual HRESULT __stdcall raw_DeleteExtraResult (
        /*[in]*/ BSTR propertyName ) = 0;
      virtual HRESULT __stdcall raw_ClearExtraResultList ( ) = 0;
      virtual HRESULT __stdcall raw_GetStates (
        /*[out]*/ enum ExecutionRunStates * runState,
        /*[out]*/ enum ExecutionTerminationStates * termState ) = 0;
      virtual HRESULT __stdcall raw_AsPropertyObject (
        /*[out,retval]*/ struct PropertyObject * * val ) = 0;
      virtual HRESULT __stdcall get_InInteractiveMode (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall get_TypeMask (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall get_BreakOnRTEForThisExecution (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_BreakOnRTEForThisExecution (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_NumThreads (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall get_ForegroundThreadIndex (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall put_ForegroundThreadIndex (
        /*[in]*/ long val ) = 0;
      virtual HRESULT __stdcall get_SeqFilePreStepCallbackEnabled (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_SeqFilePreStepCallbackEnabled (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_SeqFilePostStepCallbackEnabled (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_SeqFilePostStepCallbackEnabled (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_ModelPreStepCallbackEnabled (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_ModelPreStepCallbackEnabled (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_ModelPostStepCallbackEnabled (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_ModelPostStepCallbackEnabled (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_StationPreStepCallbackEnabled (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_StationPreStepCallbackEnabled (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_StationPostStepCallbackEnabled (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_StationPostStepCallbackEnabled (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_SeqFilePreInteractiveCallbackEnabled (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_SeqFilePreInteractiveCallbackEnabled (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_SeqFilePostInteractiveCallbackEnabled (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_SeqFilePostInteractiveCallbackEnabled (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_ModelPreInteractiveCallbackEnabled (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_ModelPreInteractiveCallbackEnabled (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_ModelPostInteractiveCallbackEnabled (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_ModelPostInteractiveCallbackEnabled (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_StationPreInteractiveCallbackEnabled (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_StationPreInteractiveCallbackEnabled (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_StationPostInteractiveCallbackEnabled (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_StationPostInteractiveCallbackEnabled (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_TimeResultsEnabled (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_TimeResultsEnabled (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_StandardResultsEnabled (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_StandardResultsEnabled (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_StationPostResultCallbackEnabled (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_StationPostResultCallbackEnabled (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_ModelPostResultCallbackEnabled (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_ModelPostResultCallbackEnabled (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_SeqFilePostResultCallbackEnabled (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_SeqFilePostResultCallbackEnabled (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_StationPostErrorCallbackEnabled (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_StationPostErrorCallbackEnabled (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_ModelPostErrorCallbackEnabled (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_ModelPostErrorCallbackEnabled (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_SeqFilePostErrorCallbackEnabled (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_SeqFilePostErrorCallbackEnabled (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_StationPostFailCallbackEnabled (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_StationPostFailCallbackEnabled (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_ModelPostFailCallbackEnabled (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_ModelPostFailCallbackEnabled (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_SeqFilePostFailCallbackEnabled (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_SeqFilePostFailCallbackEnabled (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_DisableResults (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_DisableResults (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_ResultStatus (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_ResultStatus (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_ErrorObject (
        /*[out,retval]*/ struct PropertyObject * * val ) = 0;
      virtual HRESULT __stdcall get_Report (
        /*[out,retval]*/ struct Report * * val ) = 0;
      virtual HRESULT __stdcall get_Id (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall get_DisplayName (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall get_ResultObject (
        /*[out,retval]*/ struct PropertyObject * * val ) = 0;
      virtual HRESULT __stdcall get_SequenceFilePath (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall get_ModelSequenceFilePath (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall raw_ClearTemporaryBreakpoints ( ) = 0;
      virtual HRESULT __stdcall get_SecondsExecuting (
        /*[out,retval]*/ double * val ) = 0;
      virtual HRESULT __stdcall get_SecondsSuspended (
        /*[out,retval]*/ double * val ) = 0;
      virtual HRESULT __stdcall get_SecondsAtStart (
        /*[out,retval]*/ double * val ) = 0;
      virtual HRESULT __stdcall raw_GetFileGlobals (
        /*[in]*/ struct SequenceFile * sequenceFileParam,
        /*[out,retval]*/ struct PropertyObject * * val ) = 0;
      virtual HRESULT __stdcall get_ForegroundThread (
        /*[out,retval]*/ struct Thread * * val ) = 0;
      virtual HRESULT __stdcall put_ForegroundThread (
        /*[in]*/ struct Thread * val ) = 0;
      virtual HRESULT __stdcall putref_ForegroundThread (
        /*[in]*/ struct Thread * val ) = 0;
      virtual HRESULT __stdcall raw_RestartEx (
        /*[in]*/ long restartOptionsParam ) = 0;
      virtual HRESULT __stdcall get_ClientFile (
        /*[out,retval]*/ struct SequenceFile * * val ) = 0;
      virtual HRESULT __stdcall put_ClientFile (
        /*[in]*/ struct SequenceFile * val ) = 0;
      virtual HRESULT __stdcall putref_ClientFile (
        /*[in]*/ struct SequenceFile * val ) = 0;
      virtual HRESULT __stdcall get_TracingDisabled (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_TracingDisabled (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_RTEOptionForThisExecution (
        /*[out,retval]*/ enum RTEOptions * val ) = 0;
      virtual HRESULT __stdcall put_RTEOptionForThisExecution (
        /*[in]*/ enum RTEOptions val ) = 0;
      virtual HRESULT __stdcall raw_WaitForEndEx (
        /*[in]*/ long millisecondTimeOut,
        /*[in]*/ VARIANT_BOOL processWindowsMsgs,
        /*[in]*/ VARIANT stepToStoreResultsIn,
        /*[in]*/ VARIANT callingSequenceContext,
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall get_BreakOnEntry (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall get_StartCount (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall raw_InitTerminationMonitor (
        /*[out,retval]*/ struct PropertyObject * * val ) = 0;
      virtual HRESULT __stdcall raw_GetTerminationMonitorStatus (
        /*[in]*/ struct PropertyObject * terminationMonitorData,
        /*[in]*/ VARIANT sequenceContextParam,
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall get_RunTimeVariables (
        /*[out,retval]*/ struct PropertyObject * * val ) = 0;
      virtual HRESULT __stdcall raw_AddPostStepCustomUIMessage (
        /*[in]*/ long MsgCode,
        /*[in]*/ BSTR Expression,
        /*[in]*/ long CustomUIMessageOptions ) = 0;
      virtual HRESULT __stdcall raw_RemovePostStepCustomUIMessage (
        /*[in]*/ long MsgCode ) = 0;
      virtual HRESULT __stdcall raw_EnableCallback (
        /*[in]*/ enum CallbackTypes callbackType,
        /*[in]*/ VARIANT_BOOL newValue ) = 0;
      virtual HRESULT __stdcall raw_IsCallbackEnabled (
        /*[in]*/ enum CallbackTypes callbackType,
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall raw_NewSequenceDefaultValues (
        /*[in]*/ struct Sequence * origSequence,
        /*[out,retval]*/ struct Sequence * * returnVal ) = 0;
      virtual HRESULT __stdcall raw_GetSequenceDefaultValues (
        /*[in]*/ struct Sequence * origSequence,
        /*[in]*/ enum SequenceDefaultValueScopes defaultValueType,
        /*[out,retval]*/ struct Sequence * * returnVal ) = 0;
      virtual HRESULT __stdcall raw_SetSequenceDefaultValues (
        /*[in]*/ struct Sequence * defValSequence,
        /*[in]*/ enum SequenceDefaultValueScopes defaultValueType ) = 0;
      virtual HRESULT __stdcall raw_ClearSequenceDefaultValues (
        /*[in]*/ struct Sequence * origSequence,
        /*[in]*/ enum SequenceDefaultValueScopes defaultValueType ) = 0;
      virtual HRESULT __stdcall put_TypeMask (
        /*[in]*/ long val ) = 0;
      virtual HRESULT __stdcall raw_NewThread (
        /*[in]*/ struct SequenceFile * sequenceFileParam,
        /*[in]*/ BSTR sequenceNameParam,
        /*[in]*/ long options,
        /*[in]*/ struct SequenceContext * sequenceContextParam,
        /*[in]*/ struct PropertyObject * sequenceArgsParam,
        /*[out,retval]*/ struct Thread * * val ) = 0;
};

struct __declspec(uuid("1bf6bec0-be7d-11d1-a3eb-006008ca11d4"))
EditArgs : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT SetSelectedSequenceFile (
        struct SequenceFile * SequenceFile );
    HRESULT AddSelectedSequence (
        struct Sequence * Sequence );
    HRESULT AddSelectedStep (
        struct Step * Step );
    HRESULT ClearSelectedSequences ( );
    HRESULT ClearSelectedSteps ( );
    HRESULT SetSelectedExecution (
        struct Execution * Execution );
    HRESULT SetSelectedStepGroup (
        enum StepGroups stepGroupParam );
    HRESULT SetSelectedPropertyObjectFile (
        struct PropertyObjectFile * propertyFile );
    PropertyObjectPtr AsPropertyObject ( );
    HRESULT AddSelectedPropertyObject (
        struct PropertyObject * propertyToAdd );
    HRESULT ClearSelectedPropertyObjects ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_SetSelectedSequenceFile (
        /*[in]*/ struct SequenceFile * SequenceFile ) = 0;
      virtual HRESULT __stdcall raw_AddSelectedSequence (
        /*[in]*/ struct Sequence * Sequence ) = 0;
      virtual HRESULT __stdcall raw_AddSelectedStep (
        /*[in]*/ struct Step * Step ) = 0;
      virtual HRESULT __stdcall raw_ClearSelectedSequences ( ) = 0;
      virtual HRESULT __stdcall raw_ClearSelectedSteps ( ) = 0;
      virtual HRESULT __stdcall raw_SetSelectedExecution (
        /*[in]*/ struct Execution * Execution ) = 0;
      virtual HRESULT __stdcall raw_SetSelectedStepGroup (
        /*[in]*/ enum StepGroups stepGroupParam ) = 0;
      virtual HRESULT __stdcall raw_SetSelectedPropertyObjectFile (
        /*[in]*/ struct PropertyObjectFile * propertyFile ) = 0;
      virtual HRESULT __stdcall raw_AsPropertyObject (
        /*[out,retval]*/ struct PropertyObject * * val ) = 0;
      virtual HRESULT __stdcall raw_AddSelectedPropertyObject (
        /*[in]*/ struct PropertyObject * propertyToAdd ) = 0;
      virtual HRESULT __stdcall raw_ClearSelectedPropertyObjects ( ) = 0;
};

struct __declspec(uuid("46b7b2c4-263e-11d2-aa63-00c04f991648"))
RExecutor : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetExecutorType))
    long ExecutorType;

    //
    // Wrapper methods for error-handling
    //

    HRESULT LoadModule (
        _bstr_t modulePath );
    ExecutionPtr Execute (
        _bstr_t modulePath,
        _bstr_t seqName,
        VARIANT_BOOL trace,
        const _variant_t & args = vtMissing );
    HRESULT UnloadModule (
        _bstr_t modulePath );
    PropertyObjectPtr AsPropertyObject ( );
    long GetExecutorType ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_LoadModule (
        /*[in]*/ BSTR modulePath ) = 0;
      virtual HRESULT __stdcall raw_Execute (
        /*[in]*/ BSTR modulePath,
        /*[in]*/ BSTR seqName,
        /*[in]*/ VARIANT_BOOL trace,
        /*[in]*/ VARIANT args,
        /*[out,retval]*/ struct Execution * * val ) = 0;
      virtual HRESULT __stdcall raw_UnloadModule (
        /*[in]*/ BSTR modulePath ) = 0;
      virtual HRESULT __stdcall raw_AsPropertyObject (
        /*[out,retval]*/ struct PropertyObject * * val ) = 0;
      virtual HRESULT __stdcall get_ExecutorType (
        /*[out,retval]*/ long * val ) = 0;
};

struct __declspec(uuid("6ad5e6e0-5c69-11d1-93c6-0020af68e893"))
Thread : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetId))
    long Id;
    __declspec(property(get=GetCallStackSize))
    long CallStackSize;
    __declspec(property(get=GetExternallySuspended,put=PutExternallySuspended))
    VARIANT_BOOL ExternallySuspended;
    __declspec(property(get=GetBatch))
    IUnknownPtr Batch;
    __declspec(property(get=GetUniqueThreadId))
    _bstr_t UniqueThreadId;
    __declspec(property(get=GetRunTimeVariables))
    PropertyObjectPtr RunTimeVariables;
    __declspec(property(get=GetDisplayName))
    _bstr_t DisplayName;
    __declspec(property(get=GetExecution))
    ExecutionPtr Execution;

    //
    // Wrapper methods for error-handling
    //

    HRESULT ClearTemporaryBreakpoint ( );
    HRESULT SetStepOver ( );
    HRESULT SetStepInto ( );
    HRESULT SetStepOut ( );
    SequenceContextPtr GetSequenceContext (
        long callStackIndex,
        long * frameId );
    HRESULT ClearCurrentRTE ( );
    HRESULT DoInteractiveExecution (
        struct InteractiveArgs * InteractiveArgsParam );
    HRESULT PostUIMessage (
        enum UIMessageCodes eventCode,
        double numericDataParam,
        _bstr_t stringDataParam,
        VARIANT_BOOL synchronous );
    VARIANT_BOOL WaitForEnd (
        long millisecondTimeOut,
        VARIANT_BOOL processWindowsMsgs,
        const _variant_t & stepToStoreResultsIn = vtMissing,
        const _variant_t & callingSequenceContext = vtMissing );
    PropertyObjectPtr AsPropertyObject ( );
    _bstr_t GetDisplayName ( );
    ExecutionPtr GetExecution ( );
    long GetId ( );
    long GetCallStackSize ( );
    VARIANT_BOOL GetExternallySuspended ( );
    void PutExternallySuspended (
        VARIANT_BOOL val );
    HRESULT PostUIMessageEx (
        enum UIMessageCodes eventCode,
        double numericDataParam,
        _bstr_t stringDataParam,
        IUnknown * activeXDataParam,
        VARIANT_BOOL synchronous );
    IUnknownPtr GetBatch ( );
    HRESULT AddToBatch (
        IUnknown * batchObj,
        long orderNumber );
    HRESULT Resume ( );
    _bstr_t GetUniqueThreadId ( );
    HRESULT SetBatchRTEOption (
        enum RTEOptions newValue );
    PropertyObjectPtr GetRunTimeVariables ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_ClearTemporaryBreakpoint ( ) = 0;
      virtual HRESULT __stdcall raw_SetStepOver ( ) = 0;
      virtual HRESULT __stdcall raw_SetStepInto ( ) = 0;
      virtual HRESULT __stdcall raw_SetStepOut ( ) = 0;
      virtual HRESULT __stdcall raw_GetSequenceContext (
        /*[in]*/ long callStackIndex,
        /*[out]*/ long * frameId,
        /*[out,retval]*/ struct SequenceContext * * val ) = 0;
      virtual HRESULT __stdcall raw_ClearCurrentRTE ( ) = 0;
      virtual HRESULT __stdcall raw_DoInteractiveExecution (
        /*[in]*/ struct InteractiveArgs * InteractiveArgsParam ) = 0;
      virtual HRESULT __stdcall raw_PostUIMessage (
        /*[in]*/ enum UIMessageCodes eventCode,
        /*[in]*/ double numericDataParam,
        /*[in]*/ BSTR stringDataParam,
        /*[in]*/ VARIANT_BOOL synchronous ) = 0;
      virtual HRESULT __stdcall raw_WaitForEnd (
        /*[in]*/ long millisecondTimeOut,
        /*[in]*/ VARIANT_BOOL processWindowsMsgs,
        /*[in]*/ VARIANT stepToStoreResultsIn,
        /*[in]*/ VARIANT callingSequenceContext,
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall raw_AsPropertyObject (
        /*[out,retval]*/ struct PropertyObject * * val ) = 0;
      virtual HRESULT __stdcall get_DisplayName (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall get_Execution (
        /*[out,retval]*/ struct Execution * * val ) = 0;
      virtual HRESULT __stdcall get_Id (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall get_CallStackSize (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall get_ExternallySuspended (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_ExternallySuspended (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall raw_PostUIMessageEx (
        /*[in]*/ enum UIMessageCodes eventCode,
        /*[in]*/ double numericDataParam,
        /*[in]*/ BSTR stringDataParam,
        /*[in]*/ IUnknown * activeXDataParam,
        /*[in]*/ VARIANT_BOOL synchronous ) = 0;
      virtual HRESULT __stdcall get_Batch (
        /*[out,retval]*/ IUnknown * * val ) = 0;
      virtual HRESULT __stdcall raw_AddToBatch (
        /*[in]*/ IUnknown * batchObj,
        /*[in]*/ long orderNumber ) = 0;
      virtual HRESULT __stdcall raw_Resume ( ) = 0;
      virtual HRESULT __stdcall get_UniqueThreadId (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall raw_SetBatchRTEOption (
        /*[in]*/ enum RTEOptions newValue ) = 0;
      virtual HRESULT __stdcall get_RunTimeVariables (
        /*[out,retval]*/ struct PropertyObject * * val ) = 0;
};

struct __declspec(uuid("6427d0e0-e410-11d0-93b4-0020af68e893"))
SequenceContext : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetSelectedPropertyObjectFile))
    PropertyObjectFilePtr SelectedPropertyObjectFile;
    __declspec(property(get=GetCallerDiscardsResults))
    VARIANT_BOOL CallerDiscardsResults;
    __declspec(property(get=GetSelectedPropertyObjects))
    _variant_t SelectedPropertyObjects;
    __declspec(property(get=GetLoopNumIterations,put=PutLoopNumIterations))
    long LoopNumIterations;
    __declspec(property(get=GetNumStepsExecuted,put=PutNumStepsExecuted))
    long NumStepsExecuted;
    __declspec(property(get=GetStep))
    StepPtr Step;
    __declspec(property(get=GetPreviousStep))
    StepPtr PreviousStep;
    __declspec(property(get=GetNextStep))
    StepPtr NextStep;
    __declspec(property(get=GetSequence))
    SequencePtr Sequence;
    __declspec(property(get=GetSequenceFile))
    SequenceFilePtr SequenceFile;
    __declspec(property(get=GetStepIndex,put=PutStepIndex))
    long StepIndex;
    __declspec(property(get=GetPreviousStepIndex,put=PutPreviousStepIndex))
    long PreviousStepIndex;
    __declspec(property(get=GetNextStepIndex,put=PutNextStepIndex))
    long NextStepIndex;
    __declspec(property(get=GetSequenceIndex))
    long SequenceIndex;
    __declspec(property(get=GetStepGroup,put=PutStepGroup))
    enum StepGroups StepGroup;
    __declspec(property(get=GetCaller))
    SequenceContextPtr Caller;
    __declspec(property(get=GetCallStackName))
    _bstr_t CallStackName;
    __declspec(property(get=GetRunTimeErrorMessage))
    _bstr_t RunTimeErrorMessage;
    __declspec(property(get=GetStepGroupStartedInteractiveExe))
    VARIANT_BOOL StepGroupStartedInteractiveExe;
    __declspec(property(get=GetInInteractiveMode))
    VARIANT_BOOL InInteractiveMode;
    __declspec(property(get=GetInteractiveContext))
    InteractiveContextPtr InteractiveContext;
    __declspec(property(get=GetRoot))
    SequenceContextPtr Root;
    __declspec(property(get=GetMain))
    SequenceContextPtr Main;
    __declspec(property(get=GetThread))
    ThreadPtr Thread;
    __declspec(property(get=GetExecution))
    ExecutionPtr Execution;
    __declspec(property(get=GetReport))
    ReportPtr Report;
    __declspec(property(get=GetProcessModelClient,put=PutProcessModelClient))
    SequenceFilePtr ProcessModelClient;
    __declspec(property(get=GetSelectedFile))
    SequenceFilePtr SelectedFile;
    __declspec(property(get=GetSelectedExecution))
    ExecutionPtr SelectedExecution;
    __declspec(property(get=GetLocals))
    PropertyObjectPtr Locals;
    __declspec(property(get=GetParameters))
    PropertyObjectPtr Parameters;
    __declspec(property(get=GetFileGlobals))
    PropertyObjectPtr FileGlobals;
    __declspec(property(get=GetStationGlobals))
    PropertyObjectPtr StationGlobals;
    __declspec(property(get=GetCallStackDepth))
    long CallStackDepth;
    __declspec(property(get=GetLoopIndex,put=PutLoopIndex))
    long LoopIndex;
    __declspec(property(get=GetEngine))
    IEnginePtr Engine;
    __declspec(property(get=GetLoopNumPassed,put=PutLoopNumPassed))
    long LoopNumPassed;
    __declspec(property(get=GetLoopNumFailed,put=PutLoopNumFailed))
    long LoopNumFailed;
    __declspec(property(get=GetIsProcessModel))
    VARIANT_BOOL IsProcessModel;
    __declspec(property(get=GetTracing,put=PutTracing))
    VARIANT_BOOL Tracing;
    __declspec(property(get=GetSequenceFailed,put=PutSequenceFailed))
    VARIANT_BOOL SequenceFailed;
    __declspec(property(get=GetSelectedSequences))
    _variant_t SelectedSequences;
    __declspec(property(get=GetSelectedSteps))
    _variant_t SelectedSteps;
    __declspec(property(get=GetApplicationIsEditor))
    VARIANT_BOOL ApplicationIsEditor;
    __declspec(property(get=GetGotoCleanup,put=PutGotoCleanup))
    VARIANT_BOOL GotoCleanup;
    __declspec(property(get=GetEngineAsDispatch))
    IDispatchPtr EngineAsDispatch;
    __declspec(property(get=GetId))
    long Id;
    __declspec(property(get=GetCallingStep))
    StepPtr CallingStep;
    __declspec(property(get=GetSequenceErrorMessage,put=PutSequenceErrorMessage))
    _bstr_t SequenceErrorMessage;
    __declspec(property(get=GetSequenceErrorCode,put=PutSequenceErrorCode))
    long SequenceErrorCode;
    __declspec(property(get=GetSequenceErrorOccurred,put=PutSequenceErrorOccurred))
    VARIANT_BOOL SequenceErrorOccurred;
    __declspec(property(get=GetErrorReported,put=PutErrorReported))
    VARIANT_BOOL ErrorReported;
    __declspec(property(get=GetSelectedStepGroup,put=PutSelectedStepGroup))
    enum StepGroups SelectedStepGroup;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL IsInteractiveStep (
        long stepIndexParam );
    PropertyObjectPtr AsPropertyObject ( );
    StepPtr GetStep ( );
    StepPtr GetPreviousStep ( );
    StepPtr GetNextStep ( );
    SequencePtr GetSequence ( );
    SequenceFilePtr GetSequenceFile ( );
    long GetStepIndex ( );
    long GetPreviousStepIndex ( );
    long GetNextStepIndex ( );
    void PutNextStepIndex (
        long val );
    long GetSequenceIndex ( );
    enum StepGroups GetStepGroup ( );
    SequenceContextPtr GetCaller ( );
    _bstr_t GetCallStackName ( );
    _bstr_t GetRunTimeErrorMessage ( );
    VARIANT_BOOL GetStepGroupStartedInteractiveExe ( );
    VARIANT_BOOL GetInInteractiveMode ( );
    InteractiveContextPtr GetInteractiveContext ( );
    SequenceContextPtr GetRoot ( );
    SequenceContextPtr GetMain ( );
    ThreadPtr GetThread ( );
    ExecutionPtr GetExecution ( );
    ReportPtr GetReport ( );
    SequenceFilePtr GetProcessModelClient ( );
    SequenceFilePtr GetSelectedFile ( );
    ExecutionPtr GetSelectedExecution ( );
    PropertyObjectPtr GetLocals ( );
    PropertyObjectPtr GetParameters ( );
    PropertyObjectPtr GetFileGlobals ( );
    PropertyObjectPtr GetStationGlobals ( );
    long GetCallStackDepth ( );
    long GetLoopIndex ( );
    void PutLoopIndex (
        long val );
    IEnginePtr GetEngine ( );
    long GetLoopNumPassed ( );
    void PutLoopNumPassed (
        long val );
    long GetLoopNumFailed ( );
    void PutLoopNumFailed (
        long val );
    VARIANT_BOOL GetIsProcessModel ( );
    VARIANT_BOOL GetTracing ( );
    void PutTracing (
        VARIANT_BOOL val );
    VARIANT_BOOL GetSequenceFailed ( );
    void PutSequenceFailed (
        VARIANT_BOOL val );
    _variant_t GetSelectedSequences ( );
    _variant_t GetSelectedSteps ( );
    VARIANT_BOOL GetApplicationIsEditor ( );
    VARIANT_BOOL GetGotoCleanup ( );
    void PutGotoCleanup (
        VARIANT_BOOL val );
    IDispatchPtr GetEngineAsDispatch ( );
    void PutStepGroup (
        enum StepGroups val );
    long GetId ( );
    VARIANT_BOOL IsStepExcludedFromExecution (
        struct Step * Step );
    HRESULT GetRunTimeErrorMessageEx (
        BSTR * detailsMsg,
        BSTR * errorCodeMsg,
        BSTR * locationMsg );
    void PutStepIndex (
        long val );
    void PutPreviousStepIndex (
        long val );
    StepPtr GetCallingStep ( );
    _bstr_t GetSequenceErrorMessage ( );
    void PutSequenceErrorMessage (
        _bstr_t val );
    long GetSequenceErrorCode ( );
    void PutSequenceErrorCode (
        long errorCode );
    VARIANT_BOOL GetSequenceErrorOccurred ( );
    void PutSequenceErrorOccurred (
        VARIANT_BOOL occurredFlag );
    VARIANT_BOOL GetErrorReported ( );
    void PutErrorReported (
        VARIANT_BOOL val );
    enum StepGroups GetSelectedStepGroup ( );
    void PutSelectedStepGroup (
        enum StepGroups StepGroup );
    PropertyObjectFilePtr GetSelectedPropertyObjectFile ( );
    VARIANT_BOOL GetCallerDiscardsResults ( );
    HRESULT GetRunTimeErrorWinHelpInfo (
        long * winHelpID,
        BSTR * winHelpFile );
    _variant_t GetSelectedPropertyObjects ( );
    long GetLoopNumIterations ( );
    void PutLoopNumIterations (
        long val );
    long GetNumStepsExecuted ( );
    void PutNumStepsExecuted (
        long val );
    long GetMultipleValues (
        _bstr_t lookupString,
        enum PropertyObjectElements elem );
    HRESULT SetMultipleValues (
        _bstr_t lookupString,
        enum PropertyObjectElements elem,
        long multipleValues );
    ExecutionPtr NewExecution (
        struct SequenceFile * sequenceFileParam,
        _bstr_t sequenceNameParam,
        struct SequenceFile * processModelParam,
        VARIANT_BOOL breakAtFirstStep,
        VARIANT_BOOL synchronous,
        long executionTypeMaskParam,
        struct PropertyObject * sequenceArgsParam );
    void PutProcessModelClient (
        struct SequenceFile * val );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_IsInteractiveStep (
        /*[in]*/ long stepIndexParam,
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall raw_AsPropertyObject (
        /*[out,retval]*/ struct PropertyObject * * val ) = 0;
      virtual HRESULT __stdcall get_Step (
        /*[out,retval]*/ struct Step * * val ) = 0;
      virtual HRESULT __stdcall get_PreviousStep (
        /*[out,retval]*/ struct Step * * val ) = 0;
      virtual HRESULT __stdcall get_NextStep (
        /*[out,retval]*/ struct Step * * val ) = 0;
      virtual HRESULT __stdcall get_Sequence (
        /*[out,retval]*/ struct Sequence * * val ) = 0;
      virtual HRESULT __stdcall get_SequenceFile (
        /*[out,retval]*/ struct SequenceFile * * val ) = 0;
      virtual HRESULT __stdcall get_StepIndex (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall get_PreviousStepIndex (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall get_NextStepIndex (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall put_NextStepIndex (
        /*[in]*/ long val ) = 0;
      virtual HRESULT __stdcall get_SequenceIndex (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall get_StepGroup (
        /*[out,retval]*/ enum StepGroups * val ) = 0;
      virtual HRESULT __stdcall get_Caller (
        /*[out,retval]*/ struct SequenceContext * * val ) = 0;
      virtual HRESULT __stdcall get_CallStackName (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall get_RunTimeErrorMessage (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall get_StepGroupStartedInteractiveExe (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall get_InInteractiveMode (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall get_InteractiveContext (
        /*[out,retval]*/ struct InteractiveContext * * val ) = 0;
      virtual HRESULT __stdcall get_Root (
        /*[out,retval]*/ struct SequenceContext * * val ) = 0;
      virtual HRESULT __stdcall get_Main (
        /*[out,retval]*/ struct SequenceContext * * val ) = 0;
      virtual HRESULT __stdcall get_Thread (
        /*[out,retval]*/ struct Thread * * val ) = 0;
      virtual HRESULT __stdcall get_Execution (
        /*[out,retval]*/ struct Execution * * val ) = 0;
      virtual HRESULT __stdcall get_Report (
        /*[out,retval]*/ struct Report * * val ) = 0;
      virtual HRESULT __stdcall get_ProcessModelClient (
        /*[out,retval]*/ struct SequenceFile * * val ) = 0;
      virtual HRESULT __stdcall get_SelectedFile (
        /*[out,retval]*/ struct SequenceFile * * val ) = 0;
      virtual HRESULT __stdcall get_SelectedExecution (
        /*[out,retval]*/ struct Execution * * val ) = 0;
      virtual HRESULT __stdcall get_Locals (
        /*[out,retval]*/ struct PropertyObject * * val ) = 0;
      virtual HRESULT __stdcall get_Parameters (
        /*[out,retval]*/ struct PropertyObject * * val ) = 0;
      virtual HRESULT __stdcall get_FileGlobals (
        /*[out,retval]*/ struct PropertyObject * * val ) = 0;
      virtual HRESULT __stdcall get_StationGlobals (
        /*[out,retval]*/ struct PropertyObject * * val ) = 0;
      virtual HRESULT __stdcall get_CallStackDepth (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall get_LoopIndex (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall put_LoopIndex (
        /*[in]*/ long val ) = 0;
      virtual HRESULT __stdcall get_Engine (
        /*[out,retval]*/ struct IEngine * * val ) = 0;
      virtual HRESULT __stdcall get_LoopNumPassed (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall put_LoopNumPassed (
        /*[in]*/ long val ) = 0;
      virtual HRESULT __stdcall get_LoopNumFailed (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall put_LoopNumFailed (
        /*[in]*/ long val ) = 0;
      virtual HRESULT __stdcall get_IsProcessModel (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall get_Tracing (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_Tracing (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_SequenceFailed (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_SequenceFailed (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_SelectedSequences (
        /*[out,retval]*/ VARIANT * val ) = 0;
      virtual HRESULT __stdcall get_SelectedSteps (
        /*[out,retval]*/ VARIANT * val ) = 0;
      virtual HRESULT __stdcall get_ApplicationIsEditor (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall get_GotoCleanup (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_GotoCleanup (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_EngineAsDispatch (
        /*[out,retval]*/ IDispatch * * val ) = 0;
      virtual HRESULT __stdcall put_StepGroup (
        /*[in]*/ enum StepGroups val ) = 0;
      virtual HRESULT __stdcall get_Id (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall raw_IsStepExcludedFromExecution (
        /*[in]*/ struct Step * Step,
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall raw_GetRunTimeErrorMessageEx (
        /*[out]*/ BSTR * detailsMsg,
        /*[out]*/ BSTR * errorCodeMsg,
        /*[out]*/ BSTR * locationMsg ) = 0;
      virtual HRESULT __stdcall put_StepIndex (
        /*[in]*/ long val ) = 0;
      virtual HRESULT __stdcall put_PreviousStepIndex (
        /*[in]*/ long val ) = 0;
      virtual HRESULT __stdcall get_CallingStep (
        /*[out,retval]*/ struct Step * * val ) = 0;
      virtual HRESULT __stdcall get_SequenceErrorMessage (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_SequenceErrorMessage (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_SequenceErrorCode (
        /*[out,retval]*/ long * errorCode ) = 0;
      virtual HRESULT __stdcall put_SequenceErrorCode (
        /*[in]*/ long errorCode ) = 0;
      virtual HRESULT __stdcall get_SequenceErrorOccurred (
        /*[out,retval]*/ VARIANT_BOOL * occurredFlag ) = 0;
      virtual HRESULT __stdcall put_SequenceErrorOccurred (
        /*[in]*/ VARIANT_BOOL occurredFlag ) = 0;
      virtual HRESULT __stdcall get_ErrorReported (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_ErrorReported (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_SelectedStepGroup (
        /*[out,retval]*/ enum StepGroups * StepGroup ) = 0;
      virtual HRESULT __stdcall put_SelectedStepGroup (
        /*[in]*/ enum StepGroups StepGroup ) = 0;
      virtual HRESULT __stdcall get_SelectedPropertyObjectFile (
        /*[out,retval]*/ struct PropertyObjectFile * * propertyFile ) = 0;
      virtual HRESULT __stdcall get_CallerDiscardsResults (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall raw_GetRunTimeErrorWinHelpInfo (
        /*[out]*/ long * winHelpID,
        /*[out]*/ BSTR * winHelpFile ) = 0;
      virtual HRESULT __stdcall get_SelectedPropertyObjects (
        /*[out,retval]*/ VARIANT * val ) = 0;
      virtual HRESULT __stdcall get_LoopNumIterations (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall put_LoopNumIterations (
        /*[in]*/ long val ) = 0;
      virtual HRESULT __stdcall get_NumStepsExecuted (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall put_NumStepsExecuted (
        /*[in]*/ long val ) = 0;
      virtual HRESULT __stdcall raw_GetMultipleValues (
        /*[in]*/ BSTR lookupString,
        /*[in]*/ enum PropertyObjectElements elem,
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall raw_SetMultipleValues (
        /*[in]*/ BSTR lookupString,
        /*[in]*/ enum PropertyObjectElements elem,
        /*[in]*/ long multipleValues ) = 0;
      virtual HRESULT __stdcall raw_NewExecution (
        /*[in]*/ struct SequenceFile * sequenceFileParam,
        /*[in]*/ BSTR sequenceNameParam,
        /*[in]*/ struct SequenceFile * processModelParam,
        /*[in]*/ VARIANT_BOOL breakAtFirstStep,
        /*[in]*/ VARIANT_BOOL synchronous,
        /*[in]*/ long executionTypeMaskParam,
        /*[in]*/ struct PropertyObject * sequenceArgsParam,
        /*[out,retval]*/ struct Execution * * val ) = 0;
      virtual HRESULT __stdcall put_ProcessModelClient (
        /*[in]*/ struct SequenceFile * val ) = 0;
};

struct __declspec(uuid("529f6ed0-6681-11d1-93c9-0020af68e893"))
UIMessage : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetExecution))
    ExecutionPtr Execution;
    __declspec(property(get=GetThread))
    ThreadPtr Thread;
    __declspec(property(get=GetNumericData))
    double NumericData;
    __declspec(property(get=GetStringData))
    _bstr_t StringData;
    __declspec(property(get=GetActiveXData))
    IUnknownPtr ActiveXData;
    __declspec(property(get=GetEvent))
    enum UIMessageCodes Event;
    __declspec(property(get=GetIsSynchronous))
    VARIANT_BOOL IsSynchronous;

    //
    // Wrapper methods for error-handling
    //

    PropertyObjectPtr AsPropertyObject ( );
    enum UIMessageCodes GetEvent ( );
    VARIANT_BOOL GetIsSynchronous ( );
    ExecutionPtr GetExecution ( );
    ThreadPtr GetThread ( );
    double GetNumericData ( );
    _bstr_t GetStringData ( );
    IUnknownPtr GetActiveXData ( );
    HRESULT Acknowledge ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_AsPropertyObject (
        /*[out,retval]*/ struct PropertyObject * * val ) = 0;
      virtual HRESULT __stdcall get_Event (
        /*[out,retval]*/ enum UIMessageCodes * val ) = 0;
      virtual HRESULT __stdcall get_IsSynchronous (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall get_Execution (
        /*[out,retval]*/ struct Execution * * val ) = 0;
      virtual HRESULT __stdcall get_Thread (
        /*[out,retval]*/ struct Thread * * val ) = 0;
      virtual HRESULT __stdcall get_NumericData (
        /*[out,retval]*/ double * val ) = 0;
      virtual HRESULT __stdcall get_StringData (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall get_ActiveXData (
        /*[out,retval]*/ IUnknown * * val ) = 0;
      virtual HRESULT __stdcall raw_Acknowledge ( ) = 0;
};

struct __declspec(uuid("33934441-1561-4327-936c-712921d63b48"))
WatchExpression : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetClientSequenceFile,put=PutClientSequenceFile))
    _bstr_t ClientSequenceFile;
    __declspec(property(get=GetSequenceFileScope,put=PutSequenceFileScope))
    _bstr_t SequenceFileScope;
    __declspec(property(get=GetSequenceScope,put=PutSequenceScope))
    _bstr_t SequenceScope;
    __declspec(property(get=GetExecutionScope,put=PutRefExecutionScope))
    ExecutionPtr ExecutionScope;
    __declspec(property(get=GetExpression,put=PutExpression))
    _bstr_t Expression;
    __declspec(property(get=GetNumericFormat,put=PutNumericFormat))
    _bstr_t NumericFormat;
    __declspec(property(get=GetBreakpointType,put=PutBreakpointType))
    enum WatchExpressionBreakType BreakpointType;
    __declspec(property(get=GetUniqueWatchId))
    _bstr_t UniqueWatchId;
    __declspec(property(get=GetUseScopingContext,put=PutUseScopingContext))
    VARIANT_BOOL UseScopingContext;

    //
    // Wrapper methods for error-handling
    //

    PropertyObjectPtr Evaluate (
        struct SequenceContext * seqContext,
        long reserved );
    _bstr_t GetClientSequenceFile ( );
    void PutClientSequenceFile (
        _bstr_t clientFileNameParam );
    _bstr_t GetSequenceFileScope ( );
    void PutSequenceFileScope (
        _bstr_t sequenceFileNameParam );
    _bstr_t GetSequenceScope ( );
    void PutSequenceScope (
        _bstr_t sequenceNameParam );
    ExecutionPtr GetExecutionScope ( );
    void PutRefExecutionScope (
        struct Execution * execParam );
    _bstr_t GetExpression ( );
    void PutExpression (
        _bstr_t val );
    _bstr_t GetNumericFormat ( );
    void PutNumericFormat (
        _bstr_t val );
    enum WatchExpressionBreakType GetBreakpointType ( );
    void PutBreakpointType (
        enum WatchExpressionBreakType val );
    _bstr_t GetUniqueWatchId ( );
    VARIANT_BOOL BreakpointTriggered (
        struct SequenceContext * seqContext );
    VARIANT_BOOL DisplayConfigurationDialog (
        _bstr_t dlgTitle,
        struct SequenceContext * context,
        long dlgOptions );
    VARIANT_BOOL GetUseScopingContext ( );
    void PutUseScopingContext (
        VARIANT_BOOL val );
    SequenceContextPtr GetScopingContext (
        struct SequenceContext * currentSeqContext );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Evaluate (
        /*[in]*/ struct SequenceContext * seqContext,
        /*[in]*/ long reserved,
        /*[out,retval]*/ struct PropertyObject * * val ) = 0;
      virtual HRESULT __stdcall get_ClientSequenceFile (
        /*[out,retval]*/ BSTR * clientFileNameParam ) = 0;
      virtual HRESULT __stdcall put_ClientSequenceFile (
        /*[in]*/ BSTR clientFileNameParam ) = 0;
      virtual HRESULT __stdcall get_SequenceFileScope (
        /*[out,retval]*/ BSTR * sequenceFileNameParam ) = 0;
      virtual HRESULT __stdcall put_SequenceFileScope (
        /*[in]*/ BSTR sequenceFileNameParam ) = 0;
      virtual HRESULT __stdcall get_SequenceScope (
        /*[out,retval]*/ BSTR * sequenceNameParam ) = 0;
      virtual HRESULT __stdcall put_SequenceScope (
        /*[in]*/ BSTR sequenceNameParam ) = 0;
      virtual HRESULT __stdcall get_ExecutionScope (
        /*[out,retval]*/ struct Execution * * execParam ) = 0;
      virtual HRESULT __stdcall putref_ExecutionScope (
        /*[in]*/ struct Execution * execParam ) = 0;
      virtual HRESULT __stdcall get_Expression (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_Expression (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_NumericFormat (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_NumericFormat (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_BreakpointType (
        /*[out,retval]*/ enum WatchExpressionBreakType * val ) = 0;
      virtual HRESULT __stdcall put_BreakpointType (
        /*[in]*/ enum WatchExpressionBreakType val ) = 0;
      virtual HRESULT __stdcall get_UniqueWatchId (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall raw_BreakpointTriggered (
        /*[in]*/ struct SequenceContext * seqContext,
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall raw_DisplayConfigurationDialog (
        /*[in]*/ BSTR dlgTitle,
        /*[in]*/ struct SequenceContext * context,
        /*[in]*/ long dlgOptions,
        /*[out,retval]*/ VARIANT_BOOL * userHitOK ) = 0;
      virtual HRESULT __stdcall get_UseScopingContext (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_UseScopingContext (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall raw_GetScopingContext (
        /*[in]*/ struct SequenceContext * currentSeqContext,
        /*[out,retval]*/ struct SequenceContext * * scopingContext ) = 0;
};

struct __declspec(uuid("933b1124-610f-40bd-bef6-cc93f8ac0b49"))
WatchExpressions : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    WatchExpressionPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    WatchExpressionPtr GetItem (
        const _variant_t & index );
    IUnknownPtr Get_NewEnum ( );
    long GetCount ( );
    WatchExpressionPtr Insert (
        struct WatchExpression * beforePos,
        const _variant_t & clientSequenceFileParam = vtMissing,
        const _variant_t & insertInEngine = vtMissing );
    HRESULT Remove (
        struct WatchExpression * WatchExpression );
    HRESULT Clear ( );
    WatchExpressionsPtr Clone (
        const _variant_t & insertInEngine = vtMissing );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT index,
        /*[out,retval]*/ struct WatchExpression * * WatchExpression ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * enumerator ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall raw_Insert (
        /*[in]*/ struct WatchExpression * beforePos,
        /*[in]*/ VARIANT clientSequenceFileParam,
        /*[in]*/ VARIANT insertInEngine,
        /*[out,retval]*/ struct WatchExpression * * insertedWatchExpression ) = 0;
      virtual HRESULT __stdcall raw_Remove (
        /*[in]*/ struct WatchExpression * WatchExpression ) = 0;
      virtual HRESULT __stdcall raw_Clear ( ) = 0;
      virtual HRESULT __stdcall raw_Clone (
        /*[in]*/ VARIANT insertInEngine,
        /*[out,retval]*/ struct WatchExpressions * * Clone ) = 0;
};

struct __declspec(uuid("c9b8bbfc-3700-4c2f-846f-f5238737585e"))
Locations : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    LocationPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetUserData,put=PutUserData))
    _variant_t UserData;
    __declspec(property(get=GetApplicationSite,put=PutApplicationSite))
    enum ApplicationSites ApplicationSite;
    __declspec(property(get=GetLocationFound,put=PutLocationFound))
    VARIANT_BOOL LocationFound;
    __declspec(property(get=GetLocationNotFoundMessage,put=PutLocationNotFoundMessage))
    _bstr_t LocationNotFoundMessage;
    __declspec(property(get=GetCanDisplayDialog,put=PutCanDisplayDialog))
    VARIANT_BOOL CanDisplayDialog;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    LocationPtr GetItem (
        long index );
    IUnknownPtr Get_NewEnum ( );
    long GetCount ( );
    LocationPtr AddFileLocation (
        struct PropertyObjectFile * file,
        _bstr_t lookupString,
        enum PropertyObjectElements elem,
        long selectionStart,
        long selectionLength );
    LocationPtr AddFileLocationByObject (
        struct PropertyObject * obj,
        enum PropertyObjectElements elem,
        long selectionStart,
        long selectionLength );
    LocationPtr AddExecutionLocation (
        struct SequenceContext * seqContext,
        _bstr_t lookupString,
        enum PropertyObjectElements elem,
        long selectionStart,
        long selectionLength );
    LocationPtr AddExecutionLocationByObject (
        struct SequenceContext * seqContext,
        struct PropertyObject * obj,
        enum PropertyObjectElements elem,
        long selectionStart,
        long selectionLength );
    LocationPtr AddTypeLocation (
        struct PropertyObjectFile * file,
        struct PropertyObject * rootTypeDef,
        _bstr_t lookupString,
        enum PropertyObjectElements elem,
        long selectionStart,
        long selectionLength );
    LocationPtr AddTypeLocationByObject (
        struct PropertyObjectFile * file,
        struct PropertyObject * obj,
        enum PropertyObjectElements elem,
        long selectionStart,
        long selectionLength );
    HRESULT AddLocations (
        struct Locations * locationsToAdd,
        enum CopyLocationsOptions copyLocationOption );
    HRESULT Remove (
        long index );
    HRESULT Clear ( );
    HRESULT GotoLocation (
        long options );
    _variant_t GetUserData ( );
    void PutUserData (
        const _variant_t & val );
    enum ApplicationSites GetApplicationSite ( );
    void PutApplicationSite (
        enum ApplicationSites val );
    VARIANT_BOOL GetLocationFound ( );
    void PutLocationFound (
        VARIANT_BOOL val );
    _bstr_t GetLocationNotFoundMessage ( );
    void PutLocationNotFoundMessage (
        _bstr_t val );
    VARIANT_BOOL GetCanDisplayDialog ( );
    void PutCanDisplayDialog (
        VARIANT_BOOL val );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long index,
        /*[out,retval]*/ struct Location * * val ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * enumerator ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall raw_AddFileLocation (
        /*[in]*/ struct PropertyObjectFile * file,
        /*[in]*/ BSTR lookupString,
        /*[in]*/ enum PropertyObjectElements elem,
        /*[in]*/ long selectionStart,
        /*[in]*/ long selectionLength,
        /*[out,retval]*/ struct Location * * val ) = 0;
      virtual HRESULT __stdcall raw_AddFileLocationByObject (
        /*[in]*/ struct PropertyObject * obj,
        /*[in]*/ enum PropertyObjectElements elem,
        /*[in]*/ long selectionStart,
        /*[in]*/ long selectionLength,
        /*[out,retval]*/ struct Location * * val ) = 0;
      virtual HRESULT __stdcall raw_AddExecutionLocation (
        /*[in]*/ struct SequenceContext * seqContext,
        /*[in]*/ BSTR lookupString,
        /*[in]*/ enum PropertyObjectElements elem,
        /*[in]*/ long selectionStart,
        /*[in]*/ long selectionLength,
        /*[out,retval]*/ struct Location * * val ) = 0;
      virtual HRESULT __stdcall raw_AddExecutionLocationByObject (
        /*[in]*/ struct SequenceContext * seqContext,
        /*[in]*/ struct PropertyObject * obj,
        /*[in]*/ enum PropertyObjectElements elem,
        /*[in]*/ long selectionStart,
        /*[in]*/ long selectionLength,
        /*[out,retval]*/ struct Location * * val ) = 0;
      virtual HRESULT __stdcall raw_AddTypeLocation (
        /*[in]*/ struct PropertyObjectFile * file,
        /*[in]*/ struct PropertyObject * rootTypeDef,
        /*[in]*/ BSTR lookupString,
        /*[in]*/ enum PropertyObjectElements elem,
        /*[in]*/ long selectionStart,
        /*[in]*/ long selectionLength,
        /*[out,retval]*/ struct Location * * val ) = 0;
      virtual HRESULT __stdcall raw_AddTypeLocationByObject (
        /*[in]*/ struct PropertyObjectFile * file,
        /*[in]*/ struct PropertyObject * obj,
        /*[in]*/ enum PropertyObjectElements elem,
        /*[in]*/ long selectionStart,
        /*[in]*/ long selectionLength,
        /*[out,retval]*/ struct Location * * val ) = 0;
      virtual HRESULT __stdcall raw_AddLocations (
        /*[in]*/ struct Locations * locationsToAdd,
        /*[in]*/ enum CopyLocationsOptions copyLocationOption ) = 0;
      virtual HRESULT __stdcall raw_Remove (
        /*[in]*/ long index ) = 0;
      virtual HRESULT __stdcall raw_Clear ( ) = 0;
      virtual HRESULT __stdcall raw_GotoLocation (
        /*[in]*/ long options ) = 0;
      virtual HRESULT __stdcall get_UserData (
        /*[out,retval]*/ VARIANT * val ) = 0;
      virtual HRESULT __stdcall put_UserData (
        /*[in]*/ VARIANT val ) = 0;
      virtual HRESULT __stdcall get_ApplicationSite (
        /*[out,retval]*/ enum ApplicationSites * val ) = 0;
      virtual HRESULT __stdcall put_ApplicationSite (
        /*[in]*/ enum ApplicationSites val ) = 0;
      virtual HRESULT __stdcall get_LocationFound (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_LocationFound (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_LocationNotFoundMessage (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_LocationNotFoundMessage (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_CanDisplayDialog (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_CanDisplayDialog (
        /*[in]*/ VARIANT_BOOL val ) = 0;
};

struct __declspec(uuid("e0c302d5-19c9-4926-9fa8-5a3705a6c3e4"))
OutputMessage : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCategory,put=PutCategory))
    _bstr_t Category;
    __declspec(property(get=GetSeverity,put=PutSeverity))
    enum OutputMessageSeverityTypes Severity;
    __declspec(property(get=GetMessage,put=PutMessage))
    _bstr_t Message;
    __declspec(property(get=GetTextColor,put=PutTextColor))
    OLE_COLOR TextColor;
    __declspec(property(get=GetTimeStamp,put=PutTimeStamp))
    DATE TimeStamp;
    __declspec(property(get=GetIconName,put=PutIconName))
    _bstr_t IconName;
    __declspec(property(get=GetFileLocations))
    LocationsPtr FileLocations;
    __declspec(property(get=GetExecutionLocations))
    LocationsPtr ExecutionLocations;
    __declspec(property(get=GetTimeInSeconds,put=PutTimeInSeconds))
    double TimeInSeconds;
    __declspec(property(get=GetId))
    long Id;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetCategory ( );
    void PutCategory (
        _bstr_t val );
    enum OutputMessageSeverityTypes GetSeverity ( );
    void PutSeverity (
        enum OutputMessageSeverityTypes val );
    _bstr_t GetMessage ( );
    void PutMessage (
        _bstr_t val );
    OLE_COLOR GetTextColor ( );
    void PutTextColor (
        OLE_COLOR val );
    DATE GetTimeStamp ( );
    void PutTimeStamp (
        DATE val );
    _bstr_t GetIconName ( );
    void PutIconName (
        _bstr_t val );
    LocationsPtr GetFileLocations ( );
    HRESULT Post ( );
    LocationsPtr GetExecutionLocations ( );
    double GetTimeInSeconds ( );
    void PutTimeInSeconds (
        double val );
    long GetId ( );
    PropertyObjectPtr AsPropertyObject ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Category (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_Category (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_Severity (
        /*[out,retval]*/ enum OutputMessageSeverityTypes * val ) = 0;
      virtual HRESULT __stdcall put_Severity (
        /*[in]*/ enum OutputMessageSeverityTypes val ) = 0;
      virtual HRESULT __stdcall get_Message (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_Message (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_TextColor (
        /*[out,retval]*/ OLE_COLOR * val ) = 0;
      virtual HRESULT __stdcall put_TextColor (
        /*[in]*/ OLE_COLOR val ) = 0;
      virtual HRESULT __stdcall get_TimeStamp (
        /*[out,retval]*/ DATE * val ) = 0;
      virtual HRESULT __stdcall put_TimeStamp (
        /*[in]*/ DATE val ) = 0;
      virtual HRESULT __stdcall get_IconName (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_IconName (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_FileLocations (
        /*[out,retval]*/ struct Locations * * val ) = 0;
      virtual HRESULT __stdcall raw_Post ( ) = 0;
      virtual HRESULT __stdcall get_ExecutionLocations (
        /*[out,retval]*/ struct Locations * * val ) = 0;
      virtual HRESULT __stdcall get_TimeInSeconds (
        /*[out,retval]*/ double * val ) = 0;
      virtual HRESULT __stdcall put_TimeInSeconds (
        /*[in]*/ double val ) = 0;
      virtual HRESULT __stdcall get_Id (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall raw_AsPropertyObject (
        /*[out,retval]*/ struct PropertyObject * * val ) = 0;
};

struct __declspec(uuid("69609941-7977-4671-bab7-1ba8b0e59511"))
OutputMessages : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    OutputMessagePtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    OutputMessagePtr GetItem (
        const _variant_t & index );
    IUnknownPtr Get_NewEnum ( );
    long GetCount ( );
    HRESULT Add (
        struct OutputMessage * OutputMessage );
    HRESULT Remove (
        long index );
    HRESULT Clear ( );
    HRESULT TransferMessagesToCollection (
        struct OutputMessages * target );
    HRESULT CopyMessagesToCollection (
        struct OutputMessages * target );
    long FindIndex (
        long outputMessageId );
    PropertyObjectPtr ToPropertyObject (
        VARIANT_BOOL storeExecutionLocations );
    HRESULT FromPropertyObject (
        struct PropertyObject * val );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT index,
        /*[out,retval]*/ struct OutputMessage * * OutputMessage ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * enumerator ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall raw_Add (
        /*[in]*/ struct OutputMessage * OutputMessage ) = 0;
      virtual HRESULT __stdcall raw_Remove (
        /*[in]*/ long index ) = 0;
      virtual HRESULT __stdcall raw_Clear ( ) = 0;
      virtual HRESULT __stdcall raw_TransferMessagesToCollection (
        /*[in]*/ struct OutputMessages * target ) = 0;
      virtual HRESULT __stdcall raw_CopyMessagesToCollection (
        /*[in]*/ struct OutputMessages * target ) = 0;
      virtual HRESULT __stdcall raw_FindIndex (
        /*[in]*/ long outputMessageId,
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall raw_ToPropertyObject (
        /*[in]*/ VARIANT_BOOL storeExecutionLocations,
        /*[out,retval]*/ struct PropertyObject * * val ) = 0;
      virtual HRESULT __stdcall raw_FromPropertyObject (
        /*[in]*/ struct PropertyObject * val ) = 0;
};

struct __declspec(uuid("a4834f0b-a6a7-4485-b306-afc7607e81cf"))
EditTimeMenuItems : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    EditTimeMenuItemPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    EditTimeMenuItemPtr GetItem (
        const _variant_t & index );
    IUnknownPtr Get_NewEnum ( );
    long GetCount ( );
    EditTimeMenuItemPtr Insert (
        enum ToolMenuTypes Type,
        long index );
    HRESULT Remove (
        long index );
    HRESULT MoveItem (
        long index,
        long newIndex );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT index,
        /*[out,retval]*/ struct EditTimeMenuItem * * menuItem ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * enumerator ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall raw_Insert (
        /*[in]*/ enum ToolMenuTypes Type,
        /*[in]*/ long index,
        /*[out,retval]*/ struct EditTimeMenuItem * * menuItem ) = 0;
      virtual HRESULT __stdcall raw_Remove (
        /*[in]*/ long index ) = 0;
      virtual HRESULT __stdcall raw_MoveItem (
        /*[in]*/ long index,
        /*[in]*/ long newIndex ) = 0;
};

struct __declspec(uuid("3da95120-a5c4-44ff-aa5b-36e18a90669d"))
EditTimeMenuItem : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetType,put=PutType))
    enum ToolMenuTypes Type;
    __declspec(property(get=GetItemTextExpression,put=PutItemTextExpression))
    _bstr_t ItemTextExpression;
    __declspec(property(get=GetEnabledExpression,put=PutEnabledExpression))
    _bstr_t EnabledExpression;
    __declspec(property(get=GetHiddenExpression,put=PutHiddenExpression))
    _bstr_t HiddenExpression;
    __declspec(property(get=GetSeparatorBefore,put=PutSeparatorBefore))
    VARIANT_BOOL SeparatorBefore;
    __declspec(property(get=GetSequenceFilePath,put=PutSequenceFilePath))
    _bstr_t SequenceFilePath;
    __declspec(property(get=GetSequenceName,put=PutSequenceName))
    _bstr_t SequenceName;
    __declspec(property(get=GetEditsSelectedFile,put=PutEditsSelectedFile))
    VARIANT_BOOL EditsSelectedFile;
    __declspec(property(get=GetCommandPath,put=PutCommandPath))
    _bstr_t CommandPath;
    __declspec(property(get=GetCommandArguments,put=PutCommandArguments))
    _bstr_t CommandArguments;
    __declspec(property(get=GetCommandInitialDirectory,put=PutCommandInitialDirectory))
    _bstr_t CommandInitialDirectory;
    __declspec(property(get=GetEditable,put=PutEditable))
    VARIANT_BOOL Editable;
    __declspec(property(get=GetSubMenuItems))
    EditTimeMenuItemsPtr SubMenuItems;

    //
    // Wrapper methods for error-handling
    //

    enum ToolMenuTypes GetType ( );
    void PutType (
        enum ToolMenuTypes val );
    _bstr_t GetItemTextExpression ( );
    void PutItemTextExpression (
        _bstr_t val );
    _bstr_t GetEnabledExpression ( );
    void PutEnabledExpression (
        _bstr_t val );
    _bstr_t GetHiddenExpression ( );
    void PutHiddenExpression (
        _bstr_t val );
    VARIANT_BOOL GetSeparatorBefore ( );
    void PutSeparatorBefore (
        VARIANT_BOOL val );
    _bstr_t GetSequenceFilePath ( );
    void PutSequenceFilePath (
        _bstr_t val );
    _bstr_t GetSequenceName ( );
    void PutSequenceName (
        _bstr_t val );
    VARIANT_BOOL GetEditsSelectedFile ( );
    void PutEditsSelectedFile (
        VARIANT_BOOL val );
    _bstr_t GetCommandPath ( );
    void PutCommandPath (
        _bstr_t val );
    _bstr_t GetCommandArguments ( );
    void PutCommandArguments (
        _bstr_t val );
    _bstr_t GetCommandInitialDirectory ( );
    void PutCommandInitialDirectory (
        _bstr_t val );
    VARIANT_BOOL GetEditable ( );
    void PutEditable (
        VARIANT_BOOL val );
    EditTimeMenuItemsPtr GetSubMenuItems ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum ToolMenuTypes * val ) = 0;
      virtual HRESULT __stdcall put_Type (
        /*[in]*/ enum ToolMenuTypes val ) = 0;
      virtual HRESULT __stdcall get_ItemTextExpression (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_ItemTextExpression (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_EnabledExpression (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_EnabledExpression (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_HiddenExpression (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_HiddenExpression (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_SeparatorBefore (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_SeparatorBefore (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_SequenceFilePath (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_SequenceFilePath (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_SequenceName (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_SequenceName (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_EditsSelectedFile (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_EditsSelectedFile (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_CommandPath (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_CommandPath (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_CommandArguments (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_CommandArguments (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_CommandInitialDirectory (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_CommandInitialDirectory (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_Editable (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_Editable (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_SubMenuItems (
        /*[out,retval]*/ struct EditTimeMenuItems * * val ) = 0;
};

struct __declspec(uuid("a3fee070-b084-4180-b146-f2fd0123a4c0"))
RunTimeMenuItems : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    RunTimeMenuItemPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    RunTimeMenuItemPtr GetItem (
        const _variant_t & index );
    IUnknownPtr Get_NewEnum ( );
    long GetCount ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT index,
        /*[out,retval]*/ struct RunTimeMenuItem * * menuItem ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * enumerator ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * val ) = 0;
};

struct __declspec(uuid("69ce5662-711d-4f78-9b8a-d84d6866ca06"))
RunTimeMenuItem : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetText))
    _bstr_t Text;
    __declspec(property(get=GetItemEnabled))
    VARIANT_BOOL ItemEnabled;
    __declspec(property(get=GetSubMenuItems))
    RunTimeMenuItemsPtr SubMenuItems;
    __declspec(property(get=GetSeparatorBefore))
    VARIANT_BOOL SeparatorBefore;
    __declspec(property(get=GetEditsSelectedFile))
    VARIANT_BOOL EditsSelectedFile;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetText ( );
    VARIANT_BOOL GetItemEnabled ( );
    HRESULT InvokeItem (
        const _variant_t & editArgsParam,
        long reserved );
    RunTimeMenuItemsPtr GetSubMenuItems ( );
    VARIANT_BOOL GetSeparatorBefore ( );
    VARIANT_BOOL GetEditsSelectedFile ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall get_ItemEnabled (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall raw_InvokeItem (
        /*[in]*/ VARIANT editArgsParam,
        /*[in]*/ long reserved ) = 0;
      virtual HRESULT __stdcall get_SubMenuItems (
        /*[out,retval]*/ struct RunTimeMenuItems * * val ) = 0;
      virtual HRESULT __stdcall get_SeparatorBefore (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall get_EditsSelectedFile (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
};

struct __declspec(uuid("8f02b14c-d72e-4ab7-b54e-e8716680bec8"))
SequenceFileDiffer : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetDifferencesRoot))
    SequenceFileDifferenceSectionPtr DifferencesRoot;

    //
    // Wrapper methods for error-handling
    //

    SequenceFileDifferenceSectionPtr GetDifferencesRoot ( );
    long UpdateDifferences (
        struct SequenceFileDifferenceSection * differSection );
    HRESULT DiffSequenceFiles ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_DifferencesRoot (
        /*[out,retval]*/ struct SequenceFileDifferenceSection * * val ) = 0;
      virtual HRESULT __stdcall raw_UpdateDifferences (
        /*[in]*/ struct SequenceFileDifferenceSection * differSection,
        /*[out,retval]*/ long * returnVal ) = 0;
      virtual HRESULT __stdcall raw_DiffSequenceFiles ( ) = 0;
};

struct __declspec(uuid("4223bc15-3914-4773-a5f0-ff9d301b2b8c"))
SequenceFileDifferenceSection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetSmallIconIndex))
    long SmallIconIndex;
    __declspec(property(get=GetFile1Section))
    PropertyObjectPtr File1Section;
    __declspec(property(get=GetFile2Section))
    PropertyObjectPtr File2Section;
    __declspec(property(get=GetFile1Location))
    _bstr_t File1Location;
    __declspec(property(get=GetFile2Location))
    _bstr_t File2Location;
    __declspec(property(get=GetFile1Differences))
    SAFEARRAY * File1Differences;
    __declspec(property(get=GetFile2Differences))
    SAFEARRAY * File2Differences;
    __declspec(property(get=GetNumberOfDifferenceGroups))
    long NumberOfDifferenceGroups;
    __declspec(property(get=GetNumberOfDifferences))
    long NumberOfDifferences;
    __declspec(property(get=GetTotalNumberOfDifferences))
    long TotalNumberOfDifferences;
    __declspec(property(get=GetSubSections))
    SequenceFileDifferenceSectionsPtr SubSections;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetName ( );
    long GetSmallIconIndex ( );
    PropertyObjectPtr GetFile1Section ( );
    PropertyObjectPtr GetFile2Section ( );
    _bstr_t GetFile1Location ( );
    _bstr_t GetFile2Location ( );
    SAFEARRAY * GetFile1Differences ( );
    SAFEARRAY * GetFile2Differences ( );
    long GetNumberOfDifferenceGroups ( );
    HRESULT GetDifferenceGroup (
        long index,
        SAFEARRAY * * file1DifferenceGroup,
        SAFEARRAY * * file2DifferenceGroup );
    long GetNumberOfDifferences ( );
    long GetTotalNumberOfDifferences ( );
    SequenceFileDifferenceSectionsPtr GetSubSections ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall get_SmallIconIndex (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall get_File1Section (
        /*[out,retval]*/ struct PropertyObject * * val ) = 0;
      virtual HRESULT __stdcall get_File2Section (
        /*[out,retval]*/ struct PropertyObject * * val ) = 0;
      virtual HRESULT __stdcall get_File1Location (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall get_File2Location (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall get_File1Differences (
        /*[out,retval]*/ SAFEARRAY * * val ) = 0;
      virtual HRESULT __stdcall get_File2Differences (
        /*[out,retval]*/ SAFEARRAY * * val ) = 0;
      virtual HRESULT __stdcall get_NumberOfDifferenceGroups (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall raw_GetDifferenceGroup (
        /*[in]*/ long index,
        /*[out]*/ SAFEARRAY * * file1DifferenceGroup,
        /*[out]*/ SAFEARRAY * * file2DifferenceGroup ) = 0;
      virtual HRESULT __stdcall get_NumberOfDifferences (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall get_TotalNumberOfDifferences (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall get_SubSections (
        /*[out,retval]*/ struct SequenceFileDifferenceSections * * val ) = 0;
};

struct __declspec(uuid("4920e6d7-28f8-4ef1-a575-191ddfd4bc1d"))
SequenceFileDifferenceSections : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    SequenceFileDifferenceSectionPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    SequenceFileDifferenceSectionPtr GetItem (
        const _variant_t & index );
    IUnknownPtr Get_NewEnum ( );
    long GetCount ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT index,
        /*[out,retval]*/ struct SequenceFileDifferenceSection * * differenceSectionObject ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * enumerator ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * numberOfSections ) = 0;
};

struct __declspec(uuid("a071c978-6f28-40f6-be02-372509e82322"))
UndoItemCreator : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetHaveEditsBeenMade))
    VARIANT_BOOL HaveEditsBeenMade;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetHaveEditsBeenMade ( );
    HRESULT BeginEdit (
        struct PropertyObject * obj );
    HRESULT EndEdit ( );
    HRESULT BeginBatchEdit (
        SAFEARRAY * objs );
    HRESULT EndBatchEdit ( );
    IUndoItemPtr CreateAndPostUndoItem (
        long options,
        enum ApplicationSites locationsApplicationSite,
        const _variant_t & locationsUserData = vtMissing );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_HaveEditsBeenMade (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall raw_BeginEdit (
        /*[in]*/ struct PropertyObject * obj ) = 0;
      virtual HRESULT __stdcall raw_EndEdit ( ) = 0;
      virtual HRESULT __stdcall raw_BeginBatchEdit (
        /*[in]*/ SAFEARRAY * objs ) = 0;
      virtual HRESULT __stdcall raw_EndBatchEdit ( ) = 0;
      virtual HRESULT __stdcall raw_CreateAndPostUndoItem (
        /*[in]*/ long options,
        /*[in]*/ enum ApplicationSites locationsApplicationSite,
        /*[in]*/ VARIANT locationsUserData,
        /*[out,retval]*/ struct IUndoItem * * val ) = 0;
};

struct __declspec(uuid("3d76a5a7-7d09-4399-b5d6-d2bc1639ca1e"))
IUndoItem : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEditedFile))
    PropertyObjectFilePtr EditedFile;
    __declspec(property(get=GetEditedObjects))
    SAFEARRAY * EditedObjects;
    __declspec(property(get=GetUndoDescription))
    _bstr_t UndoDescription;
    __declspec(property(get=GetRedoDescription))
    _bstr_t RedoDescription;
    __declspec(property(get=GetCanUndo))
    VARIANT_BOOL CanUndo;
    __declspec(property(get=GetCanRedo))
    VARIANT_BOOL CanRedo;
    __declspec(property(get=GetUndoEditKind))
    enum EditKinds UndoEditKind;
    __declspec(property(get=GetRedoEditKind))
    enum EditKinds RedoEditKind;
    __declspec(property(get=GetUndoStack,put=PutUndoStack))
    UndoStackPtr UndoStack;
    __declspec(property(get=GetRefreshEnabled,put=PutRefreshEnabled))
    VARIANT_BOOL RefreshEnabled;
    __declspec(property(get=GetPreEditLocations))
    LocationsPtr PreEditLocations;
    __declspec(property(get=GetPostEditLocations))
    LocationsPtr PostEditLocations;
    __declspec(property(get=GetPreEditChangeCount))
    long PreEditChangeCount;
    __declspec(property(get=GetPostEditChangeCount))
    long PostEditChangeCount;

    //
    // Wrapper methods for error-handling
    //

    PropertyObjectFilePtr GetEditedFile ( );
    SAFEARRAY * GetEditedObjects ( );
    _bstr_t GetUndoDescription ( );
    _bstr_t GetRedoDescription ( );
    VARIANT_BOOL GetCanUndo ( );
    VARIANT_BOOL GetCanRedo ( );
    enum EditKinds GetUndoEditKind ( );
    enum EditKinds GetRedoEditKind ( );
    void PutUndoStack (
        struct UndoStack * val );
    UndoStackPtr GetUndoStack ( );
    void PutRefreshEnabled (
        VARIANT_BOOL val );
    VARIANT_BOOL GetRefreshEnabled ( );
    LocationsPtr GetPreEditLocations ( );
    LocationsPtr GetPostEditLocations ( );
    long GetPreEditChangeCount ( );
    long GetPostEditChangeCount ( );
    HRESULT Undo ( );
    HRESULT Redo ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_EditedFile (
        /*[out,retval]*/ struct PropertyObjectFile * * val ) = 0;
      virtual HRESULT __stdcall get_EditedObjects (
        /*[out,retval]*/ SAFEARRAY * * val ) = 0;
      virtual HRESULT __stdcall get_UndoDescription (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall get_RedoDescription (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall get_CanUndo (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall get_CanRedo (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall get_UndoEditKind (
        /*[out,retval]*/ enum EditKinds * val ) = 0;
      virtual HRESULT __stdcall get_RedoEditKind (
        /*[out,retval]*/ enum EditKinds * val ) = 0;
      virtual HRESULT __stdcall put_UndoStack (
        /*[in]*/ struct UndoStack * val ) = 0;
      virtual HRESULT __stdcall get_UndoStack (
        /*[out,retval]*/ struct UndoStack * * val ) = 0;
      virtual HRESULT __stdcall put_RefreshEnabled (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_RefreshEnabled (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall get_PreEditLocations (
        /*[out,retval]*/ struct Locations * * val ) = 0;
      virtual HRESULT __stdcall get_PostEditLocations (
        /*[out,retval]*/ struct Locations * * val ) = 0;
      virtual HRESULT __stdcall get_PreEditChangeCount (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall get_PostEditChangeCount (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall raw_Undo ( ) = 0;
      virtual HRESULT __stdcall raw_Redo ( ) = 0;
};

struct __declspec(uuid("a5202cc1-e147-498f-850a-aa4bfbf888b3"))
UndoItems : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IUndoItemPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetTopItem))
    IUndoItemPtr TopItem;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IUndoItemPtr GetItem (
        long index );
    IUnknownPtr Get_NewEnum ( );
    IUndoItemPtr Remove (
        long index );
    long GetCount ( );
    IUndoItemPtr GetTopItem ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long index,
        /*[out,retval]*/ struct IUndoItem * * val ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * enumerator ) = 0;
      virtual HRESULT __stdcall raw_Remove (
        /*[in]*/ long index,
        /*[out,retval]*/ struct IUndoItem * * val ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall get_TopItem (
        /*[out,retval]*/ struct IUndoItem * * val ) = 0;
};

struct __declspec(uuid("1156cb21-82b9-4d4f-9e0c-3f6d6ad97b88"))
UndoStack : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCanUndo))
    VARIANT_BOOL CanUndo;
    __declspec(property(get=GetCanRedo))
    VARIANT_BOOL CanRedo;
    __declspec(property(get=GetUndoItems))
    UndoItemsPtr UndoItems;
    __declspec(property(get=GetRedoItems))
    UndoItemsPtr RedoItems;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetUndoDescription (
        _bstr_t acceleratorPrefix );
    _bstr_t GetRedoDescription (
        _bstr_t acceleratorPrefix );
    VARIANT_BOOL GetCanUndo ( );
    VARIANT_BOOL GetCanRedo ( );
    HRESULT Undo ( );
    HRESULT Redo ( );
    HRESULT Push (
        struct IUndoItem * Item );
    HRESULT Clear ( );
    HRESULT AggregateTopUndoItems (
        long numItemsToAggregate,
        _bstr_t aggregateItemDescription,
        struct Locations * aggregatePreEditLocations,
        struct Locations * aggregatePostEditLocations );
    UndoItemsPtr GetUndoItems ( );
    UndoItemsPtr GetRedoItems ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_GetUndoDescription (
        /*[in]*/ BSTR acceleratorPrefix,
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall raw_GetRedoDescription (
        /*[in]*/ BSTR acceleratorPrefix,
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall get_CanUndo (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall get_CanRedo (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall raw_Undo ( ) = 0;
      virtual HRESULT __stdcall raw_Redo ( ) = 0;
      virtual HRESULT __stdcall raw_Push (
        /*[in]*/ struct IUndoItem * Item ) = 0;
      virtual HRESULT __stdcall raw_Clear ( ) = 0;
      virtual HRESULT __stdcall raw_AggregateTopUndoItems (
        /*[in]*/ long numItemsToAggregate,
        /*[in]*/ BSTR aggregateItemDescription,
        /*[in]*/ struct Locations * aggregatePreEditLocations,
        /*[in]*/ struct Locations * aggregatePostEditLocations ) = 0;
      virtual HRESULT __stdcall get_UndoItems (
        /*[out,retval]*/ struct UndoItems * * val ) = 0;
      virtual HRESULT __stdcall get_RedoItems (
        /*[out,retval]*/ struct UndoItems * * val ) = 0;
};

} // namespace TS

#pragma pack(pop)
