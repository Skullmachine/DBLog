// Created by Microsoft (R) C/C++ Compiler Version 10.00.40219.01 (de424c57).
//
// c:\program files (x86)\national instruments\teststand 4.2.1\components\models\teststandmodels\database\dblog\debug\tsui.tlh
//
// C++ source equivalent of Win32 type library ..\..\bin\tsui.dll
// compiler-generated file created 03/17/16 at 23:41:59 - DO NOT EDIT!

//
// Cross-referenced type libraries:
//
//

#pragma once
#pragma pack(push, 8)

#include <comdef.h>

namespace TSUI {

//
// Forward references and typedefs
//

struct __declspec(uuid("03b81820-510e-42c6-93b8-cfa253794662"))
/* LIBID */ __TSUI;
enum ListBarButtonStyles;
enum SeqViewColumnTypes;
enum ToolBarTextStyles;
enum StatusBarPaneStyles;
enum ComboBoxStyles;
enum AlignmentStyles;
enum BorderStyles;
enum EdgeStyles;
enum MousePointerStyles;
enum ShortcutKeys;
enum BooleanOrPreference;
enum ScrollBars;
enum TextTypes;
enum ErrorCheck;
enum ButtonSizing;
enum ReloadFiles;
enum QueryCloseExecutionOptions;
enum QueryShutdownOptions;
enum FontSources;
enum ExecutionDisplayReasons;
enum SequenceFileDisplayReasons;
enum CheckBoxStyles;
enum ContentAlignmentStyles;
enum SpecifyExpressionEditButton;
enum ExpressionEditStyles;
enum QueryReloadSequenceFileOptions;
enum StepGroupModes;
enum ExpressionEditButtonStyles;
enum ConnectionActivityTypes;
enum ContextChangedReasons;
enum AutomaticallyReloadModifiedFilesOptions;
enum ButtonStyles;
enum TextImageRelations;
enum ButtonActionStyles;
enum ProcessCommandLineErrors;
enum AutoSizingOptions;
struct __declspec(uuid("a6fa998e-98ef-11d2-93b7-00a02411ebe6"))
/* dual interface */ IButton;
struct __declspec(uuid("a6fa9990-98ef-11d2-93b7-00a02411ebe6"))
/* dispinterface */ _ButtonEvents;
struct __declspec(uuid("fdd24392-1132-424d-bf4b-77f0f0801f7a"))
/* dual interface */ IExpressionEdit;
struct __declspec(uuid("bce69cf9-1341-4705-9ecc-23e033f2e101"))
/* dual interface */ Borders;
struct __declspec(uuid("d4cf257f-9009-429f-be92-a05ed28a9add"))
/* dual interface */ ExpressionEditButtons;
struct __declspec(uuid("4b0952aa-1842-4ca0-94b6-2ec39d3951d1"))
/* dual interface */ ExpressionEditButton;
struct __declspec(uuid("8aa16559-aff3-404d-b722-bff4c7179ac3"))
/* dual interface */ ExpressionEditComboBoxItems;
struct __declspec(uuid("4997b4c1-f5b6-4643-b38e-5d71b6e3b52b"))
/* dual interface */ ExpressionEditComboBoxItem;
struct __declspec(uuid("e9da925c-d4a5-4c9b-9323-49f15b976cdb"))
/* dispinterface */ _ExpressionEditEvents;
struct __declspec(uuid("bcf787b9-790e-4cac-b4d8-dff602a86e2d"))
/* dual interface */ ListBarPageItem;
struct __declspec(uuid("49dc18bd-6acb-4792-8dde-18b04c043d83"))
/* dual interface */ ListBarPageItems;
struct __declspec(uuid("ca37207a-ae9d-4c6a-b28a-10469026a7d4"))
/* dual interface */ ListBarPage;
struct __declspec(uuid("9f16ad4c-15d8-4180-be66-ab62c64d9601"))
/* dual interface */ ListBarPages;
struct __declspec(uuid("5ca55ac1-a7f1-470c-9094-3dbeefe0acf9"))
/* dual interface */ IListBar;
struct __declspec(uuid("ab3ba461-de0c-4411-bc41-32e77802780c"))
/* dispinterface */ _ListBarEvents;
struct __declspec(uuid("253db546-eade-4e85-aa44-61e63f7327cd"))
/* dual interface */ StatusBarPane;
struct __declspec(uuid("48070f99-ffb0-4470-9f91-a3ace5070f8d"))
/* dual interface */ StatusBarPanes;
struct __declspec(uuid("9ce1ada4-09a8-4158-b1e2-f3489316e12b"))
/* dual interface */ IStatusBar;
struct __declspec(uuid("e605428d-eb10-4dae-b6a3-52173e45ea5f"))
/* dispinterface */ _StatusBarEvents;
struct __declspec(uuid("be676080-61ac-11d5-8efa-0050dac50018"))
/* dual interface */ IComboBox;
struct __declspec(uuid("be676084-61ac-11d5-8efa-0050dac50018"))
/* dispinterface */ _ComboBoxEvents;
struct __declspec(uuid("a6fa998b-98ef-11d2-93b7-00a02411ebe6"))
/* dual interface */ IListBox;
struct __declspec(uuid("e6966808-139e-4032-830b-ca5e1a92c6cf"))
/* dual interface */ ListBoxColumns;
struct __declspec(uuid("64c16c61-3062-412f-a3b3-297c46359e3c"))
/* dual interface */ ListBoxColumn;
struct __declspec(uuid("a6fa998d-98ef-11d2-93b7-00a02411ebe6"))
/* dispinterface */ _ListBoxEvents;
struct __declspec(uuid("c50fd121-99bf-11d2-93b7-00a02411ebe6"))
/* dual interface */ ILabel;
struct __declspec(uuid("c50fd123-99bf-11d2-93b7-00a02411ebe6"))
/* dispinterface */ _LabelEvents;
struct __declspec(uuid("f54f4eba-497c-11d5-8eeb-0050dac50018"))
/* dual interface */ IReportView;
struct __declspec(uuid("48ba0500-4240-4d0d-b035-492f5fc55e6b"))
/* dispinterface */ _ReportViewEvents;
struct __declspec(uuid("eab745c9-31be-48ea-9725-b0404628adcd"))
/* dual interface */ SeqViewColumn;
struct __declspec(uuid("1e2bcc77-7d62-4906-abb8-2b7bcbef441c"))
/* dual interface */ SeqViewColumns;
struct __declspec(uuid("34b7e073-5533-4a8a-a651-1230c0e6500a"))
/* dual interface */ ISequenceView;
struct __declspec(uuid("00fd8004-a80b-4e62-b7b9-2d824e77e68c"))
/* dispinterface */ _SequenceViewEvents;
struct __declspec(uuid("716aae6d-648d-490d-9b7e-a46ba1282a9a"))
/* dual interface */ SequenceFiles;
struct __declspec(uuid("d6dd2bc7-e039-4a49-bae3-f40741fccb3e"))
/* dual interface */ Executions;
struct __declspec(uuid("118435e6-7858-4797-9957-171a95e95a2b"))
/* dual interface */ EntryPoint;
struct __declspec(uuid("7a948c8c-1956-4dca-a293-f285ca3bdcb8"))
/* dual interface */ EntryPoints;
struct __declspec(uuid("817d7c9a-8f4b-4bb7-aea6-e118ceb0f823"))
/* dual interface */ ISequenceFileViewMgr;
struct __declspec(uuid("48318ebf-0fff-4750-94b7-a4e10643460a"))
/* dual interface */ Command;
struct __declspec(uuid("0b2d723f-0a05-40fe-a0fc-362ef92a1dcb"))
/* dual interface */ IExecutionViewMgr;
struct __declspec(uuid("f1558bb2-66ec-46de-86f1-7aa80f65f356"))
/* dual interface */ Commands;
struct __declspec(uuid("d0743b7d-50bf-409d-87df-49983721dfdc"))
/* dual interface */ IApplicationMgr;
struct __declspec(uuid("40d0b561-b231-4a3c-80b8-0f4f0b76b18c"))
/* dispinterface */ _ApplicationMgrEvents;
struct __declspec(uuid("868bf492-2c67-497c-8b53-9f5407c77236"))
/* dispinterface */ _SequenceFileViewMgrEvents;
struct __declspec(uuid("f0d4f1ee-eec3-4f36-9b50-9beb2321804a"))
/* dispinterface */ _ExecutionViewMgrEvents;
struct __declspec(uuid("661bd29b-11cc-4666-b4b8-c9de53e5f1ab"))
/* dual interface */ ICheckBox;
struct __declspec(uuid("19551b0f-e624-4e2a-9073-03fa7b50899d"))
/* dispinterface */ _CheckBoxEvents;
struct __declspec(uuid("aabdf204-cd20-4fdf-822e-5db98192a4b9"))
/* dual interface */ IVariablesView;
struct __declspec(uuid("53456b04-11fa-4127-a941-626c0ba61c95"))
/* dispinterface */ _VariablesViewEvents;
struct __declspec(uuid("7575abc2-9520-4ef4-9df8-2c33b6da18bc"))
/* dual interface */ IInsertionPalette;
struct __declspec(uuid("56b8e2d2-1795-4644-ad26-639f29e32b78"))
/* dual interface */ InsertionPalettePages;
struct __declspec(uuid("80abaef2-fde0-4178-b2bd-bf7ab69bf5b6"))
/* dual interface */ InsertionPalettePage;
struct __declspec(uuid("4f7ea0b7-3db3-49b2-9dc2-264659a50890"))
/* dispinterface */ _InsertionPaletteEvents;
struct /* coclass */ ApplicationMgr;
struct /* coclass */ SequenceFileViewMgr;
struct /* coclass */ ExecutionViewMgr;
struct /* coclass */ Button;
struct /* coclass */ ExpressionEdit;
struct /* coclass */ ListBar;
struct /* coclass */ StatusBar;
struct /* coclass */ Label;
struct /* coclass */ ComboBox;
struct /* coclass */ ListBox;
struct /* coclass */ ReportView;
struct /* coclass */ SequenceView;
struct /* coclass */ CheckBox;
struct /* coclass */ VariablesView;
struct /* coclass */ InsertionPalette;

//
// Smart pointer typedef declarations
//

_COM_SMARTPTR_TYPEDEF(IButton, __uuidof(IButton));
_COM_SMARTPTR_TYPEDEF(_ButtonEvents, __uuidof(_ButtonEvents));
_COM_SMARTPTR_TYPEDEF(Borders, __uuidof(Borders));
_COM_SMARTPTR_TYPEDEF(ExpressionEditButton, __uuidof(ExpressionEditButton));
_COM_SMARTPTR_TYPEDEF(ExpressionEditButtons, __uuidof(ExpressionEditButtons));
_COM_SMARTPTR_TYPEDEF(ExpressionEditComboBoxItem, __uuidof(ExpressionEditComboBoxItem));
_COM_SMARTPTR_TYPEDEF(ExpressionEditComboBoxItems, __uuidof(ExpressionEditComboBoxItems));
_COM_SMARTPTR_TYPEDEF(IExpressionEdit, __uuidof(IExpressionEdit));
_COM_SMARTPTR_TYPEDEF(_ExpressionEditEvents, __uuidof(_ExpressionEditEvents));
_COM_SMARTPTR_TYPEDEF(ListBarPageItem, __uuidof(ListBarPageItem));
_COM_SMARTPTR_TYPEDEF(ListBarPageItems, __uuidof(ListBarPageItems));
_COM_SMARTPTR_TYPEDEF(ListBarPage, __uuidof(ListBarPage));
_COM_SMARTPTR_TYPEDEF(ListBarPages, __uuidof(ListBarPages));
_COM_SMARTPTR_TYPEDEF(IListBar, __uuidof(IListBar));
_COM_SMARTPTR_TYPEDEF(_ListBarEvents, __uuidof(_ListBarEvents));
_COM_SMARTPTR_TYPEDEF(StatusBarPane, __uuidof(StatusBarPane));
_COM_SMARTPTR_TYPEDEF(StatusBarPanes, __uuidof(StatusBarPanes));
_COM_SMARTPTR_TYPEDEF(IStatusBar, __uuidof(IStatusBar));
_COM_SMARTPTR_TYPEDEF(_StatusBarEvents, __uuidof(_StatusBarEvents));
_COM_SMARTPTR_TYPEDEF(IComboBox, __uuidof(IComboBox));
_COM_SMARTPTR_TYPEDEF(_ComboBoxEvents, __uuidof(_ComboBoxEvents));
_COM_SMARTPTR_TYPEDEF(ListBoxColumn, __uuidof(ListBoxColumn));
_COM_SMARTPTR_TYPEDEF(ListBoxColumns, __uuidof(ListBoxColumns));
_COM_SMARTPTR_TYPEDEF(IListBox, __uuidof(IListBox));
_COM_SMARTPTR_TYPEDEF(_ListBoxEvents, __uuidof(_ListBoxEvents));
_COM_SMARTPTR_TYPEDEF(ILabel, __uuidof(ILabel));
_COM_SMARTPTR_TYPEDEF(_LabelEvents, __uuidof(_LabelEvents));
_COM_SMARTPTR_TYPEDEF(IReportView, __uuidof(IReportView));
_COM_SMARTPTR_TYPEDEF(_ReportViewEvents, __uuidof(_ReportViewEvents));
_COM_SMARTPTR_TYPEDEF(SeqViewColumn, __uuidof(SeqViewColumn));
_COM_SMARTPTR_TYPEDEF(SeqViewColumns, __uuidof(SeqViewColumns));
_COM_SMARTPTR_TYPEDEF(ISequenceView, __uuidof(ISequenceView));
_COM_SMARTPTR_TYPEDEF(_SequenceViewEvents, __uuidof(_SequenceViewEvents));
_COM_SMARTPTR_TYPEDEF(SequenceFiles, __uuidof(SequenceFiles));
_COM_SMARTPTR_TYPEDEF(Executions, __uuidof(Executions));
_COM_SMARTPTR_TYPEDEF(EntryPoint, __uuidof(EntryPoint));
_COM_SMARTPTR_TYPEDEF(EntryPoints, __uuidof(EntryPoints));
_COM_SMARTPTR_TYPEDEF(_ApplicationMgrEvents, __uuidof(_ApplicationMgrEvents));
_COM_SMARTPTR_TYPEDEF(_SequenceFileViewMgrEvents, __uuidof(_SequenceFileViewMgrEvents));
_COM_SMARTPTR_TYPEDEF(_ExecutionViewMgrEvents, __uuidof(_ExecutionViewMgrEvents));
_COM_SMARTPTR_TYPEDEF(ICheckBox, __uuidof(ICheckBox));
_COM_SMARTPTR_TYPEDEF(_CheckBoxEvents, __uuidof(_CheckBoxEvents));
_COM_SMARTPTR_TYPEDEF(IVariablesView, __uuidof(IVariablesView));
_COM_SMARTPTR_TYPEDEF(_VariablesViewEvents, __uuidof(_VariablesViewEvents));
_COM_SMARTPTR_TYPEDEF(InsertionPalettePage, __uuidof(InsertionPalettePage));
_COM_SMARTPTR_TYPEDEF(InsertionPalettePages, __uuidof(InsertionPalettePages));
_COM_SMARTPTR_TYPEDEF(IInsertionPalette, __uuidof(IInsertionPalette));
_COM_SMARTPTR_TYPEDEF(_InsertionPaletteEvents, __uuidof(_InsertionPaletteEvents));
_COM_SMARTPTR_TYPEDEF(ISequenceFileViewMgr, __uuidof(ISequenceFileViewMgr));
_COM_SMARTPTR_TYPEDEF(Command, __uuidof(Command));
_COM_SMARTPTR_TYPEDEF(IExecutionViewMgr, __uuidof(IExecutionViewMgr));
_COM_SMARTPTR_TYPEDEF(Commands, __uuidof(Commands));
_COM_SMARTPTR_TYPEDEF(IApplicationMgr, __uuidof(IApplicationMgr));

//
// Type library items
//

enum ListBarButtonStyles
{
    ListBarButtonStyle_3D = 1,
    ListBarButtonStyle_Flat = 2
};
    const long ListBarPageStyle_FrameSelectedItem = 1;
    const long ListBarPageStyle_Tracking = 2;
    const long ListBarPageStyle_IconsOnTop = 4;

enum SeqViewColumnTypes
{
    SeqViewColumnType_Name = 1,
    SeqViewColumnType_StepIndex = 2,
    SeqViewColumnType_Description = 3,
    SeqViewColumnType_ExecutionFlow = 4,
    SeqViewColumnType_Status = 5,
    SeqViewColumnType_Expression = 6,
    SeqViewColumnType_StepSettings = 4,
    SeqViewColumnType_Comment = 7,
    SeqViewColumnType_Requirements = 8
};

enum ToolBarTextStyles
{
    ToolBarTextStyle_TextBelow = 0,
    ToolBarTextStyle_TextRight = 1,
    ToolBarTextStyle_TextInvisible = 2
};
    const long ReportViewButton_Back = 1;
    const long ReportViewButton_Forward = 2;
    const long ReportViewButton_Stop = 4;
    const long ReportViewButton_Refresh = 8;
    const long ReportViewButton_Home = 16;
    const long ReportViewButton_ExternalViewer = 32;
    const long ReportViewButton_Print = 64;
    const long ReportViewButton_FontSize = 128;

enum StatusBarPaneStyles
{
    StatusBarPaneStyle_Etched = 1,
    StatusBarPaneStyle_Flat = 2,
    StatusBarPaneStyle_Raised = 3
};

enum ComboBoxStyles
{
    ComboBoxStyle_DropDownCombo = 0,
    ComboBoxStyle_DropDownList = 2
};

enum AlignmentStyles
{
    AlignmentStyle_LeftJustify = 0,
    AlignmentStyle_RightJustify = 1,
    AlignmentStyle_Center = 2
};

enum BorderStyles
{
    BorderStyle_NoBorder = 0,
    BorderStyle_Fixed3D = 1,
    BorderStyle_FixedSingle = 2
};

enum EdgeStyles
{
    EdgeStyle_Flat = 1,
    EdgeStyle_FixedSingle = 2,
    EdgeStyle_ControlEdge = 3,
    EdgeStyle_Raised = 4,
    EdgeStyle_Inset = 5
};
    const long WhichBorder_None = 0;
    const long WhichBorder_Top = 1;
    const long WhichBorder_Bottom = 2;
    const long WhichBorder_Left = 4;
    const long WhichBorder_Right = 8;

enum MousePointerStyles
{
    MousePointer_Default = 0,
    MousePointer_Arrow = 1,
    MousePointer_Crosshair = 2,
    MousePointer_Ibeam = 3,
    MousePointer_SizeNESW = 4,
    MousePointer_SizeNS = 5,
    MousePointer_SizeNWSE = 6,
    MousePointer_SizeWE = 7,
    MousePointer_UpArrow = 8,
    MousePointer_Hourglass = 9,
    MousePointer_NoDrop = 10,
    MousePointer_ArrowHourglass = 11,
    MousePointer_ArrowQuestion = 12,
    MousePointer_SizeAll = 13,
    MousePointer_Custom = 99
};
    const long ShortcutModifier_NotAModifier = 0;
    const long ShortcutModifier_Shift = 1;
    const long ShortcutModifier_Control = 2;
    const long ShortcutModifier_Alt = 4;

enum ShortcutKeys
{
    ShortcutKey_VK_NOT_A_KEY = 0,
    ShortcutKey_VK_BACK = 8,
    ShortcutKey_VK_TAB = 9,
    ShortcutKey_VK_RETURN = 13,
    ShortcutKey_VK_ESCAPE = 27,
    ShortcutKey_VK_SPACE = 32,
    ShortcutKey_VK_END = 35,
    ShortcutKey_VK_HOME = 36,
    ShortcutKey_VK_LEFT = 37,
    ShortcutKey_VK_UP = 38,
    ShortcutKey_VK_RIGHT = 39,
    ShortcutKey_VK_DOWN = 40,
    ShortcutKey_VK_INSERT = 45,
    ShortcutKey_VK_DELETE = 46,
    ShortcutKey_VK_0 = 48,
    ShortcutKey_VK_1 = 49,
    ShortcutKey_VK_2 = 50,
    ShortcutKey_VK_3 = 51,
    ShortcutKey_VK_4 = 52,
    ShortcutKey_VK_5 = 53,
    ShortcutKey_VK_6 = 54,
    ShortcutKey_VK_7 = 55,
    ShortcutKey_VK_8 = 56,
    ShortcutKey_VK_9 = 57,
    ShortcutKey_VK_A = 65,
    ShortcutKey_VK_B = 66,
    ShortcutKey_VK_C = 67,
    ShortcutKey_VK_D = 68,
    ShortcutKey_VK_E = 69,
    ShortcutKey_VK_F = 70,
    ShortcutKey_VK_G = 71,
    ShortcutKey_VK_H = 72,
    ShortcutKey_VK_I = 73,
    ShortcutKey_VK_J = 74,
    ShortcutKey_VK_K = 75,
    ShortcutKey_VK_L = 76,
    ShortcutKey_VK_M = 77,
    ShortcutKey_VK_N = 78,
    ShortcutKey_VK_O = 79,
    ShortcutKey_VK_P = 80,
    ShortcutKey_VK_Q = 81,
    ShortcutKey_VK_R = 82,
    ShortcutKey_VK_S = 83,
    ShortcutKey_VK_T = 84,
    ShortcutKey_VK_U = 85,
    ShortcutKey_VK_V = 86,
    ShortcutKey_VK_W = 87,
    ShortcutKey_VK_X = 88,
    ShortcutKey_VK_Y = 89,
    ShortcutKey_VK_Z = 90,
    ShortcutKey_VK_NUMPAD0 = 96,
    ShortcutKey_VK_NUMPAD1 = 97,
    ShortcutKey_VK_NUMPAD2 = 98,
    ShortcutKey_VK_NUMPAD3 = 99,
    ShortcutKey_VK_NUMPAD4 = 100,
    ShortcutKey_VK_NUMPAD5 = 101,
    ShortcutKey_VK_NUMPAD6 = 102,
    ShortcutKey_VK_NUMPAD7 = 103,
    ShortcutKey_VK_NUMPAD8 = 104,
    ShortcutKey_VK_NUMPAD9 = 105,
    ShortcutKey_VK_MULTIPLY = 106,
    ShortcutKey_VK_ADD = 107,
    ShortcutKey_VK_SEPARATOR = 108,
    ShortcutKey_VK_SUBTRACT = 109,
    ShortcutKey_VK_DECIMAL = 110,
    ShortcutKey_VK_DIVIDE = 111,
    ShortcutKey_VK_F1 = 112,
    ShortcutKey_VK_F2 = 113,
    ShortcutKey_VK_F3 = 114,
    ShortcutKey_VK_F4 = 115,
    ShortcutKey_VK_F5 = 116,
    ShortcutKey_VK_F6 = 117,
    ShortcutKey_VK_F7 = 118,
    ShortcutKey_VK_F8 = 119,
    ShortcutKey_VK_F9 = 120,
    ShortcutKey_VK_F10 = 121,
    ShortcutKey_VK_F11 = 122,
    ShortcutKey_VK_F12 = 123,
    ShortcutKey_VK_F13 = 124,
    ShortcutKey_VK_F14 = 125,
    ShortcutKey_VK_F15 = 126,
    ShortcutKey_VK_F16 = 127,
    ShortcutKey_VK_F17 = 128,
    ShortcutKey_VK_F18 = 129,
    ShortcutKey_VK_F19 = 130,
    ShortcutKey_VK_F20 = 131,
    ShortcutKey_VK_F21 = 132,
    ShortcutKey_VK_F22 = 133,
    ShortcutKey_VK_F23 = 134,
    ShortcutKey_VK_F24 = 135
};

enum BooleanOrPreference
{
    BooleanOrPreference_False = 0,
    BooleanOrPreference_True = 1,
    BooleanOrPreference_UsePreference = 2
};

enum ScrollBars
{
    ScrollBar_None = 0,
    ScrollBar_Both = 1,
    ScrollBar_Horizontal = 2,
    ScrollBar_Vertical = 3
};

enum TextTypes
{
    TextType_PlainText = 0,
    TextType_Expression = 1,
    TextType_ExpressionWithCppIdentifiers = 2
};

enum ErrorCheck
{
    ErrorCheck_None = 0,
    ErrorCheck_Syntax = 1,
    ErrorCheck_SyntaxAndEvaluation = 2
};
    const long ValidExpressionType_Any = -1;
    const long ValidExpressionType_Boolean = 1;
    const long ValidExpressionType_Number = 2;
    const long ValidExpressionType_String = 4;
    const long ValidExpressionType_Reference = 8;
    const long ValidExpressionType_Container = 16;
    const long ValidExpressionType_NamedType = 32;
    const long ValidExpressionType_BooleanArray = 64;
    const long ValidExpressionType_NumberArray = 128;
    const long ValidExpressionType_StringArray = 256;
    const long ValidExpressionType_ReferenceArray = 512;
    const long ValidExpressionType_ContainerArray = 1024;
    const long ValidExpressionType_NamedTypeArray = 2048;
    const long ValidExpressionType_Object = 16384;
    const long ValidExpressionType_PlainReference = 32768;
    const long ValidExpressionType_PlainContainer = 65536;
    const long DisplayError_NoOptions = 0;
    const long DisplayError_ForAll = 1;

enum ButtonSizing
{
    ButtonSizing_AlwaysAutoSize = 0,
    ButtonSizing_GrowOnly = 1,
    ButtonSizing_ShrinkOnly = 2,
    ButtonSizing_NeverAutoSize = 3
};

enum ReloadFiles
{
    ReloadFile_None = 0,
    ReloadFile_Selected = 1,
    ReloadFile_All = 2
};

enum QueryCloseExecutionOptions
{
    QueryCloseExecution_ShowDialog = 0,
    QueryCloseExecution_Terminate = 1,
    QueryCloseExecution_Abort = 2,
    QueryCloseExecution_AutoCloseWhenDone = 3,
    QueryCloseExecution_Cancel = 4,
    QueryCloseExecution_Hide = 5
};

enum QueryShutdownOptions
{
    QueryShutdown_ShowDialog = 0,
    QueryShutdown_Continue = 1,
    QueryShutdown_Cancel = 2
};
    const long CommandConnection_NoOptions = 0;
    const long CommandConnection_IgnoreVisible = 1;
    const long CommandConnection_IgnoreCaption = 2;
    const long CommandConnection_IgnoreEnable = 4;
    const long CommandConnection_EnableImage = 8;
    const long ExecutionViewConnection_NoOptions = 0;
    const long ExecutionViewConnection_IgnoreColors = 1;

enum FontSources
{
    FontSource_UseFontProperty = 0,
    FontSource_UseGUIFont = 1,
    FontSource_UseContainerFont = 2,
    FontSource_UseTitlebarFont = 3,
    FontSource_UseInactiveTitlebarFont = 4,
    FontSource_UseIconFont = 5,
    FontSource_UseMenuFont = 6,
    FontSource_UseMessageBoxFont = 7,
    FontSource_UsePaletteTitleFont = 8,
    FontSource_UseSelectedItemsFont = 9,
    FontSource_UseToolTipFont = 10,
    FontSource_UseSystemFixedWidthFont = 11
};

enum ExecutionDisplayReasons
{
    ExecutionDisplayReason_UIMessage = 0,
    ExecutionDisplayReason_StartExecution = 1,
    ExecutionDisplayReason_Breakpoint = 2,
    ExecutionDisplayReason_BreakOnUserRequest = 3,
    ExecutionDisplayReason_BreakOnRunTimeError = 4,
    ExecutionDisplayReason_GotoLocation = 5
};

enum SequenceFileDisplayReasons
{
    SequenceFileDisplayReason_UIMessage = 0,
    SequenceFileDisplayReason_OpenSequenceFile = 1,
    SequenceFileDisplayReason_GotoLocation = 2,
    SequenceFileDisplayReason_NewSequenceFile = 3
};
    const short MouseButton_Left = 1;
    const short MouseButton_Right = 2;
    const short MouseButton_Middle = 4;
    const short KeyCode_VK_CANCEL = 3;
    const short KeyCode_VK_BACK = 8;
    const short KeyCode_VK_TAB = 9;
    const short KeyCode_VK_CLEAR = 12;
    const short KeyCode_VK_RETURN = 13;
    const short KeyCode_VK_SHIFT = 16;
    const short KeyCode_VK_CONTROL = 17;
    const short KeyCode_VK_MENU = 18;
    const short KeyCode_VK_PAUSE = 19;
    const short KeyCode_VK_CAPITAL = 20;
    const short KeyCode_VK_KANA = 21;
    const short KeyCode_VK_HANGEUL = 21;
    const short KeyCode_VK_HANGUL = 21;
    const short KeyCode_VK_JUNJA = 23;
    const short KeyCode_VK_FINAL = 24;
    const short KeyCode_VK_HANJA = 25;
    const short KeyCode_VK_KANJI = 25;
    const short KeyCode_VK_ESCAPE = 27;
    const short KeyCode_VK_CONVERT = 28;
    const short KeyCode_VK_NONCONVERT = 29;
    const short KeyCode_VK_ACCEPT = 30;
    const short KeyCode_VK_MODECHANGE = 31;
    const short KeyCode_VK_SPACE = 32;
    const short KeyCode_VK_PRIOR = 33;
    const short KeyCode_VK_NEXT = 34;
    const short KeyCode_VK_END = 35;
    const short KeyCode_VK_HOME = 36;
    const short KeyCode_VK_LEFT = 37;
    const short KeyCode_VK_UP = 38;
    const short KeyCode_VK_RIGHT = 39;
    const short KeyCode_VK_DOWN = 40;
    const short KeyCode_VK_SELECT = 41;
    const short KeyCode_VK_PRINT = 42;
    const short KeyCode_VK_EXECUTE = 43;
    const short KeyCode_VK_SNAPSHOT = 44;
    const short KeyCode_VK_INSERT = 45;
    const short KeyCode_VK_DELETE = 46;
    const short KeyCode_VK_HELP = 47;
    const short KeyCode_VK_0 = 48;
    const short KeyCode_VK_1 = 49;
    const short KeyCode_VK_2 = 50;
    const short KeyCode_VK_3 = 51;
    const short KeyCode_VK_4 = 52;
    const short KeyCode_VK_5 = 53;
    const short KeyCode_VK_6 = 54;
    const short KeyCode_VK_7 = 55;
    const short KeyCode_VK_8 = 56;
    const short KeyCode_VK_9 = 57;
    const short KeyCode_VK_A = 65;
    const short KeyCode_VK_B = 66;
    const short KeyCode_VK_C = 67;
    const short KeyCode_VK_D = 68;
    const short KeyCode_VK_E = 69;
    const short KeyCode_VK_F = 70;
    const short KeyCode_VK_G = 71;
    const short KeyCode_VK_H = 72;
    const short KeyCode_VK_I = 73;
    const short KeyCode_VK_J = 74;
    const short KeyCode_VK_K = 75;
    const short KeyCode_VK_L = 76;
    const short KeyCode_VK_M = 77;
    const short KeyCode_VK_N = 78;
    const short KeyCode_VK_O = 79;
    const short KeyCode_VK_P = 80;
    const short KeyCode_VK_Q = 81;
    const short KeyCode_VK_R = 82;
    const short KeyCode_VK_S = 83;
    const short KeyCode_VK_T = 84;
    const short KeyCode_VK_U = 85;
    const short KeyCode_VK_V = 86;
    const short KeyCode_VK_W = 87;
    const short KeyCode_VK_X = 88;
    const short KeyCode_VK_Y = 89;
    const short KeyCode_VK_Z = 90;
    const short KeyCode_VK_LWIN = 91;
    const short KeyCode_VK_RWIN = 92;
    const short KeyCode_VK_APPS = 93;
    const short KeyCode_VK_NUMPAD0 = 96;
    const short KeyCode_VK_NUMPAD1 = 97;
    const short KeyCode_VK_NUMPAD2 = 98;
    const short KeyCode_VK_NUMPAD3 = 99;
    const short KeyCode_VK_NUMPAD4 = 100;
    const short KeyCode_VK_NUMPAD5 = 101;
    const short KeyCode_VK_NUMPAD6 = 102;
    const short KeyCode_VK_NUMPAD7 = 103;
    const short KeyCode_VK_NUMPAD8 = 104;
    const short KeyCode_VK_NUMPAD9 = 105;
    const short KeyCode_VK_MULTIPLY = 106;
    const short KeyCode_VK_ADD = 107;
    const short KeyCode_VK_SEPARATOR = 108;
    const short KeyCode_VK_SUBTRACT = 109;
    const short KeyCode_VK_DECIMAL = 110;
    const short KeyCode_VK_DIVIDE = 111;
    const short KeyCode_VK_F1 = 112;
    const short KeyCode_VK_F2 = 113;
    const short KeyCode_VK_F3 = 114;
    const short KeyCode_VK_F4 = 115;
    const short KeyCode_VK_F5 = 116;
    const short KeyCode_VK_F6 = 117;
    const short KeyCode_VK_F7 = 118;
    const short KeyCode_VK_F8 = 119;
    const short KeyCode_VK_F9 = 120;
    const short KeyCode_VK_F10 = 121;
    const short KeyCode_VK_F11 = 122;
    const short KeyCode_VK_F12 = 123;
    const short KeyCode_VK_F13 = 124;
    const short KeyCode_VK_F14 = 125;
    const short KeyCode_VK_F15 = 126;
    const short KeyCode_VK_F16 = 127;
    const short KeyCode_VK_F17 = 128;
    const short KeyCode_VK_F18 = 129;
    const short KeyCode_VK_F19 = 130;
    const short KeyCode_VK_F20 = 131;
    const short KeyCode_VK_F21 = 132;
    const short KeyCode_VK_F22 = 133;
    const short KeyCode_VK_F23 = 134;
    const short KeyCode_VK_F24 = 135;
    const short KeyCode_VK_NUMLOCK = 144;
    const short KeyCode_VK_SCROLL = 145;
    const short KeyModifier_None = 0;
    const short KeyModifier_Shift = 1;
    const short KeyModifier_Control = 2;
    const short KeyModifier_Alt = 4;

enum CheckBoxStyles
{
    CheckBoxStyle_Normal = 0,
    CheckBoxStyle_Button = 1
};

enum ContentAlignmentStyles
{
    ContentAlignmentStyle_MiddleLeft = 0,
    ContentAlignmentStyle_MiddleRight = 1,
    ContentAlignmentStyle_MiddleCenter = 2,
    ContentAlignmentStyle_TopLeft = 3,
    ContentAlignmentStyle_TopRight = 4,
    ContentAlignmentStyle_TopCenter = 5,
    ContentAlignmentStyle_BottomLeft = 6,
    ContentAlignmentStyle_BottomRight = 7,
    ContentAlignmentStyle_BottomCenter = 8
};
    const long BlockDisplayOption_None = 0;
    const long BlockDisplayOption_Indent = 1;
    const long BlockDisplayOption_ShowLines = 2;
    const long BlockDisplayOption_DottedLines = 4;
    const long BlockDisplayOption_ShowStepIcons = 8;
    const long BlockDisplayOption_BoldStepFont = 16;
    const long BlockDisplayOption_HighlightMismatchErrors = 32;
    const long BlockDisplayOption_ShowGroupLines = 64;
    const long ExpressionEditButtonKind_BrowseExpression = 1;
    const long ExpressionEditButtonKind_CheckExpression = 2;
    const long ExpressionEditButtonKind_CustomBase = 1000;

enum SpecifyExpressionEditButton
{
    SpecifyButton_ByIndex = 0,
    SpecifyButton_ByKind = 1
};

enum ExpressionEditStyles
{
    ExpressionEditStyle_Edit = 0,
    ExpressionEditStyle_DropDownCombo = 1
};

enum QueryReloadSequenceFileOptions
{
    QueryReloadSequenceFile_Prompt = 0,
    QueryReloadSequenceFile_Reload = 1,
    QueryReloadSequenceFile_Cancel = 2
};

enum StepGroupModes
{
    StepGroupMode_OneGroup = 1,
    StepGroupMode_AllGroups = 2
};
    const long EditingFlag_CutPasteDelete = 7;
    const long EditingFlag_Copy = 8;
    const long EditingFlag_DragDrop = 16;
    const long EditingFlag_Rename = 32;

enum ExpressionEditButtonStyles
{
    ExpressionEditButtonStyle_System = 1,
    ExpressionEditButtonStyle_Standard = 2,
    ExpressionEditButtonStyle_Flat = 3,
    ExpressionEditButtonStyle_ToolBarButton = 4
};
    const long RefreshOption_All = -1;
    const long RefreshOption_AllSequenceFileViewMgrs = 1;
    const long RefreshOption_AllExecutionViewMgrs = 2;
    const long RefreshOption_Commands = 4;
    const long RefreshOption_Captions = 8;
    const long RefreshOption_AllCommands = 16;
    const long RefreshOption_AllCaptions = 32;
    const long RefreshOption_AdapterList = 64;
    const long RefreshOption_EntryPoints = 128;
    const long EditingDenialReason_IsReadOnly = 1;
    const long EditingDenialReason_IsNotEditor = 2;
    const long EditingDenialReason_IsExecuting = 4;
    const long EditingDenialReason_IsLocked = 8;
    const long EditingDenialReason_NoFileEditingPrivilege = 16;

enum ConnectionActivityTypes
{
    ConnectionActivityType_TextChange = 1,
    ConnectionActivityType_NumberChange = 2,
    ConnectionActivityType_BooleanChange = 3,
    ConnectionActivityType_ImageChange = 4,
    ConnectionActivityType_ContentChange = 5,
    ConnectionActivityType_CursorOrSelectionChange = 6,
    ConnectionActivityType_EnabledChange = 7,
    ConnectionActivityType_VisibleChange = 8
};

enum ContextChangedReasons
{
    ContextChangedReason_SetContext = 1,
    ContextChangedReason_VariableCreatedFromContextMenu = 2,
    ContextChangedReason_ExpressionBrowserDialogBox = 3
};

enum AutomaticallyReloadModifiedFilesOptions
{
    AutomaticallyReloadModifiedFilesOption_DoNotReload = 1,
    AutomaticallyReloadModifiedFilesOption_OnTimer = 2,
    AutomaticallyReloadModifiedFilesOption_OnActivateApplication = 3
};

enum ButtonStyles
{
    ButtonStyle_Standard = 1,
    ButtonStyle_ToolBar = 2
};

enum TextImageRelations
{
    TextImageRelation_Overlay = 0,
    TextImageRelation_ImageBelowText = 1,
    TextImageRelation_ImageAboveText = 2,
    TextImageRelation_ImageBeforeText = 3,
    TextImageRelation_ImageAfterText = 4
};

enum ButtonActionStyles
{
    ButtonActionStyle_PushButton = 0,
    ButtonActionStyle_ToggleButton = 1
};

enum ProcessCommandLineErrors
{
    ProcessCommandLineError_None = 0,
    ProcessCommandLineError_UnrecognizedArgumentError = 1,
    ProcessCommandLineError_CustomError = 2
};

enum AutoSizingOptions
{
    AutoSizingOption_None = 0,
    AutoSizingOption_Proportional = 1
};
    const long ReloadFileOption_NoOptions = 0;
    const long ReloadFileOption_OnlyIfModifiedOnDisk = 1;
    const long ReloadFileOption_OnlyIfModifiedInMemory = 2;

struct __declspec(uuid("a6fa998e-98ef-11d2-93b7-00a02411ebe6"))
IButton : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBackColor,put=PutBackColor))
    OLE_COLOR BackColor;
    __declspec(property(get=GetValue,put=PutValue))
    VARIANT_BOOL Value;
    __declspec(property(get=GetAutoSizing,put=PutAutoSizing))
    enum ButtonSizing AutoSizing;
    __declspec(property(get=GetFontSource,put=PutFontSource))
    enum FontSources FontSource;
    __declspec(property(get=GetScaleWithDPI,put=PutScaleWithDPI))
    VARIANT_BOOL ScaleWithDPI;
    __declspec(property(get=GetStyle,put=PutStyle))
    enum ButtonStyles Style;
    __declspec(property(get=GetTextAlignment,put=PutTextAlignment))
    enum ContentAlignmentStyles TextAlignment;
    __declspec(property(get=GetImageAlignment,put=PutImageAlignment))
    enum ContentAlignmentStyles ImageAlignment;
    __declspec(property(get=GetTextImageRelation,put=PutTextImageRelation))
    enum TextImageRelations TextImageRelation;
    __declspec(property(get=GetShowImage,put=PutShowImage))
    VARIANT_BOOL ShowImage;
    __declspec(property(get=GetShowText,put=PutShowText))
    VARIANT_BOOL ShowText;
    __declspec(property(get=GetActionStyle,put=PutActionStyle))
    enum ButtonActionStyles ActionStyle;
    __declspec(property(get=GetToolTipText,put=PutToolTipText))
    _bstr_t ToolTipText;
    __declspec(property(get=GetUseMnemonic,put=PutUseMnemonic))
    VARIANT_BOOL UseMnemonic;
    __declspec(property(get=GetMousePointer,put=PutMousePointer))
    enum MousePointerStyles MousePointer;
    __declspec(property(get=GetUseMaskColor,put=PutUseMaskColor))
    VARIANT_BOOL UseMaskColor;
    __declspec(property(get=GetMaskColor,put=PutMaskColor))
    OLE_COLOR MaskColor;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GethWnd))
    long hWnd;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetForeColor,put=PutForeColor))
    OLE_COLOR ForeColor;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL val );
    enum MousePointerStyles GetMousePointer ( );
    void PutMousePointer (
        enum MousePointerStyles val );
    IPictureDisp * GetMouseIcon ( );
    void PutMouseIcon (
        IPictureDisp * val );
    void PutRefMouseIcon (
        IPictureDisp * val );
    IFontDisp * GetFont ( );
    void PutFont (
        IFontDisp * val );
    void PutRefFont (
        IFontDisp * val );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t val );
    HRESULT DoClick ( );
    long GethWnd ( );
    VARIANT_BOOL GetValue ( );
    void PutValue (
        VARIANT_BOOL val );
    enum ButtonSizing GetAutoSizing ( );
    void PutAutoSizing (
        enum ButtonSizing val );
    HRESULT Localize (
        _bstr_t sectionName );
    enum FontSources GetFontSource ( );
    void PutFontSource (
        enum FontSources val );
    VARIANT_BOOL GetScaleWithDPI ( );
    void PutScaleWithDPI (
        VARIANT_BOOL val );
    enum ButtonStyles GetStyle ( );
    void PutStyle (
        enum ButtonStyles val );
    IPictureDisp * GetImage ( );
    void PutImage (
        IPictureDisp * val );
    void PutRefImage (
        IPictureDisp * val );
    enum ContentAlignmentStyles GetTextAlignment ( );
    void PutTextAlignment (
        enum ContentAlignmentStyles val );
    enum ContentAlignmentStyles GetImageAlignment ( );
    void PutImageAlignment (
        enum ContentAlignmentStyles val );
    enum TextImageRelations GetTextImageRelation ( );
    void PutTextImageRelation (
        enum TextImageRelations val );
    VARIANT_BOOL GetShowImage ( );
    void PutShowImage (
        VARIANT_BOOL val );
    VARIANT_BOOL GetShowText ( );
    void PutShowText (
        VARIANT_BOOL val );
    OLE_COLOR GetBackColor ( );
    void PutBackColor (
        OLE_COLOR val );
    OLE_COLOR GetForeColor ( );
    void PutForeColor (
        OLE_COLOR val );
    enum ButtonActionStyles GetActionStyle ( );
    void PutActionStyle (
        enum ButtonActionStyles val );
    _bstr_t GetToolTipText ( );
    void PutToolTipText (
        _bstr_t val );
    VARIANT_BOOL GetUseMnemonic ( );
    void PutUseMnemonic (
        VARIANT_BOOL val );
    VARIANT_BOOL GetUseMaskColor ( );
    void PutUseMaskColor (
        VARIANT_BOOL val );
    OLE_COLOR GetMaskColor ( );
    void PutMaskColor (
        OLE_COLOR val );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_MousePointer (
        /*[out,retval]*/ enum MousePointerStyles * val ) = 0;
      virtual HRESULT __stdcall put_MousePointer (
        /*[in]*/ enum MousePointerStyles val ) = 0;
      virtual HRESULT __stdcall get_MouseIcon (
        /*[out,retval]*/ IPictureDisp * * val ) = 0;
      virtual HRESULT __stdcall put_MouseIcon (
        /*[in]*/ IPictureDisp * val ) = 0;
      virtual HRESULT __stdcall putref_MouseIcon (
        /*[in]*/ IPictureDisp * val ) = 0;
      virtual HRESULT __stdcall get_Font (
        /*[out,retval]*/ IFontDisp * * val ) = 0;
      virtual HRESULT __stdcall put_Font (
        /*[in]*/ IFontDisp * val ) = 0;
      virtual HRESULT __stdcall putref_Font (
        /*[in]*/ IFontDisp * val ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_Caption (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall raw_DoClick ( ) = 0;
      virtual HRESULT __stdcall get_hWnd (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_AutoSizing (
        /*[out,retval]*/ enum ButtonSizing * val ) = 0;
      virtual HRESULT __stdcall put_AutoSizing (
        /*[in]*/ enum ButtonSizing val ) = 0;
      virtual HRESULT __stdcall raw_Localize (
        /*[in]*/ BSTR sectionName ) = 0;
      virtual HRESULT __stdcall get_FontSource (
        /*[out,retval]*/ enum FontSources * val ) = 0;
      virtual HRESULT __stdcall put_FontSource (
        /*[in]*/ enum FontSources val ) = 0;
      virtual HRESULT __stdcall get_ScaleWithDPI (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_ScaleWithDPI (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ enum ButtonStyles * val ) = 0;
      virtual HRESULT __stdcall put_Style (
        /*[in]*/ enum ButtonStyles val ) = 0;
      virtual HRESULT __stdcall get_Image (
        /*[out,retval]*/ IPictureDisp * * val ) = 0;
      virtual HRESULT __stdcall put_Image (
        /*[in]*/ IPictureDisp * val ) = 0;
      virtual HRESULT __stdcall putref_Image (
        /*[in]*/ IPictureDisp * val ) = 0;
      virtual HRESULT __stdcall get_TextAlignment (
        /*[out,retval]*/ enum ContentAlignmentStyles * val ) = 0;
      virtual HRESULT __stdcall put_TextAlignment (
        /*[in]*/ enum ContentAlignmentStyles val ) = 0;
      virtual HRESULT __stdcall get_ImageAlignment (
        /*[out,retval]*/ enum ContentAlignmentStyles * val ) = 0;
      virtual HRESULT __stdcall put_ImageAlignment (
        /*[in]*/ enum ContentAlignmentStyles val ) = 0;
      virtual HRESULT __stdcall get_TextImageRelation (
        /*[out,retval]*/ enum TextImageRelations * val ) = 0;
      virtual HRESULT __stdcall put_TextImageRelation (
        /*[in]*/ enum TextImageRelations val ) = 0;
      virtual HRESULT __stdcall get_ShowImage (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_ShowImage (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_ShowText (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_ShowText (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_BackColor (
        /*[out,retval]*/ OLE_COLOR * val ) = 0;
      virtual HRESULT __stdcall put_BackColor (
        /*[in]*/ OLE_COLOR val ) = 0;
      virtual HRESULT __stdcall get_ForeColor (
        /*[out,retval]*/ OLE_COLOR * val ) = 0;
      virtual HRESULT __stdcall put_ForeColor (
        /*[in]*/ OLE_COLOR val ) = 0;
      virtual HRESULT __stdcall get_ActionStyle (
        /*[out,retval]*/ enum ButtonActionStyles * val ) = 0;
      virtual HRESULT __stdcall put_ActionStyle (
        /*[in]*/ enum ButtonActionStyles val ) = 0;
      virtual HRESULT __stdcall get_ToolTipText (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_ToolTipText (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_UseMnemonic (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_UseMnemonic (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_UseMaskColor (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_UseMaskColor (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_MaskColor (
        /*[out,retval]*/ OLE_COLOR * val ) = 0;
      virtual HRESULT __stdcall put_MaskColor (
        /*[in]*/ OLE_COLOR val ) = 0;
};

struct __declspec(uuid("a6fa9990-98ef-11d2-93b7-00a02411ebe6"))
_ButtonEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT Click ( );
    HRESULT KeyDown (
        short * keyCode,
        short shift );
    HRESULT KeyPress (
        short * keyAscii );
    HRESULT KeyUp (
        short keyCode,
        short shift );
    HRESULT MouseDown (
        short btn,
        short shift,
        OLE_XPOS_PIXELS x,
        OLE_YPOS_PIXELS y );
    HRESULT MouseMove (
        short btn,
        short shift,
        OLE_XPOS_PIXELS x,
        OLE_YPOS_PIXELS y );
    HRESULT MouseUp (
        short btn,
        short shift,
        OLE_XPOS_PIXELS x,
        OLE_YPOS_PIXELS y );
    HRESULT ConnectionActivity (
        enum ConnectionActivityTypes activity );
};

struct __declspec(uuid("bce69cf9-1341-4705-9ecc-23e033f2e101"))
Borders : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetVisibleBorders,put=PutVisibleBorders))
    long VisibleBorders;
    __declspec(property(get=GetBorderWidth,put=PutBorderWidth))
    long BorderWidth;
    __declspec(property(get=GetBorderEdgeStyle,put=PutBorderEdgeStyle))
    enum EdgeStyles BorderEdgeStyle;
    __declspec(property(get=GetFrameEdgeStyle,put=PutFrameEdgeStyle))
    enum EdgeStyles FrameEdgeStyle;
    __declspec(property(get=GetFrameVisible,put=PutFrameVisible))
    VARIANT_BOOL FrameVisible;
    __declspec(property(get=GetFrameInsideBorders,put=PutFrameInsideBorders))
    VARIANT_BOOL FrameInsideBorders;
    __declspec(property(get=GetBorderDraggedEventEnabled,put=PutBorderDraggedEventEnabled))
    VARIANT_BOOL BorderDraggedEventEnabled;

    //
    // Wrapper methods for error-handling
    //

    long GetVisibleBorders ( );
    void PutVisibleBorders (
        long val );
    long GetBorderWidth ( );
    void PutBorderWidth (
        long val );
    enum EdgeStyles GetBorderEdgeStyle ( );
    void PutBorderEdgeStyle (
        enum EdgeStyles val );
    enum EdgeStyles GetFrameEdgeStyle ( );
    void PutFrameEdgeStyle (
        enum EdgeStyles val );
    VARIANT_BOOL GetFrameVisible ( );
    void PutFrameVisible (
        VARIANT_BOOL val );
    VARIANT_BOOL GetFrameInsideBorders ( );
    void PutFrameInsideBorders (
        VARIANT_BOOL val );
    VARIANT_BOOL GetBorderDraggedEventEnabled ( );
    void PutBorderDraggedEventEnabled (
        VARIANT_BOOL val );
    HRESULT GetFrameThickness (
        long * verticalThickness,
        long * horizontalThickness );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_VisibleBorders (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall put_VisibleBorders (
        /*[in]*/ long val ) = 0;
      virtual HRESULT __stdcall get_BorderWidth (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall put_BorderWidth (
        /*[in]*/ long val ) = 0;
      virtual HRESULT __stdcall get_BorderEdgeStyle (
        /*[out,retval]*/ enum EdgeStyles * val ) = 0;
      virtual HRESULT __stdcall put_BorderEdgeStyle (
        /*[in]*/ enum EdgeStyles val ) = 0;
      virtual HRESULT __stdcall get_FrameEdgeStyle (
        /*[out,retval]*/ enum EdgeStyles * val ) = 0;
      virtual HRESULT __stdcall put_FrameEdgeStyle (
        /*[in]*/ enum EdgeStyles val ) = 0;
      virtual HRESULT __stdcall get_FrameVisible (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_FrameVisible (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_FrameInsideBorders (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_FrameInsideBorders (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_BorderDraggedEventEnabled (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_BorderDraggedEventEnabled (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall raw_GetFrameThickness (
        /*[out]*/ long * verticalThickness,
        /*[out]*/ long * horizontalThickness ) = 0;
};

struct __declspec(uuid("4b0952aa-1842-4ca0-94b6-2ec39d3951d1"))
ExpressionEditButton : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetKind,put=PutKind))
    long Kind;
    __declspec(property(get=GetToolTipText,put=PutToolTipText))
    _bstr_t ToolTipText;
    __declspec(property(get=GetContextMenuItemCaption,put=PutContextMenuItemCaption))
    _bstr_t ContextMenuItemCaption;
    __declspec(property(get=GetShortcutKey,put=PutShortcutKey))
    enum ShortcutKeys ShortcutKey;
    __declspec(property(get=GetShortcutModifier,put=PutShortcutModifier))
    long ShortcutModifier;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetStyle,put=PutStyle))
    enum ExpressionEditButtonStyles Style;
    __declspec(property(get=GetBackColor,put=PutBackColor))
    OLE_COLOR BackColor;
    __declspec(property(get=GethWnd))
    long hWnd;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL val );
    long GethWnd ( );
    IPictureDisp * GetIcon ( );
    void PutIcon (
        IPictureDisp * val );
    OLE_COLOR GetBackColor ( );
    void PutBackColor (
        OLE_COLOR val );
    long GetKind ( );
    void PutKind (
        long val );
    _bstr_t GetToolTipText ( );
    void PutToolTipText (
        _bstr_t val );
    _bstr_t GetContextMenuItemCaption ( );
    void PutContextMenuItemCaption (
        _bstr_t val );
    enum ShortcutKeys GetShortcutKey ( );
    void PutShortcutKey (
        enum ShortcutKeys val );
    long GetShortcutModifier ( );
    void PutShortcutModifier (
        long val );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL val );
    enum ExpressionEditButtonStyles GetStyle ( );
    void PutStyle (
        enum ExpressionEditButtonStyles val );
    HRESULT DoClick ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_hWnd (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall get_Icon (
        /*[out,retval]*/ IPictureDisp * * val ) = 0;
      virtual HRESULT __stdcall put_Icon (
        /*[in]*/ IPictureDisp * val ) = 0;
      virtual HRESULT __stdcall get_BackColor (
        /*[out,retval]*/ OLE_COLOR * val ) = 0;
      virtual HRESULT __stdcall put_BackColor (
        /*[in]*/ OLE_COLOR val ) = 0;
      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall put_Kind (
        /*[in]*/ long val ) = 0;
      virtual HRESULT __stdcall get_ToolTipText (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_ToolTipText (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_ContextMenuItemCaption (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_ContextMenuItemCaption (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_ShortcutKey (
        /*[out,retval]*/ enum ShortcutKeys * val ) = 0;
      virtual HRESULT __stdcall put_ShortcutKey (
        /*[in]*/ enum ShortcutKeys val ) = 0;
      virtual HRESULT __stdcall get_ShortcutModifier (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall put_ShortcutModifier (
        /*[in]*/ long val ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ enum ExpressionEditButtonStyles * val ) = 0;
      virtual HRESULT __stdcall put_Style (
        /*[in]*/ enum ExpressionEditButtonStyles val ) = 0;
      virtual HRESULT __stdcall raw_DoClick ( ) = 0;
};

struct __declspec(uuid("d4cf257f-9009-429f-be92-a05ed28a9add"))
ExpressionEditButtons : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IUnknownPtr Get_NewEnum ( );
    ExpressionEditButtonPtr GetItem (
        long indexOrKind,
        enum SpecifyExpressionEditButton specify );
    long GetCount ( );
    HRESULT Clear ( );
    ExpressionEditButtonPtr Insert (
        long itemIndexParam,
        long Kind );
    HRESULT Remove (
        long indexOrKind,
        enum SpecifyExpressionEditButton specify );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * enumerator ) = 0;
      virtual HRESULT __stdcall raw_GetItem (
        /*[in]*/ long indexOrKind,
        /*[in]*/ enum SpecifyExpressionEditButton specify,
        /*[out,retval]*/ struct ExpressionEditButton * * val ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall raw_Clear ( ) = 0;
      virtual HRESULT __stdcall raw_Insert (
        /*[in]*/ long itemIndexParam,
        /*[in]*/ long Kind,
        /*[out,retval]*/ struct ExpressionEditButton * * btn ) = 0;
      virtual HRESULT __stdcall raw_Remove (
        /*[in]*/ long indexOrKind,
        /*[in]*/ enum SpecifyExpressionEditButton specify ) = 0;
};

struct __declspec(uuid("4997b4c1-f5b6-4643-b38e-5d71b6e3b52b"))
ExpressionEditComboBoxItem : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetValue,put=PutValue))
    _bstr_t Value;
    __declspec(property(get=GetDisplayName,put=PutDisplayName))
    _bstr_t DisplayName;

    //
    // Wrapper methods for error-handling
    //

    IPictureDisp * GetIcon ( );
    void PutIcon (
        IPictureDisp * val );
    _bstr_t GetValue ( );
    void PutValue (
        _bstr_t val );
    _bstr_t GetDisplayName ( );
    void PutDisplayName (
        _bstr_t val );
    void PutRefIcon (
        IPictureDisp * val );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Icon (
        /*[out,retval]*/ IPictureDisp * * val ) = 0;
      virtual HRESULT __stdcall put_Icon (
        /*[in]*/ IPictureDisp * val ) = 0;
      virtual HRESULT __stdcall get_Value (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_Value (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_DisplayName (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_DisplayName (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall putref_Icon (
        /*[in]*/ IPictureDisp * val ) = 0;
};

struct __declspec(uuid("8aa16559-aff3-404d-b722-bff4c7179ac3"))
ExpressionEditComboBoxItems : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    ExpressionEditComboBoxItemPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    ExpressionEditComboBoxItemPtr GetItem (
        long itemIndexParam );
    IUnknownPtr Get_NewEnum ( );
    long GetCount ( );
    HRESULT Clear ( );
    ExpressionEditComboBoxItemPtr Insert (
        long itemIndexParam,
        _bstr_t val,
        _bstr_t DisplayName,
        IPictureDisp * Icon );
    HRESULT Remove (
        long itemIndexParam );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long itemIndexParam,
        /*[out,retval]*/ struct ExpressionEditComboBoxItem * * val ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * enumerator ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall raw_Clear ( ) = 0;
      virtual HRESULT __stdcall raw_Insert (
        /*[in]*/ long itemIndexParam,
        /*[in]*/ BSTR val,
        /*[in]*/ BSTR DisplayName,
        /*[in]*/ IPictureDisp * Icon,
        /*[out,retval]*/ struct ExpressionEditComboBoxItem * * Item ) = 0;
      virtual HRESULT __stdcall raw_Remove (
        /*[in]*/ long itemIndexParam ) = 0;
};

struct __declspec(uuid("fdd24392-1132-424d-bf4b-77f0f0801f7a"))
IExpressionEdit : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorders))
    BordersPtr Borders;
    __declspec(property(get=GetHideSelection,put=PutHideSelection))
    VARIANT_BOOL HideSelection;
    __declspec(property(get=GetReadOnly,put=PutReadOnly))
    VARIANT_BOOL ReadOnly;
    __declspec(property(get=GetTextLength))
    long TextLength;
    __declspec(property(get=GetWantReturn,put=PutWantReturn))
    enum BooleanOrPreference WantReturn;
    __declspec(property(get=GetFunctionTipHwnd))
    long FunctionTipHwnd;
    __declspec(property(get=GetAutoCompletionHwnd))
    long AutoCompletionHwnd;
    __declspec(property(get=GetEngine,put=PutRefEngine))
    TS::IEnginePtr Engine;
    __declspec(property(get=GetContext,put=PutRefContext))
    TS::PropertyObjectPtr Context;
    __declspec(property(get=GetAutoLocalize,put=PutAutoLocalize))
    VARIANT_BOOL AutoLocalize;
    __declspec(property(get=GetTextType,put=PutTextType))
    enum TextTypes TextType;
    __declspec(property(get=GetAllowEmpty,put=PutAllowEmpty))
    VARIANT_BOOL AllowEmpty;
    __declspec(property(get=GetErrorCheck,put=PutErrorCheck))
    enum ErrorCheck _ErrorCheck;
    __declspec(property(get=GetRequiredTypes,put=PutRequiredTypes))
    long RequiredTypes;
    __declspec(property(get=GetRequiredNamedTypes))
    StringsPtr RequiredNamedTypes;
    __declspec(property(get=GetRequiredNamedTypeArrays))
    StringsPtr RequiredNamedTypeArrays;
    __declspec(property(get=GetBackColor,put=PutBackColor))
    OLE_COLOR BackColor;
    __declspec(property(get=GetBrowseExprDialogTitle,put=PutBrowseExprDialogTitle))
    _bstr_t BrowseExprDialogTitle;
    __declspec(property(get=GetBrowseExprDialogOptions,put=PutBrowseExprDialogOptions))
    long BrowseExprDialogOptions;
    __declspec(property(get=GetSyntaxHighlightingEnabled,put=PutSyntaxHighlightingEnabled))
    VARIANT_BOOL SyntaxHighlightingEnabled;
    __declspec(property(get=GetFontSource,put=PutFontSource))
    enum FontSources FontSource;
    __declspec(property(get=GetScaleWithDPI,put=PutScaleWithDPI))
    VARIANT_BOOL ScaleWithDPI;
    __declspec(property(get=GetButtons))
    ExpressionEditButtonsPtr Buttons;
    __declspec(property(get=GetStyle,put=PutStyle))
    enum ExpressionEditStyles Style;
    __declspec(property(get=GetComboBoxItems))
    ExpressionEditComboBoxItemsPtr ComboBoxItems;
    __declspec(property(get=GetShowDisplayNameWhenInactive,put=PutShowDisplayNameWhenInactive))
    VARIANT_BOOL ShowDisplayNameWhenInactive;
    __declspec(property(get=GetDropDownListHwnd))
    long DropDownListHwnd;
    __declspec(property(get=GetDisplayText,put=PutDisplayText))
    _bstr_t DisplayText;
    __declspec(property(get=GetDisplayFormattedValue,put=PutDisplayFormattedValue))
    VARIANT_BOOL DisplayFormattedValue;
    __declspec(property(get=GetNumericFormat,put=PutNumericFormat))
    _bstr_t NumericFormat;
    __declspec(property(get=GetAutomaticallyPrefixVariables,put=PutAutomaticallyPrefixVariables))
    enum BooleanOrPreference AutomaticallyPrefixVariables;
    __declspec(property(get=GetSelLength,put=PutSelLength))
    long SelLength;
    __declspec(property(get=GetSelStart,put=PutSelStart))
    long SelStart;
    __declspec(property(get=GetSelText,put=PutSelText))
    _bstr_t SelText;
    __declspec(property(get=GetMultiline,put=PutMultiline))
    VARIANT_BOOL Multiline;
    __declspec(property(get=GetWordWrap,put=PutWordWrap))
    enum BooleanOrPreference WordWrap;
    __declspec(property(get=GetScrollBars,put=PutScrollBars))
    enum ScrollBars _ScrollBars;
    __declspec(property(get=GetMaxLength,put=PutMaxLength))
    long MaxLength;
    __declspec(property(get=GetMousePointer,put=PutMousePointer))
    enum MousePointerStyles MousePointer;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GethWnd))
    long hWnd;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;

    //
    // Wrapper methods for error-handling
    //

    OLE_COLOR GetBackColor ( );
    void PutBackColor (
        OLE_COLOR val );
    BordersPtr GetBorders ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL val );
    VARIANT_BOOL GetHideSelection ( );
    void PutHideSelection (
        VARIANT_BOOL val );
    IFontDisp * GetFont ( );
    void PutFont (
        IFontDisp * val );
    void PutRefFont (
        IFontDisp * val );
    long GethWnd ( );
    VARIANT_BOOL GetReadOnly ( );
    void PutReadOnly (
        VARIANT_BOOL val );
    long GetMaxLength ( );
    void PutMaxLength (
        long val );
    IPictureDisp * GetMouseIcon ( );
    void PutMouseIcon (
        IPictureDisp * val );
    void PutRefMouseIcon (
        IPictureDisp * val );
    enum MousePointerStyles GetMousePointer ( );
    void PutMousePointer (
        enum MousePointerStyles val );
    VARIANT_BOOL GetMultiline ( );
    void PutMultiline (
        VARIANT_BOOL val );
    enum ScrollBars GetScrollBars ( );
    void PutScrollBars (
        enum ScrollBars val );
    long GetSelLength ( );
    void PutSelLength (
        long val );
    long GetSelStart ( );
    void PutSelStart (
        long val );
    _bstr_t GetSelText ( );
    void PutSelText (
        _bstr_t val );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t val );
    long GetTextLength ( );
    enum BooleanOrPreference GetWantReturn ( );
    void PutWantReturn (
        enum BooleanOrPreference val );
    enum BooleanOrPreference GetWordWrap ( );
    void PutWordWrap (
        enum BooleanOrPreference val );
    HRESULT SelectAll ( );
    TS::IEnginePtr GetEngine ( );
    void PutRefEngine (
        struct TS::IEngine * val );
    TS::PropertyObjectPtr GetContext ( );
    void PutRefContext (
        struct TS::PropertyObject * val );
    VARIANT_BOOL GetAutoLocalize ( );
    void PutAutoLocalize (
        VARIANT_BOOL val );
    enum TextTypes GetTextType ( );
    void PutTextType (
        enum TextTypes val );
    VARIANT_BOOL GetSyntaxHighlightingEnabled ( );
    void PutSyntaxHighlightingEnabled (
        VARIANT_BOOL val );
    TS::PropertyObjectPtr Evaluate (
        long evaluationOptions );
    long GetFunctionTipHwnd ( );
    long GetAutoCompletionHwnd ( );
    VARIANT_BOOL GetAllowEmpty ( );
    void PutAllowEmpty (
        VARIANT_BOOL val );
    enum ErrorCheck GetErrorCheck ( );
    void PutErrorCheck (
        enum ErrorCheck val );
    long GetRequiredTypes ( );
    void PutRequiredTypes (
        long val );
    StringsPtr GetRequiredNamedTypes ( );
    StringsPtr GetRequiredNamedTypeArrays ( );
    enum TS::TSError CheckExpression (
        BSTR * errorDescription,
        long * errorStartPosition,
        long * errorEndPosition );
    HRESULT DisplayError (
        long options );
    _bstr_t GetBrowseExprDialogTitle ( );
    void PutBrowseExprDialogTitle (
        _bstr_t val );
    long GetBrowseExprDialogOptions ( );
    void PutBrowseExprDialogOptions (
        long val );
    VARIANT_BOOL DisplayBrowseExprDialog ( );
    enum FontSources GetFontSource ( );
    void PutFontSource (
        enum FontSources val );
    VARIANT_BOOL GetScaleWithDPI ( );
    void PutScaleWithDPI (
        VARIANT_BOOL val );
    HRESULT Localize (
        _bstr_t sectionName );
    ExpressionEditButtonsPtr GetButtons ( );
    enum ExpressionEditStyles GetStyle ( );
    void PutStyle (
        enum ExpressionEditStyles val );
    ExpressionEditComboBoxItemsPtr GetComboBoxItems ( );
    VARIANT_BOOL GetShowDisplayNameWhenInactive ( );
    void PutShowDisplayNameWhenInactive (
        VARIANT_BOOL val );
    long GetDropDownListHwnd ( );
    _bstr_t GetDisplayText ( );
    void PutDisplayText (
        _bstr_t val );
    VARIANT_BOOL GetDisplayFormattedValue ( );
    void PutDisplayFormattedValue (
        VARIANT_BOOL val );
    _bstr_t GetNumericFormat ( );
    void PutNumericFormat (
        _bstr_t val );
    SAFEARRAY * GetAdditionalEvaluationConstants ( );
    HRESULT SetAdditionalEvaluationConstants (
        SAFEARRAY * val );
    enum BooleanOrPreference GetAutomaticallyPrefixVariables ( );
    void PutAutomaticallyPrefixVariables (
        enum BooleanOrPreference val );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_BackColor (
        /*[out,retval]*/ OLE_COLOR * val ) = 0;
      virtual HRESULT __stdcall put_BackColor (
        /*[in]*/ OLE_COLOR val ) = 0;
      virtual HRESULT __stdcall get_Borders (
        /*[out,retval]*/ struct Borders * * val ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_HideSelection (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_HideSelection (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_Font (
        /*[out,retval]*/ IFontDisp * * val ) = 0;
      virtual HRESULT __stdcall put_Font (
        /*[in]*/ IFontDisp * val ) = 0;
      virtual HRESULT __stdcall putref_Font (
        /*[in]*/ IFontDisp * val ) = 0;
      virtual HRESULT __stdcall get_hWnd (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall get_ReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_ReadOnly (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_MaxLength (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall put_MaxLength (
        /*[in]*/ long val ) = 0;
      virtual HRESULT __stdcall get_MouseIcon (
        /*[out,retval]*/ IPictureDisp * * val ) = 0;
      virtual HRESULT __stdcall put_MouseIcon (
        /*[in]*/ IPictureDisp * val ) = 0;
      virtual HRESULT __stdcall putref_MouseIcon (
        /*[in]*/ IPictureDisp * val ) = 0;
      virtual HRESULT __stdcall get_MousePointer (
        /*[out,retval]*/ enum MousePointerStyles * val ) = 0;
      virtual HRESULT __stdcall put_MousePointer (
        /*[in]*/ enum MousePointerStyles val ) = 0;
      virtual HRESULT __stdcall get_Multiline (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_Multiline (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_ScrollBars (
        /*[out,retval]*/ enum ScrollBars * val ) = 0;
      virtual HRESULT __stdcall put_ScrollBars (
        /*[in]*/ enum ScrollBars val ) = 0;
      virtual HRESULT __stdcall get_SelLength (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall put_SelLength (
        /*[in]*/ long val ) = 0;
      virtual HRESULT __stdcall get_SelStart (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall put_SelStart (
        /*[in]*/ long val ) = 0;
      virtual HRESULT __stdcall get_SelText (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_SelText (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_Text (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_Text (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_TextLength (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall get_WantReturn (
        /*[out,retval]*/ enum BooleanOrPreference * val ) = 0;
      virtual HRESULT __stdcall put_WantReturn (
        /*[in]*/ enum BooleanOrPreference val ) = 0;
      virtual HRESULT __stdcall get_WordWrap (
        /*[out,retval]*/ enum BooleanOrPreference * val ) = 0;
      virtual HRESULT __stdcall put_WordWrap (
        /*[in]*/ enum BooleanOrPreference val ) = 0;
      virtual HRESULT __stdcall raw_SelectAll ( ) = 0;
      virtual HRESULT __stdcall get_Engine (
        /*[out,retval]*/ struct TS::IEngine * * val ) = 0;
      virtual HRESULT __stdcall putref_Engine (
        /*[in]*/ struct TS::IEngine * val ) = 0;
      virtual HRESULT __stdcall get_Context (
        /*[out,retval]*/ struct TS::PropertyObject * * val ) = 0;
      virtual HRESULT __stdcall putref_Context (
        /*[in]*/ struct TS::PropertyObject * val ) = 0;
      virtual HRESULT __stdcall get_AutoLocalize (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_AutoLocalize (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_TextType (
        /*[out,retval]*/ enum TextTypes * val ) = 0;
      virtual HRESULT __stdcall put_TextType (
        /*[in]*/ enum TextTypes val ) = 0;
      virtual HRESULT __stdcall get_SyntaxHighlightingEnabled (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_SyntaxHighlightingEnabled (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall raw_Evaluate (
        /*[in]*/ long evaluationOptions,
        /*[out,retval]*/ struct TS::PropertyObject * * propObj ) = 0;
      virtual HRESULT __stdcall get_FunctionTipHwnd (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall get_AutoCompletionHwnd (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall get_AllowEmpty (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_AllowEmpty (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_ErrorCheck (
        /*[out,retval]*/ enum ErrorCheck * val ) = 0;
      virtual HRESULT __stdcall put_ErrorCheck (
        /*[in]*/ enum ErrorCheck val ) = 0;
      virtual HRESULT __stdcall get_RequiredTypes (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall put_RequiredTypes (
        /*[in]*/ long val ) = 0;
      virtual HRESULT __stdcall get_RequiredNamedTypes (
        /*[out,retval]*/ struct Strings * * val ) = 0;
      virtual HRESULT __stdcall get_RequiredNamedTypeArrays (
        /*[out,retval]*/ struct Strings * * val ) = 0;
      virtual HRESULT __stdcall raw_CheckExpression (
        /*[out]*/ BSTR * errorDescription,
        /*[out]*/ long * errorStartPosition,
        /*[out]*/ long * errorEndPosition,
        /*[out,retval]*/ enum TS::TSError * errorCode ) = 0;
      virtual HRESULT __stdcall raw_DisplayError (
        /*[in]*/ long options ) = 0;
      virtual HRESULT __stdcall get_BrowseExprDialogTitle (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_BrowseExprDialogTitle (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_BrowseExprDialogOptions (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall put_BrowseExprDialogOptions (
        /*[in]*/ long val ) = 0;
      virtual HRESULT __stdcall raw_DisplayBrowseExprDialog (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall get_FontSource (
        /*[out,retval]*/ enum FontSources * val ) = 0;
      virtual HRESULT __stdcall put_FontSource (
        /*[in]*/ enum FontSources val ) = 0;
      virtual HRESULT __stdcall get_ScaleWithDPI (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_ScaleWithDPI (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall raw_Localize (
        /*[in]*/ BSTR sectionName ) = 0;
      virtual HRESULT __stdcall get_Buttons (
        /*[out,retval]*/ struct ExpressionEditButtons * * val ) = 0;
      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ enum ExpressionEditStyles * val ) = 0;
      virtual HRESULT __stdcall put_Style (
        /*[in]*/ enum ExpressionEditStyles val ) = 0;
      virtual HRESULT __stdcall get_ComboBoxItems (
        /*[out,retval]*/ struct ExpressionEditComboBoxItems * * val ) = 0;
      virtual HRESULT __stdcall get_ShowDisplayNameWhenInactive (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_ShowDisplayNameWhenInactive (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_DropDownListHwnd (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall get_DisplayText (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_DisplayText (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_DisplayFormattedValue (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_DisplayFormattedValue (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_NumericFormat (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_NumericFormat (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall raw_GetAdditionalEvaluationConstants (
        /*[out,retval]*/ SAFEARRAY * * val ) = 0;
      virtual HRESULT __stdcall raw_SetAdditionalEvaluationConstants (
        /*[in]*/ SAFEARRAY * val ) = 0;
      virtual HRESULT __stdcall get_AutomaticallyPrefixVariables (
        /*[out,retval]*/ enum BooleanOrPreference * val ) = 0;
      virtual HRESULT __stdcall put_AutomaticallyPrefixVariables (
        /*[in]*/ enum BooleanOrPreference val ) = 0;
};

struct __declspec(uuid("e9da925c-d4a5-4c9b-9323-49f15b976cdb"))
_ExpressionEditEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT Click ( );
    HRESULT DblClick ( );
    HRESULT KeyDown (
        short * keyCode,
        short shift );
    HRESULT KeyPress (
        short * keyAscii );
    HRESULT KeyUp (
        short keyCode,
        short shift );
    HRESULT MouseDown (
        short btn,
        short shift,
        OLE_XPOS_PIXELS x,
        OLE_YPOS_PIXELS y );
    HRESULT MouseMove (
        short btn,
        short shift,
        OLE_XPOS_PIXELS x,
        OLE_YPOS_PIXELS y );
    HRESULT MouseUp (
        short btn,
        short shift,
        OLE_XPOS_PIXELS x,
        OLE_YPOS_PIXELS y );
    HRESULT Change ( );
    HRESULT SelChange ( );
    HRESULT BrowseExprDialogClosed (
        VARIANT_BOOL userHitOK,
        VARIANT_BOOL contextModified );
    HRESULT BorderDragged (
        long bordersChanged,
        OLE_XPOS_PIXELS newX,
        OLE_YPOS_PIXELS newY,
        OLE_XPOS_PIXELS newWidth,
        OLE_YPOS_PIXELS newHeight,
        VARIANT_BOOL finalResize );
    HRESULT ButtonClick (
        struct ExpressionEditButton * btn );
    HRESULT DropDown ( );
    HRESULT InsertComboBoxItem (
        struct ExpressionEditComboBoxItem * Item,
        long * insertStart,
        long * insertEnd );
    HRESULT CreateContextMenu (
        long menuHandle,
        OLE_XPOS_PIXELS x,
        OLE_YPOS_PIXELS y );
    HRESULT ContextMenuItemClick (
        long menuItemId );
    HRESULT ContextChanged (
        enum ContextChangedReasons reason );
    HRESULT BrowseExprDialogOpened (
        BSTR * dlgTitle,
        long * dlgOptions,
        long * selectionStart,
        long * selectionEnd,
        BSTR * initialVariableName,
        VARIANT_BOOL * cancel );
    HRESULT ConnectionActivity (
        enum ConnectionActivityTypes activity );
    HRESULT CheckExpression (
        enum TS::TSError * errorCode,
        BSTR * errorDescription,
        long * errorStartPosition,
        long * errorEndPosition );
};

struct __declspec(uuid("bcf787b9-790e-4cac-b4d8-dff602a86e2d"))
ListBarPageItem : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetIconName,put=PutIconName))
    _bstr_t IconName;
    __declspec(property(get=GetToolTipText,put=PutToolTipText))
    _bstr_t ToolTipText;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t val );
    long GetIndex ( );
    void PutIconName (
        _bstr_t val );
    _bstr_t GetIconName ( );
    _bstr_t GetToolTipText ( );
    void PutToolTipText (
        _bstr_t val );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_Caption (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall put_IconName (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_IconName (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall get_ToolTipText (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_ToolTipText (
        /*[in]*/ BSTR val ) = 0;
};

struct __declspec(uuid("49dc18bd-6acb-4792-8dde-18b04c043d83"))
ListBarPageItems : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    ListBarPageItemPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IUnknownPtr Get_NewEnum ( );
    ListBarPageItemPtr GetItem (
        const _variant_t & itemIdx );
    long GetCount ( );
    ListBarPageItemPtr Insert (
        _bstr_t itemCaption,
        _bstr_t IconName,
        long insertBefore );
    HRESULT Remove (
        long itemIdx );
    HRESULT Clear ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * val ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT itemIdx,
        /*[out,retval]*/ struct ListBarPageItem * * val ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall raw_Insert (
        /*[in]*/ BSTR itemCaption,
        /*[in]*/ BSTR IconName,
        /*[in]*/ long insertBefore,
        /*[out,retval]*/ struct ListBarPageItem * * val ) = 0;
      virtual HRESULT __stdcall raw_Remove (
        /*[in]*/ long itemIdx ) = 0;
      virtual HRESULT __stdcall raw_Clear ( ) = 0;
};

struct __declspec(uuid("ca37207a-ae9d-4c6a-b28a-10469026a7d4"))
ListBarPage : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetItems))
    ListBarPageItemsPtr Items;
    __declspec(property(get=GetCursor,put=PutCursor))
    long Cursor;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;

    //
    // Wrapper methods for error-handling
    //

    void PutName (
        _bstr_t val );
    _bstr_t GetName ( );
    long GetIndex ( );
    void PutCaption (
        _bstr_t val );
    _bstr_t GetCaption ( );
    ListBarPageItemsPtr GetItems ( );
    void PutCursor (
        long val );
    long GetCursor ( );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL val );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall put_Caption (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall get_Items (
        /*[out,retval]*/ struct ListBarPageItems * * val ) = 0;
      virtual HRESULT __stdcall put_Cursor (
        /*[in]*/ long val ) = 0;
      virtual HRESULT __stdcall get_Cursor (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL val ) = 0;
};

struct __declspec(uuid("9f16ad4c-15d8-4180-be66-ab62c64d9601"))
ListBarPages : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    ListBarPagePtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IUnknownPtr Get_NewEnum ( );
    ListBarPagePtr GetItem (
        const _variant_t & itemIdx );
    long GetCount ( );
    ListBarPagePtr Insert (
        _bstr_t pageName,
        long insertBefore );
    HRESULT Remove (
        long itemIdx );
    HRESULT Clear ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * val ) = 0;
      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT itemIdx,
        /*[out,retval]*/ struct ListBarPage * * val ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall raw_Insert (
        /*[in]*/ BSTR pageName,
        /*[in]*/ long insertBefore,
        /*[out,retval]*/ struct ListBarPage * * val ) = 0;
      virtual HRESULT __stdcall raw_Remove (
        /*[in]*/ long itemIdx ) = 0;
      virtual HRESULT __stdcall raw_Clear ( ) = 0;
};

struct __declspec(uuid("5ca55ac1-a7f1-470c-9094-3dbeefe0acf9"))
IListBar : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetButtonStyle,put=PutButtonStyle))
    enum ListBarButtonStyles ButtonStyle;
    __declspec(property(get=GetPageStyle,put=PutPageStyle))
    long PageStyle;
    __declspec(property(get=GetPages))
    ListBarPagesPtr Pages;
    __declspec(property(get=GetCurrentPage,put=PutCurrentPage))
    long CurrentPage;
    __declspec(property(get=GetShowItemCount,put=PutShowItemCount))
    VARIANT_BOOL ShowItemCount;
    __declspec(property(get=GetButtonTextColor,put=PutButtonTextColor))
    OLE_COLOR ButtonTextColor;
    __declspec(property(get=GetPageTextColor,put=PutPageTextColor))
    OLE_COLOR PageTextColor;
    __declspec(property(get=GetBackColor,put=PutBackColor))
    OLE_COLOR BackColor;
    __declspec(property(get=GetShowItemTipStrips,put=PutShowItemTipStrips))
    VARIANT_BOOL ShowItemTipStrips;
    __declspec(property(get=GetIconSize,put=PutIconSize))
    long IconSize;
    __declspec(property(get=GetShowScrollBar,put=PutShowScrollBar))
    VARIANT_BOOL ShowScrollBar;
    __declspec(property(get=GetButtonFontSource,put=PutButtonFontSource))
    enum FontSources ButtonFontSource;
    __declspec(property(get=GetPageFontSource,put=PutPageFontSource))
    enum FontSources PageFontSource;
    __declspec(property(get=GetScaleWithDPI,put=PutScaleWithDPI))
    VARIANT_BOOL ScaleWithDPI;
    __declspec(property(get=GetBorders))
    BordersPtr Borders;
    __declspec(property(get=GethWnd))
    long hWnd;

    //
    // Wrapper methods for error-handling
    //

    long GethWnd ( );
    enum ListBarButtonStyles GetButtonStyle ( );
    void PutButtonStyle (
        enum ListBarButtonStyles val );
    void PutButtonFont (
        IFontDisp * val );
    void PutRefButtonFont (
        IFontDisp * val );
    IFontDisp * GetButtonFont ( );
    long GetPageStyle ( );
    void PutPageStyle (
        long val );
    void PutRefPageFont (
        IFontDisp * val );
    void PutPageFont (
        IFontDisp * val );
    IFontDisp * GetPageFont ( );
    ListBarPagesPtr GetPages ( );
    long GetCurrentPage ( );
    void PutCurrentPage (
        long val );
    long HitTest (
        long x,
        long y );
    VARIANT_BOOL GetShowItemCount ( );
    void PutShowItemCount (
        VARIANT_BOOL val );
    OLE_COLOR GetButtonTextColor ( );
    void PutButtonTextColor (
        OLE_COLOR val );
    OLE_COLOR GetPageTextColor ( );
    void PutPageTextColor (
        OLE_COLOR val );
    OLE_COLOR GetBackColor ( );
    void PutBackColor (
        OLE_COLOR val );
    VARIANT_BOOL GetShowItemTipStrips ( );
    void PutShowItemTipStrips (
        VARIANT_BOOL val );
    HRESULT Localize (
        _bstr_t sectionName );
    long GetIconSize ( );
    void PutIconSize (
        long val );
    VARIANT_BOOL GetShowScrollBar ( );
    void PutShowScrollBar (
        VARIANT_BOOL val );
    enum FontSources GetButtonFontSource ( );
    void PutButtonFontSource (
        enum FontSources val );
    enum FontSources GetPageFontSource ( );
    void PutPageFontSource (
        enum FontSources val );
    VARIANT_BOOL GetScaleWithDPI ( );
    void PutScaleWithDPI (
        VARIANT_BOOL val );
    BordersPtr GetBorders ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_hWnd (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall get_ButtonStyle (
        /*[out,retval]*/ enum ListBarButtonStyles * val ) = 0;
      virtual HRESULT __stdcall put_ButtonStyle (
        /*[in]*/ enum ListBarButtonStyles val ) = 0;
      virtual HRESULT __stdcall put_ButtonFont (
        /*[in]*/ IFontDisp * val ) = 0;
      virtual HRESULT __stdcall putref_ButtonFont (
        /*[in]*/ IFontDisp * val ) = 0;
      virtual HRESULT __stdcall get_ButtonFont (
        /*[out,retval]*/ IFontDisp * * val ) = 0;
      virtual HRESULT __stdcall get_PageStyle (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall put_PageStyle (
        /*[in]*/ long val ) = 0;
      virtual HRESULT __stdcall putref_PageFont (
        /*[in]*/ IFontDisp * val ) = 0;
      virtual HRESULT __stdcall put_PageFont (
        /*[in]*/ IFontDisp * val ) = 0;
      virtual HRESULT __stdcall get_PageFont (
        /*[out,retval]*/ IFontDisp * * val ) = 0;
      virtual HRESULT __stdcall get_Pages (
        /*[out,retval]*/ struct ListBarPages * * val ) = 0;
      virtual HRESULT __stdcall get_CurrentPage (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall put_CurrentPage (
        /*[in]*/ long val ) = 0;
      virtual HRESULT __stdcall raw_HitTest (
        /*[in]*/ long x,
        /*[in]*/ long y,
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall get_ShowItemCount (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_ShowItemCount (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_ButtonTextColor (
        /*[out,retval]*/ OLE_COLOR * val ) = 0;
      virtual HRESULT __stdcall put_ButtonTextColor (
        /*[in]*/ OLE_COLOR val ) = 0;
      virtual HRESULT __stdcall get_PageTextColor (
        /*[out,retval]*/ OLE_COLOR * val ) = 0;
      virtual HRESULT __stdcall put_PageTextColor (
        /*[in]*/ OLE_COLOR val ) = 0;
      virtual HRESULT __stdcall get_BackColor (
        /*[out,retval]*/ OLE_COLOR * val ) = 0;
      virtual HRESULT __stdcall put_BackColor (
        /*[in]*/ OLE_COLOR val ) = 0;
      virtual HRESULT __stdcall get_ShowItemTipStrips (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_ShowItemTipStrips (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall raw_Localize (
        /*[in]*/ BSTR sectionName ) = 0;
      virtual HRESULT __stdcall get_IconSize (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall put_IconSize (
        /*[in]*/ long val ) = 0;
      virtual HRESULT __stdcall get_ShowScrollBar (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_ShowScrollBar (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_ButtonFontSource (
        /*[out,retval]*/ enum FontSources * val ) = 0;
      virtual HRESULT __stdcall put_ButtonFontSource (
        /*[in]*/ enum FontSources val ) = 0;
      virtual HRESULT __stdcall get_PageFontSource (
        /*[out,retval]*/ enum FontSources * val ) = 0;
      virtual HRESULT __stdcall put_PageFontSource (
        /*[in]*/ enum FontSources val ) = 0;
      virtual HRESULT __stdcall get_ScaleWithDPI (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_ScaleWithDPI (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_Borders (
        /*[out,retval]*/ struct Borders * * val ) = 0;
};

struct __declspec(uuid("ab3ba461-de0c-4411-bc41-32e77802780c"))
_ListBarEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT CursorMoved (
        long itemIdx );
    HRESULT CurPageChanged (
        long CurrentPage );
    HRESULT KeyDown (
        short * keyCode,
        short shift );
    HRESULT MouseMove (
        short btn,
        short shift,
        OLE_XPOS_PIXELS x,
        OLE_YPOS_PIXELS y );
    HRESULT MouseDown (
        short btn,
        short shift,
        OLE_XPOS_PIXELS x,
        OLE_YPOS_PIXELS y );
    HRESULT MouseUp (
        short btn,
        short shift,
        OLE_XPOS_PIXELS x,
        OLE_YPOS_PIXELS y );
    HRESULT DblClick ( );
    HRESULT CreateContextMenu (
        long menuHandle,
        OLE_XPOS_PIXELS x,
        OLE_YPOS_PIXELS y );
    HRESULT BorderDragged (
        long bordersChanged,
        OLE_XPOS_PIXELS newX,
        OLE_YPOS_PIXELS newY,
        OLE_XPOS_PIXELS newWidth,
        OLE_YPOS_PIXELS newHeight,
        VARIANT_BOOL finalResize );
    HRESULT ConnectionActivity (
        enum ConnectionActivityTypes activity,
        long pageIndex );
};

struct __declspec(uuid("253db546-eade-4e85-aa44-61e63f7327cd"))
StatusBarPane : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIconName,put=PutIconName))
    _bstr_t IconName;
    __declspec(property(get=GetProcessPercent,put=PutProcessPercent))
    double ProcessPercent;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetWidth,put=PutWidth))
    long Width;
    __declspec(property(get=GetStyle,put=PutStyle))
    enum StatusBarPaneStyles Style;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetTextAlignment,put=PutTextAlignment))
    enum AlignmentStyles TextAlignment;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetUseAvailableSpace,put=PutUseAvailableSpace))
    VARIANT_BOOL UseAvailableSpace;
    __declspec(property(get=GetToolTipText,put=PutToolTipText))
    _bstr_t ToolTipText;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;

    //
    // Wrapper methods for error-handling
    //

    void PutIconName (
        _bstr_t val );
    _bstr_t GetIconName ( );
    double GetProcessPercent ( );
    void PutProcessPercent (
        double val );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t val );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t val );
    long GetWidth ( );
    void PutWidth (
        long val );
    enum StatusBarPaneStyles GetStyle ( );
    void PutStyle (
        enum StatusBarPaneStyles val );
    long GetIndex ( );
    enum AlignmentStyles GetTextAlignment ( );
    void PutTextAlignment (
        enum AlignmentStyles val );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL val );
    VARIANT_BOOL GetUseAvailableSpace ( );
    void PutUseAvailableSpace (
        VARIANT_BOOL val );
    _bstr_t GetToolTipText ( );
    void PutToolTipText (
        _bstr_t val );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall put_IconName (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_IconName (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall get_ProcessPercent (
        /*[out,retval]*/ double * val ) = 0;
      virtual HRESULT __stdcall put_ProcessPercent (
        /*[in]*/ double val ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_Caption (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ long val ) = 0;
      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ enum StatusBarPaneStyles * val ) = 0;
      virtual HRESULT __stdcall put_Style (
        /*[in]*/ enum StatusBarPaneStyles val ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall get_TextAlignment (
        /*[out,retval]*/ enum AlignmentStyles * val ) = 0;
      virtual HRESULT __stdcall put_TextAlignment (
        /*[in]*/ enum AlignmentStyles val ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_UseAvailableSpace (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_UseAvailableSpace (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_ToolTipText (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_ToolTipText (
        /*[in]*/ BSTR val ) = 0;
};

struct __declspec(uuid("48070f99-ffb0-4470-9f91-a3ace5070f8d"))
StatusBarPanes : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    StatusBarPanePtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    StatusBarPanePtr GetItem (
        const _variant_t & paneIndex );
    IUnknownPtr Get_NewEnum ( );
    long GetCount ( );
    StatusBarPanePtr Insert (
        _bstr_t paneName,
        long insertBefore );
    HRESULT Clear ( );
    HRESULT Remove (
        const _variant_t & paneIndex );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT paneIndex,
        /*[out,retval]*/ struct StatusBarPane * * val ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * val ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall raw_Insert (
        /*[in]*/ BSTR paneName,
        /*[in]*/ long insertBefore,
        /*[out,retval]*/ struct StatusBarPane * * val ) = 0;
      virtual HRESULT __stdcall raw_Clear ( ) = 0;
      virtual HRESULT __stdcall raw_Remove (
        /*[in]*/ VARIANT paneIndex ) = 0;
};

struct __declspec(uuid("9ce1ada4-09a8-4158-b1e2-f3489316e12b"))
IStatusBar : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetPanes))
    StatusBarPanesPtr Panes;
    __declspec(property(get=GetAutoSize,put=PutAutoSize))
    VARIANT_BOOL AutoSize;
    __declspec(property(get=GetShowTopDivider,put=PutShowTopDivider))
    VARIANT_BOOL ShowTopDivider;
    __declspec(property(get=GetShowResizingGrip,put=PutShowResizingGrip))
    VARIANT_BOOL ShowResizingGrip;
    __declspec(property(get=GetIconSize,put=PutIconSize))
    long IconSize;
    __declspec(property(get=GetFontSource,put=PutFontSource))
    enum FontSources FontSource;
    __declspec(property(get=GetScaleWithDPI,put=PutScaleWithDPI))
    VARIANT_BOOL ScaleWithDPI;
    __declspec(property(get=GethWnd))
    long hWnd;

    //
    // Wrapper methods for error-handling
    //

    StatusBarPanesPtr GetPanes ( );
    void PutFont (
        IFontDisp * val );
    IFontDisp * GetFont ( );
    void PutRefFont (
        IFontDisp * val );
    VARIANT_BOOL GetAutoSize ( );
    void PutAutoSize (
        VARIANT_BOOL val );
    VARIANT_BOOL GetShowTopDivider ( );
    void PutShowTopDivider (
        VARIANT_BOOL val );
    long GethWnd ( );
    HRESULT Localize (
        _bstr_t sectionName );
    long HitTest (
        long x,
        long y );
    HRESULT ShowPanes (
        _bstr_t panesList );
    void PutShowResizingGrip (
        VARIANT_BOOL val );
    VARIANT_BOOL GetShowResizingGrip ( );
    long GetIconSize ( );
    void PutIconSize (
        long val );
    enum FontSources GetFontSource ( );
    void PutFontSource (
        enum FontSources val );
    VARIANT_BOOL GetScaleWithDPI ( );
    void PutScaleWithDPI (
        VARIANT_BOOL val );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Panes (
        /*[out,retval]*/ struct StatusBarPanes * * val ) = 0;
      virtual HRESULT __stdcall put_Font (
        /*[in]*/ IFontDisp * val ) = 0;
      virtual HRESULT __stdcall get_Font (
        /*[out,retval]*/ IFontDisp * * val ) = 0;
      virtual HRESULT __stdcall putref_Font (
        /*[in]*/ IFontDisp * val ) = 0;
      virtual HRESULT __stdcall get_AutoSize (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_AutoSize (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_ShowTopDivider (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_ShowTopDivider (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_hWnd (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall raw_Localize (
        /*[in]*/ BSTR sectionName ) = 0;
      virtual HRESULT __stdcall raw_HitTest (
        /*[in]*/ long x,
        /*[in]*/ long y,
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall raw_ShowPanes (
        /*[in]*/ BSTR panesList ) = 0;
      virtual HRESULT __stdcall put_ShowResizingGrip (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_ShowResizingGrip (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall get_IconSize (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall put_IconSize (
        /*[in]*/ long val ) = 0;
      virtual HRESULT __stdcall get_FontSource (
        /*[out,retval]*/ enum FontSources * val ) = 0;
      virtual HRESULT __stdcall put_FontSource (
        /*[in]*/ enum FontSources val ) = 0;
      virtual HRESULT __stdcall get_ScaleWithDPI (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_ScaleWithDPI (
        /*[in]*/ VARIANT_BOOL val ) = 0;
};

struct __declspec(uuid("e605428d-eb10-4dae-b6a3-52173e45ea5f"))
_StatusBarEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT MouseDown (
        short btn,
        short shift,
        OLE_XPOS_PIXELS x,
        OLE_YPOS_PIXELS y );
    HRESULT MouseMove (
        short btn,
        short shift,
        OLE_XPOS_PIXELS x,
        OLE_YPOS_PIXELS y );
    HRESULT MouseUp (
        short btn,
        short shift,
        OLE_XPOS_PIXELS x,
        OLE_YPOS_PIXELS y );
    HRESULT DblClick ( );
    HRESULT Resized (
        short newWidth,
        short newHeight );
    HRESULT ConnectionActivity (
        enum ConnectionActivityTypes activity );
};

struct __declspec(uuid("be676080-61ac-11d5-8efa-0050dac50018"))
IComboBox : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetReadOnly,put=PutReadOnly))
    VARIANT_BOOL ReadOnly;
    __declspec(property(get=GetHeightWithDropDown,put=PutHeightWithDropDown))
    long HeightWithDropDown;
    __declspec(property(get=GetStyle,put=PutStyle))
    enum ComboBoxStyles Style;
    __declspec(property(get=GetIconSize,put=PutIconSize))
    long IconSize;
    __declspec(property(get=GetFontSource,put=PutFontSource))
    enum FontSources FontSource;
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetScaleWithDPI,put=PutScaleWithDPI))
    VARIANT_BOOL ScaleWithDPI;
    __declspec(property(get=GetShowImages,put=PutShowImages))
    VARIANT_BOOL ShowImages;
    __declspec(property(get=GetToolTipVisible,put=PutToolTipVisible))
    VARIANT_BOOL ToolTipVisible;
    __declspec(property(get=GetItemIndex,put=PutItemIndex))
    long ItemIndex;
    __declspec(property(get=GetMousePointer,put=PutMousePointer))
    enum MousePointerStyles MousePointer;
    __declspec(property(get=GethWnd))
    long hWnd;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL val );
    enum MousePointerStyles GetMousePointer ( );
    void PutMousePointer (
        enum MousePointerStyles val );
    IPictureDisp * GetMouseIcon ( );
    void PutMouseIcon (
        IPictureDisp * val );
    void PutRefMouseIcon (
        IPictureDisp * val );
    IFontDisp * GetFont ( );
    void PutFont (
        IFontDisp * val );
    void PutRefFont (
        IFontDisp * val );
    long GetItemIndex ( );
    void PutItemIndex (
        long val );
    VARIANT_BOOL GetReadOnly ( );
    void PutReadOnly (
        VARIANT_BOOL val );
    long GetHeightWithDropDown ( );
    void PutHeightWithDropDown (
        long val );
    enum ComboBoxStyles GetStyle ( );
    void PutStyle (
        enum ComboBoxStyles val );
    long GetIconSize ( );
    void PutIconSize (
        long val );
    long GethWnd ( );
    enum FontSources GetFontSource ( );
    void PutFontSource (
        enum FontSources val );
    long GetCount ( );
    VARIANT_BOOL GetScaleWithDPI ( );
    void PutScaleWithDPI (
        VARIANT_BOOL val );
    _bstr_t GetItemText (
        long itemIdx );
    VARIANT_BOOL GetShowImages ( );
    void PutShowImages (
        VARIANT_BOOL val );
    VARIANT_BOOL GetToolTipVisible ( );
    void PutToolTipVisible (
        VARIANT_BOOL val );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_MousePointer (
        /*[out,retval]*/ enum MousePointerStyles * val ) = 0;
      virtual HRESULT __stdcall put_MousePointer (
        /*[in]*/ enum MousePointerStyles val ) = 0;
      virtual HRESULT __stdcall get_MouseIcon (
        /*[out,retval]*/ IPictureDisp * * val ) = 0;
      virtual HRESULT __stdcall put_MouseIcon (
        /*[in]*/ IPictureDisp * val ) = 0;
      virtual HRESULT __stdcall putref_MouseIcon (
        /*[in]*/ IPictureDisp * val ) = 0;
      virtual HRESULT __stdcall get_Font (
        /*[out,retval]*/ IFontDisp * * val ) = 0;
      virtual HRESULT __stdcall put_Font (
        /*[in]*/ IFontDisp * val ) = 0;
      virtual HRESULT __stdcall putref_Font (
        /*[in]*/ IFontDisp * val ) = 0;
      virtual HRESULT __stdcall get_ItemIndex (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall put_ItemIndex (
        /*[in]*/ long val ) = 0;
      virtual HRESULT __stdcall get_ReadOnly (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_ReadOnly (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_HeightWithDropDown (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall put_HeightWithDropDown (
        /*[in]*/ long val ) = 0;
      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ enum ComboBoxStyles * val ) = 0;
      virtual HRESULT __stdcall put_Style (
        /*[in]*/ enum ComboBoxStyles val ) = 0;
      virtual HRESULT __stdcall get_IconSize (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall put_IconSize (
        /*[in]*/ long val ) = 0;
      virtual HRESULT __stdcall get_hWnd (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall get_FontSource (
        /*[out,retval]*/ enum FontSources * val ) = 0;
      virtual HRESULT __stdcall put_FontSource (
        /*[in]*/ enum FontSources val ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall get_ScaleWithDPI (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_ScaleWithDPI (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall raw_GetItemText (
        /*[in]*/ long itemIdx,
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall get_ShowImages (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_ShowImages (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_ToolTipVisible (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_ToolTipVisible (
        /*[in]*/ VARIANT_BOOL val ) = 0;
};

struct __declspec(uuid("be676084-61ac-11d5-8efa-0050dac50018"))
_ComboBoxEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT Click ( );
    HRESULT KeyDown (
        short * keyCode,
        short shift );
    HRESULT KeyPress (
        short * keyAscii );
    HRESULT KeyUp (
        short keyCode,
        short shift );
    HRESULT Change ( );
    HRESULT DropDown ( );
    HRESULT ConnectionActivity (
        enum ConnectionActivityTypes activity );
};

struct __declspec(uuid("64c16c61-3062-412f-a3b3-297c46359e3c"))
ListBoxColumn : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetWidth,put=PutWidth))
    long Width;
    __declspec(property(get=GetAutoSizing,put=PutAutoSizing))
    enum AutoSizingOptions AutoSizing;
    __declspec(property(get=GetCaption))
    _bstr_t Caption;

    //
    // Wrapper methods for error-handling
    //

    long GetIndex ( );
    long GetWidth ( );
    void PutWidth (
        long val );
    enum AutoSizingOptions GetAutoSizing ( );
    void PutAutoSizing (
        enum AutoSizingOptions val );
    _bstr_t GetCaption ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ long val ) = 0;
      virtual HRESULT __stdcall get_AutoSizing (
        /*[out,retval]*/ enum AutoSizingOptions * val ) = 0;
      virtual HRESULT __stdcall put_AutoSizing (
        /*[in]*/ enum AutoSizingOptions val ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * val ) = 0;
};

struct __declspec(uuid("e6966808-139e-4032-830b-ca5e1a92c6cf"))
ListBoxColumns : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    ListBoxColumnPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    ListBoxColumnPtr GetItem (
        long itemIdx );
    IUnknownPtr Get_NewEnum ( );
    long GetCount ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long itemIdx,
        /*[out,retval]*/ struct ListBoxColumn * * val ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * val ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * val ) = 0;
};

struct __declspec(uuid("a6fa998b-98ef-11d2-93b7-00a02411ebe6"))
IListBox : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetFontSource,put=PutFontSource))
    enum FontSources FontSource;
    __declspec(property(get=GetScaleWithDPI,put=PutScaleWithDPI))
    VARIANT_BOOL ScaleWithDPI;
    __declspec(property(get=GetToolTipVisible,put=PutToolTipVisible))
    VARIANT_BOOL ToolTipVisible;
    __declspec(property(get=GetBorders))
    BordersPtr Borders;
    __declspec(property(get=GetEditingFlags,put=PutEditingFlags))
    long EditingFlags;
    __declspec(property(get=GetBackColor,put=PutBackColor))
    OLE_COLOR BackColor;
    __declspec(property(get=GetCanEditLabel))
    VARIANT_BOOL CanEditLabel;
    __declspec(property(get=GetShowHeaders,put=PutShowHeaders))
    VARIANT_BOOL ShowHeaders;
    __declspec(property(get=GetColumnSet))
    ListBoxColumnsPtr ColumnSet;
    __declspec(property(get=GetColumns,put=PutColumns))
    long Columns;
    __declspec(property(get=GetAutoSizeColumns,put=PutAutoSizeColumns))
    VARIANT_BOOL AutoSizeColumns;
    __declspec(property(get=GetItemIndex,put=PutItemIndex))
    long ItemIndex;
    __declspec(property(get=GetMousePointer,put=PutMousePointer))
    enum MousePointerStyles MousePointer;
    __declspec(property(get=GethWnd))
    long hWnd;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetForeColor,put=PutForeColor))
    OLE_COLOR ForeColor;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL val );
    enum MousePointerStyles GetMousePointer ( );
    void PutMousePointer (
        enum MousePointerStyles val );
    IPictureDisp * GetMouseIcon ( );
    void PutMouseIcon (
        IPictureDisp * val );
    void PutRefMouseIcon (
        IPictureDisp * val );
    IFontDisp * GetFont ( );
    void PutFont (
        IFontDisp * val );
    void PutRefFont (
        IFontDisp * val );
    OLE_COLOR GetBackColor ( );
    void PutBackColor (
        OLE_COLOR val );
    long GetItemIndex ( );
    void PutItemIndex (
        long val );
    long GetCount ( );
    long GetColumns ( );
    void PutColumns (
        long val );
    OLE_COLOR GetForeColor ( );
    void PutForeColor (
        OLE_COLOR val );
    long HitTest (
        long x,
        long y );
    long GethWnd ( );
    enum FontSources GetFontSource ( );
    void PutFontSource (
        enum FontSources val );
    VARIANT_BOOL GetScaleWithDPI ( );
    void PutScaleWithDPI (
        VARIANT_BOOL val );
    _bstr_t GetItemText (
        long itemIdx );
    VARIANT_BOOL GetToolTipVisible ( );
    void PutToolTipVisible (
        VARIANT_BOOL val );
    BordersPtr GetBorders ( );
    long GetEditingFlags ( );
    void PutEditingFlags (
        long val );
    VARIANT_BOOL GetCanEditLabel ( );
    HRESULT EditLabel ( );
    VARIANT_BOOL GetShowHeaders ( );
    void PutShowHeaders (
        VARIANT_BOOL val );
    ListBoxColumnsPtr GetColumnSet ( );
    VARIANT_BOOL GetAutoSizeColumns ( );
    void PutAutoSizeColumns (
        VARIANT_BOOL val );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_MousePointer (
        /*[out,retval]*/ enum MousePointerStyles * val ) = 0;
      virtual HRESULT __stdcall put_MousePointer (
        /*[in]*/ enum MousePointerStyles val ) = 0;
      virtual HRESULT __stdcall get_MouseIcon (
        /*[out,retval]*/ IPictureDisp * * val ) = 0;
      virtual HRESULT __stdcall put_MouseIcon (
        /*[in]*/ IPictureDisp * val ) = 0;
      virtual HRESULT __stdcall putref_MouseIcon (
        /*[in]*/ IPictureDisp * val ) = 0;
      virtual HRESULT __stdcall get_Font (
        /*[out,retval]*/ IFontDisp * * val ) = 0;
      virtual HRESULT __stdcall put_Font (
        /*[in]*/ IFontDisp * val ) = 0;
      virtual HRESULT __stdcall putref_Font (
        /*[in]*/ IFontDisp * val ) = 0;
      virtual HRESULT __stdcall get_BackColor (
        /*[out,retval]*/ OLE_COLOR * val ) = 0;
      virtual HRESULT __stdcall put_BackColor (
        /*[in]*/ OLE_COLOR val ) = 0;
      virtual HRESULT __stdcall get_ItemIndex (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall put_ItemIndex (
        /*[in]*/ long val ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall get_Columns (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall put_Columns (
        /*[in]*/ long val ) = 0;
      virtual HRESULT __stdcall get_ForeColor (
        /*[out,retval]*/ OLE_COLOR * val ) = 0;
      virtual HRESULT __stdcall put_ForeColor (
        /*[in]*/ OLE_COLOR val ) = 0;
      virtual HRESULT __stdcall raw_HitTest (
        /*[in]*/ long x,
        /*[in]*/ long y,
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall get_hWnd (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall get_FontSource (
        /*[out,retval]*/ enum FontSources * val ) = 0;
      virtual HRESULT __stdcall put_FontSource (
        /*[in]*/ enum FontSources val ) = 0;
      virtual HRESULT __stdcall get_ScaleWithDPI (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_ScaleWithDPI (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall raw_GetItemText (
        /*[in]*/ long itemIdx,
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall get_ToolTipVisible (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_ToolTipVisible (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_Borders (
        /*[out,retval]*/ struct Borders * * val ) = 0;
      virtual HRESULT __stdcall get_EditingFlags (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall put_EditingFlags (
        /*[in]*/ long val ) = 0;
      virtual HRESULT __stdcall get_CanEditLabel (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall raw_EditLabel ( ) = 0;
      virtual HRESULT __stdcall get_ShowHeaders (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_ShowHeaders (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_ColumnSet (
        /*[out,retval]*/ struct ListBoxColumns * * val ) = 0;
      virtual HRESULT __stdcall get_AutoSizeColumns (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_AutoSizeColumns (
        /*[in]*/ VARIANT_BOOL val ) = 0;
};

struct __declspec(uuid("a6fa998d-98ef-11d2-93b7-00a02411ebe6"))
_ListBoxEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT Click ( );
    HRESULT KeyDown (
        short * keyCode,
        short shift );
    HRESULT KeyPress (
        short * keyAscii );
    HRESULT KeyUp (
        short keyCode,
        short shift );
    HRESULT MouseDown (
        short btn,
        short shift,
        OLE_XPOS_PIXELS x,
        OLE_YPOS_PIXELS y );
    HRESULT MouseMove (
        short btn,
        short shift,
        OLE_XPOS_PIXELS x,
        OLE_YPOS_PIXELS y );
    HRESULT MouseUp (
        short btn,
        short shift,
        OLE_XPOS_PIXELS x,
        OLE_YPOS_PIXELS y );
    HRESULT BorderDragged (
        long bordersChanged,
        OLE_XPOS_PIXELS newX,
        OLE_YPOS_PIXELS newY,
        OLE_XPOS_PIXELS newWidth,
        OLE_YPOS_PIXELS newHeight,
        VARIANT_BOOL finalResize );
    HRESULT CreateContextMenu (
        long menuHandle,
        OLE_XPOS_PIXELS x,
        OLE_YPOS_PIXELS y );
    HRESULT ConnectionActivity (
        enum ConnectionActivityTypes activity );
    HRESULT DblClick ( );
    HRESULT ColumnsResized ( );
};

struct __declspec(uuid("c50fd121-99bf-11d2-93b7-00a02411ebe6"))
ILabel : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetUseMnemonic,put=PutUseMnemonic))
    VARIANT_BOOL UseMnemonic;
    __declspec(property(get=GetAlignment,put=PutAlignment))
    enum AlignmentStyles Alignment;
    __declspec(property(get=GetFontSource,put=PutFontSource))
    enum FontSources FontSource;
    __declspec(property(get=GetScaleWithDPI,put=PutScaleWithDPI))
    VARIANT_BOOL ScaleWithDPI;
    __declspec(property(get=GetWordWrap,put=PutWordWrap))
    VARIANT_BOOL WordWrap;
    __declspec(property(get=GetBorderStyle,put=PutBorderStyle))
    enum BorderStyles BorderStyle;
    __declspec(property(get=GetBackColor,put=PutBackColor))
    OLE_COLOR BackColor;
    __declspec(property(get=GetAutoSize,put=PutAutoSize))
    VARIANT_BOOL AutoSize;
    __declspec(property(get=GetMousePointer,put=PutMousePointer))
    enum MousePointerStyles MousePointer;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetForeColor,put=PutForeColor))
    OLE_COLOR ForeColor;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL val );
    enum MousePointerStyles GetMousePointer ( );
    void PutMousePointer (
        enum MousePointerStyles val );
    IPictureDisp * GetMouseIcon ( );
    void PutMouseIcon (
        IPictureDisp * val );
    void PutRefMouseIcon (
        IPictureDisp * val );
    IFontDisp * GetFont ( );
    void PutFont (
        IFontDisp * val );
    void PutRefFont (
        IFontDisp * val );
    OLE_COLOR GetBackColor ( );
    void PutBackColor (
        OLE_COLOR val );
    OLE_COLOR GetForeColor ( );
    void PutForeColor (
        OLE_COLOR val );
    VARIANT_BOOL GetAutoSize ( );
    void PutAutoSize (
        VARIANT_BOOL val );
    VARIANT_BOOL GetWordWrap ( );
    void PutWordWrap (
        VARIANT_BOOL val );
    VARIANT_BOOL GetUseMnemonic ( );
    void PutUseMnemonic (
        VARIANT_BOOL val );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t val );
    enum BorderStyles GetBorderStyle ( );
    void PutBorderStyle (
        enum BorderStyles val );
    enum AlignmentStyles GetAlignment ( );
    void PutAlignment (
        enum AlignmentStyles val );
    HRESULT Localize (
        _bstr_t sectionName );
    enum FontSources GetFontSource ( );
    void PutFontSource (
        enum FontSources val );
    VARIANT_BOOL GetScaleWithDPI ( );
    void PutScaleWithDPI (
        VARIANT_BOOL val );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_MousePointer (
        /*[out,retval]*/ enum MousePointerStyles * val ) = 0;
      virtual HRESULT __stdcall put_MousePointer (
        /*[in]*/ enum MousePointerStyles val ) = 0;
      virtual HRESULT __stdcall get_MouseIcon (
        /*[out,retval]*/ IPictureDisp * * val ) = 0;
      virtual HRESULT __stdcall put_MouseIcon (
        /*[in]*/ IPictureDisp * val ) = 0;
      virtual HRESULT __stdcall putref_MouseIcon (
        /*[in]*/ IPictureDisp * val ) = 0;
      virtual HRESULT __stdcall get_Font (
        /*[out,retval]*/ IFontDisp * * val ) = 0;
      virtual HRESULT __stdcall put_Font (
        /*[in]*/ IFontDisp * val ) = 0;
      virtual HRESULT __stdcall putref_Font (
        /*[in]*/ IFontDisp * val ) = 0;
      virtual HRESULT __stdcall get_BackColor (
        /*[out,retval]*/ OLE_COLOR * val ) = 0;
      virtual HRESULT __stdcall put_BackColor (
        /*[in]*/ OLE_COLOR val ) = 0;
      virtual HRESULT __stdcall get_ForeColor (
        /*[out,retval]*/ OLE_COLOR * val ) = 0;
      virtual HRESULT __stdcall put_ForeColor (
        /*[in]*/ OLE_COLOR val ) = 0;
      virtual HRESULT __stdcall get_AutoSize (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_AutoSize (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_WordWrap (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_WordWrap (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_UseMnemonic (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_UseMnemonic (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_Caption (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_BorderStyle (
        /*[out,retval]*/ enum BorderStyles * val ) = 0;
      virtual HRESULT __stdcall put_BorderStyle (
        /*[in]*/ enum BorderStyles val ) = 0;
      virtual HRESULT __stdcall get_Alignment (
        /*[out,retval]*/ enum AlignmentStyles * val ) = 0;
      virtual HRESULT __stdcall put_Alignment (
        /*[in]*/ enum AlignmentStyles val ) = 0;
      virtual HRESULT __stdcall raw_Localize (
        /*[in]*/ BSTR sectionName ) = 0;
      virtual HRESULT __stdcall get_FontSource (
        /*[out,retval]*/ enum FontSources * val ) = 0;
      virtual HRESULT __stdcall put_FontSource (
        /*[in]*/ enum FontSources val ) = 0;
      virtual HRESULT __stdcall get_ScaleWithDPI (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_ScaleWithDPI (
        /*[in]*/ VARIANT_BOOL val ) = 0;
};

struct __declspec(uuid("c50fd123-99bf-11d2-93b7-00a02411ebe6"))
_LabelEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT Click ( );
    HRESULT MouseDown (
        short btn,
        short shift,
        OLE_XPOS_PIXELS x,
        OLE_YPOS_PIXELS y );
    HRESULT MouseMove (
        short btn,
        short shift,
        OLE_XPOS_PIXELS x,
        OLE_YPOS_PIXELS y );
    HRESULT MouseUp (
        short btn,
        short shift,
        OLE_XPOS_PIXELS x,
        OLE_YPOS_PIXELS y );
    HRESULT Change ( );
    HRESULT ConnectionActivity (
        enum ConnectionActivityTypes activity );
};

struct __declspec(uuid("f54f4eba-497c-11d5-8eeb-0050dac50018"))
IReportView : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetToolBarVisible,put=PutToolBarVisible))
    VARIANT_BOOL ToolBarVisible;
    __declspec(property(get=GetLargeIcons,put=PutLargeIcons))
    VARIANT_BOOL LargeIcons;
    __declspec(property(get=GetToolBarTextStyle,put=PutToolBarTextStyle))
    enum ToolBarTextStyles ToolBarTextStyle;
    __declspec(property(get=GetButtonsVisible,put=PutButtonsVisible))
    long ButtonsVisible;
    __declspec(property(get=GetTextReportFontSource,put=PutTextReportFontSource))
    enum FontSources TextReportFontSource;
    __declspec(property(get=GetTextReportColor,put=PutTextReportColor))
    OLE_COLOR TextReportColor;
    __declspec(property(get=GetTextReportBackColor,put=PutTextReportBackColor))
    OLE_COLOR TextReportBackColor;
    __declspec(property(get=GetScaleWithDPI,put=PutScaleWithDPI))
    VARIANT_BOOL ScaleWithDPI;
    __declspec(property(get=GetBorders))
    BordersPtr Borders;

    //
    // Wrapper methods for error-handling
    //

    HRESULT PrintReport (
        VARIANT_BOOL showPrintDialog );
    HRESULT UpdateFromExecution (
        struct TS::Execution * exec );
    IDispatchPtr GetHTMLCtrl ( );
    long GetRichEditCtrl ( );
    VARIANT_BOOL GetToolBarVisible ( );
    void PutToolBarVisible (
        VARIANT_BOOL val );
    VARIANT_BOOL GetLargeIcons ( );
    void PutLargeIcons (
        VARIANT_BOOL val );
    enum ToolBarTextStyles GetToolBarTextStyle ( );
    void PutToolBarTextStyle (
        enum ToolBarTextStyles val );
    long GetButtonsVisible ( );
    void PutButtonsVisible (
        long val );
    IFontDisp * GetTextReportFont ( );
    void PutTextReportFont (
        IFontDisp * val );
    void PutRefTextReportFont (
        IFontDisp * val );
    enum FontSources GetTextReportFontSource ( );
    void PutTextReportFontSource (
        enum FontSources val );
    OLE_COLOR GetTextReportColor ( );
    void PutTextReportColor (
        OLE_COLOR val );
    OLE_COLOR GetTextReportBackColor ( );
    void PutTextReportBackColor (
        OLE_COLOR val );
    VARIANT_BOOL GetScaleWithDPI ( );
    void PutScaleWithDPI (
        VARIANT_BOOL val );
    BordersPtr GetBorders ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_PrintReport (
        /*[in]*/ VARIANT_BOOL showPrintDialog ) = 0;
      virtual HRESULT __stdcall raw_UpdateFromExecution (
        /*[in]*/ struct TS::Execution * exec ) = 0;
      virtual HRESULT __stdcall raw_GetHTMLCtrl (
        /*[out,retval]*/ IDispatch * * val ) = 0;
      virtual HRESULT __stdcall raw_GetRichEditCtrl (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall get_ToolBarVisible (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_ToolBarVisible (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_LargeIcons (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_LargeIcons (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_ToolBarTextStyle (
        /*[out,retval]*/ enum ToolBarTextStyles * val ) = 0;
      virtual HRESULT __stdcall put_ToolBarTextStyle (
        /*[in]*/ enum ToolBarTextStyles val ) = 0;
      virtual HRESULT __stdcall get_ButtonsVisible (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall put_ButtonsVisible (
        /*[in]*/ long val ) = 0;
      virtual HRESULT __stdcall get_TextReportFont (
        /*[out,retval]*/ IFontDisp * * val ) = 0;
      virtual HRESULT __stdcall put_TextReportFont (
        /*[in]*/ IFontDisp * val ) = 0;
      virtual HRESULT __stdcall putref_TextReportFont (
        /*[in]*/ IFontDisp * val ) = 0;
      virtual HRESULT __stdcall get_TextReportFontSource (
        /*[out,retval]*/ enum FontSources * val ) = 0;
      virtual HRESULT __stdcall put_TextReportFontSource (
        /*[in]*/ enum FontSources val ) = 0;
      virtual HRESULT __stdcall get_TextReportColor (
        /*[out,retval]*/ OLE_COLOR * val ) = 0;
      virtual HRESULT __stdcall put_TextReportColor (
        /*[in]*/ OLE_COLOR val ) = 0;
      virtual HRESULT __stdcall get_TextReportBackColor (
        /*[out,retval]*/ OLE_COLOR * val ) = 0;
      virtual HRESULT __stdcall put_TextReportBackColor (
        /*[in]*/ OLE_COLOR val ) = 0;
      virtual HRESULT __stdcall get_ScaleWithDPI (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_ScaleWithDPI (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_Borders (
        /*[out,retval]*/ struct Borders * * val ) = 0;
};

struct __declspec(uuid("48ba0500-4240-4d0d-b035-492f5fc55e6b"))
_ReportViewEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT BorderDragged (
        long bordersChanged,
        OLE_XPOS_PIXELS newX,
        OLE_YPOS_PIXELS newY,
        OLE_XPOS_PIXELS newWidth,
        OLE_YPOS_PIXELS newHeight,
        VARIANT_BOOL finalResize );
    HRESULT ConnectionActivity (
        enum ConnectionActivityTypes activity );
};

struct __declspec(uuid("eab745c9-31be-48ea-9725-b0404628adcd"))
SeqViewColumn : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetWidth,put=PutWidth))
    long Width;
    __declspec(property(get=GetExpression,put=PutExpression))
    _bstr_t Expression;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetType,put=PutType))
    enum SeqViewColumnTypes Type;
    __declspec(property(get=GetTextColorExpression,put=PutTextColorExpression))
    _bstr_t TextColorExpression;
    __declspec(property(get=GetBackColorExpression,put=PutBackColorExpression))
    _bstr_t BackColorExpression;
    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetAutoSizing,put=PutAutoSizing))
    enum AutoSizingOptions AutoSizing;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetName ( );
    void PutName (
        _bstr_t val );
    long GetWidth ( );
    void PutWidth (
        long val );
    _bstr_t GetExpression ( );
    void PutExpression (
        _bstr_t val );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL val );
    enum SeqViewColumnTypes GetType ( );
    void PutType (
        enum SeqViewColumnTypes val );
    _bstr_t GetTextColorExpression ( );
    void PutTextColorExpression (
        _bstr_t val );
    _bstr_t GetBackColorExpression ( );
    void PutBackColorExpression (
        _bstr_t val );
    long GetIndex ( );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t val );
    enum AutoSizingOptions GetAutoSizing ( );
    void PutAutoSizing (
        enum AutoSizingOptions val );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_Name (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_Width (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall put_Width (
        /*[in]*/ long val ) = 0;
      virtual HRESULT __stdcall get_Expression (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_Expression (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_Type (
        /*[out,retval]*/ enum SeqViewColumnTypes * val ) = 0;
      virtual HRESULT __stdcall put_Type (
        /*[in]*/ enum SeqViewColumnTypes val ) = 0;
      virtual HRESULT __stdcall get_TextColorExpression (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_TextColorExpression (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_BackColorExpression (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_BackColorExpression (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_Caption (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_AutoSizing (
        /*[out,retval]*/ enum AutoSizingOptions * val ) = 0;
      virtual HRESULT __stdcall put_AutoSizing (
        /*[in]*/ enum AutoSizingOptions val ) = 0;
};

struct __declspec(uuid("1e2bcc77-7d62-4906-abb8-2b7bcbef441c"))
SeqViewColumns : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    SeqViewColumnPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    SeqViewColumnPtr GetItem (
        const _variant_t & itemIdx );
    IUnknownPtr Get_NewEnum ( );
    long GetCount ( );
    SeqViewColumnPtr Insert (
        _bstr_t itemName,
        enum SeqViewColumnTypes columnType,
        long columnWidth,
        long insertBefore );
    HRESULT Remove (
        long itemIdx );
    HRESULT MoveLeft (
        long itemIdx );
    HRESULT MoveRight (
        long itemIdx );
    HRESULT Clear ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT itemIdx,
        /*[out,retval]*/ struct SeqViewColumn * * val ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * val ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall raw_Insert (
        /*[in]*/ BSTR itemName,
        /*[in]*/ enum SeqViewColumnTypes columnType,
        /*[in]*/ long columnWidth,
        /*[in]*/ long insertBefore,
        /*[out,retval]*/ struct SeqViewColumn * * val ) = 0;
      virtual HRESULT __stdcall raw_Remove (
        /*[in]*/ long itemIdx ) = 0;
      virtual HRESULT __stdcall raw_MoveLeft (
        /*[in]*/ long itemIdx ) = 0;
      virtual HRESULT __stdcall raw_MoveRight (
        /*[in]*/ long itemIdx ) = 0;
      virtual HRESULT __stdcall raw_Clear ( ) = 0;
};

struct __declspec(uuid("34b7e073-5533-4a8a-a651-1230c0e6500a"))
ISequenceView : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetShowComments,put=PutShowComments))
    VARIANT_BOOL ShowComments;
    __declspec(property(get=GetCommentsColor,put=PutCommentsColor))
    OLE_COLOR CommentsColor;
    __declspec(property(get=GetLinesColor,put=PutLinesColor))
    OLE_COLOR LinesColor;
    __declspec(property(get=GetShowCommentsBars,put=PutShowCommentsBars))
    VARIANT_BOOL ShowCommentsBars;
    __declspec(property(get=GetShowItemTipStrips,put=PutShowItemTipStrips))
    VARIANT_BOOL ShowItemTipStrips;
    __declspec(property(get=GetColumns))
    SeqViewColumnsPtr Columns;
    __declspec(property(get=GetMaxCommentsHeight,put=PutMaxCommentsHeight))
    long MaxCommentsHeight;
    __declspec(property(get=GetCursor,put=PutCursor))
    long Cursor;
    __declspec(property(get=GetHorizLines,put=PutHorizLines))
    VARIANT_BOOL HorizLines;
    __declspec(property(get=GetVertLines,put=PutVertLines))
    VARIANT_BOOL VertLines;
    __declspec(property(get=GetCommentsOffset,put=PutCommentsOffset))
    long CommentsOffset;
    __declspec(property(get=GetAutoSizeColumns,put=PutAutoSizeColumns))
    VARIANT_BOOL AutoSizeColumns;
    __declspec(property(get=GetItemBackColorExpression,put=PutItemBackColorExpression))
    _bstr_t ItemBackColorExpression;
    __declspec(property(get=GetItemTextColorExpression,put=PutItemTextColorExpression))
    _bstr_t ItemTextColorExpression;
    __declspec(property(get=GetIconSize,put=PutIconSize))
    long IconSize;
    __declspec(property(get=GetHeaderFontSource,put=PutHeaderFontSource))
    enum FontSources HeaderFontSource;
    __declspec(property(get=GetCommentsFontSource,put=PutCommentsFontSource))
    enum FontSources CommentsFontSource;
    __declspec(property(get=GetTextFontSource,put=PutTextFontSource))
    enum FontSources TextFontSource;
    __declspec(property(get=GetScaleWithDPI,put=PutScaleWithDPI))
    VARIANT_BOOL ScaleWithDPI;
    __declspec(property(get=GetShadeAlternateColumns,put=PutShadeAlternateColumns))
    VARIANT_BOOL ShadeAlternateColumns;
    __declspec(property(get=GetRoundItemRects,put=PutRoundItemRects))
    VARIANT_BOOL RoundItemRects;
    __declspec(property(get=GetBorders))
    BordersPtr Borders;
    __declspec(property(get=GetStepIconsEnabled,put=PutStepIconsEnabled))
    VARIANT_BOOL StepIconsEnabled;
    __declspec(property(get=GetBlockDisplayOptions,put=PutBlockDisplayOptions))
    long BlockDisplayOptions;
    __declspec(property(get=GethWnd))
    long hWnd;
    __declspec(property(get=GetTextColor,put=PutTextColor))
    OLE_COLOR TextColor;
    __declspec(property(get=GetEditingFlags,put=PutEditingFlags))
    long EditingFlags;
    __declspec(property(get=GetCanEditLabel))
    VARIANT_BOOL CanEditLabel;
    __declspec(property(get=GetFocusIndex,put=PutFocusIndex))
    long FocusIndex;
    __declspec(property(get=GetBackColor,put=PutBackColor))
    OLE_COLOR BackColor;

    //
    // Wrapper methods for error-handling
    //

    long GethWnd ( );
    OLE_COLOR GetTextColor ( );
    void PutTextColor (
        OLE_COLOR val );
    VARIANT_BOOL GetShowComments ( );
    void PutShowComments (
        VARIANT_BOOL val );
    OLE_COLOR GetCommentsColor ( );
    void PutCommentsColor (
        OLE_COLOR val );
    void PutLinesColor (
        OLE_COLOR val );
    OLE_COLOR GetLinesColor ( );
    VARIANT_BOOL GetShowCommentsBars ( );
    void PutShowCommentsBars (
        VARIANT_BOOL val );
    OLE_COLOR GetBackColor ( );
    void PutBackColor (
        OLE_COLOR val );
    IFontDisp * GetTextFont ( );
    void PutTextFont (
        IFontDisp * val );
    void PutRefTextFont (
        IFontDisp * val );
    IFontDisp * GetCommentsFont ( );
    void PutRefCommentsFont (
        IFontDisp * val );
    void PutCommentsFont (
        IFontDisp * val );
    IFontDisp * GetHeaderFont ( );
    void PutRefHeaderFont (
        IFontDisp * val );
    void PutHeaderFont (
        IFontDisp * val );
    VARIANT_BOOL GetShowItemTipStrips ( );
    void PutShowItemTipStrips (
        VARIANT_BOOL val );
    SeqViewColumnsPtr GetColumns ( );
    long GetMaxCommentsHeight ( );
    void PutMaxCommentsHeight (
        long val );
    long GetCursor ( );
    void PutCursor (
        long val );
    VARIANT_BOOL GetHorizLines ( );
    void PutHorizLines (
        VARIANT_BOOL val );
    VARIANT_BOOL GetVertLines ( );
    void PutVertLines (
        VARIANT_BOOL val );
    long GetCommentsOffset ( );
    void PutCommentsOffset (
        long val );
    VARIANT_BOOL GetAutoSizeColumns ( );
    void PutAutoSizeColumns (
        VARIANT_BOOL val );
    long HitTest (
        long x,
        long y );
    _bstr_t GetItemBackColorExpression ( );
    void PutItemBackColorExpression (
        _bstr_t val );
    _bstr_t GetItemTextColorExpression ( );
    void PutItemTextColorExpression (
        _bstr_t val );
    HRESULT Localize (
        _bstr_t sectionName );
    long GetIconSize ( );
    void PutIconSize (
        long val );
    enum FontSources GetHeaderFontSource ( );
    void PutHeaderFontSource (
        enum FontSources val );
    enum FontSources GetCommentsFontSource ( );
    void PutCommentsFontSource (
        enum FontSources val );
    enum FontSources GetTextFontSource ( );
    void PutTextFontSource (
        enum FontSources val );
    VARIANT_BOOL GetScaleWithDPI ( );
    void PutScaleWithDPI (
        VARIANT_BOOL val );
    VARIANT_BOOL GetShadeAlternateColumns ( );
    void PutShadeAlternateColumns (
        VARIANT_BOOL val );
    VARIANT_BOOL GetRoundItemRects ( );
    void PutRoundItemRects (
        VARIANT_BOOL val );
    BordersPtr GetBorders ( );
    VARIANT_BOOL GetStepIconsEnabled ( );
    void PutStepIconsEnabled (
        VARIANT_BOOL val );
    long GetBlockDisplayOptions ( );
    void PutBlockDisplayOptions (
        long val );
    long GetEditingFlags ( );
    void PutEditingFlags (
        long val );
    VARIANT_BOOL ItemIndexToStep (
        long ItemIndex,
        enum TS::StepGroups * group,
        long * stepIndex );
    long StepToItemIndex (
        enum TS::StepGroups group,
        long stepIndex );
    VARIANT_BOOL GetCanEditLabel ( );
    HRESULT EditLabel ( );
    HRESULT BeginUpdate ( );
    HRESULT EndUpdate ( );
    long GetFocusIndex ( );
    void PutFocusIndex (
        long val );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_hWnd (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall get_TextColor (
        /*[out,retval]*/ OLE_COLOR * val ) = 0;
      virtual HRESULT __stdcall put_TextColor (
        /*[in]*/ OLE_COLOR val ) = 0;
      virtual HRESULT __stdcall get_ShowComments (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_ShowComments (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_CommentsColor (
        /*[out,retval]*/ OLE_COLOR * val ) = 0;
      virtual HRESULT __stdcall put_CommentsColor (
        /*[in]*/ OLE_COLOR val ) = 0;
      virtual HRESULT __stdcall put_LinesColor (
        /*[in]*/ OLE_COLOR val ) = 0;
      virtual HRESULT __stdcall get_LinesColor (
        /*[out,retval]*/ OLE_COLOR * val ) = 0;
      virtual HRESULT __stdcall get_ShowCommentsBars (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_ShowCommentsBars (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_BackColor (
        /*[out,retval]*/ OLE_COLOR * val ) = 0;
      virtual HRESULT __stdcall put_BackColor (
        /*[in]*/ OLE_COLOR val ) = 0;
      virtual HRESULT __stdcall get_TextFont (
        /*[out,retval]*/ IFontDisp * * val ) = 0;
      virtual HRESULT __stdcall put_TextFont (
        /*[in]*/ IFontDisp * val ) = 0;
      virtual HRESULT __stdcall putref_TextFont (
        /*[in]*/ IFontDisp * val ) = 0;
      virtual HRESULT __stdcall get_CommentsFont (
        /*[out,retval]*/ IFontDisp * * val ) = 0;
      virtual HRESULT __stdcall putref_CommentsFont (
        /*[in]*/ IFontDisp * val ) = 0;
      virtual HRESULT __stdcall put_CommentsFont (
        /*[in]*/ IFontDisp * val ) = 0;
      virtual HRESULT __stdcall get_HeaderFont (
        /*[out,retval]*/ IFontDisp * * val ) = 0;
      virtual HRESULT __stdcall putref_HeaderFont (
        /*[in]*/ IFontDisp * val ) = 0;
      virtual HRESULT __stdcall put_HeaderFont (
        /*[in]*/ IFontDisp * val ) = 0;
      virtual HRESULT __stdcall get_ShowItemTipStrips (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_ShowItemTipStrips (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_Columns (
        /*[out,retval]*/ struct SeqViewColumns * * val ) = 0;
      virtual HRESULT __stdcall get_MaxCommentsHeight (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall put_MaxCommentsHeight (
        /*[in]*/ long val ) = 0;
      virtual HRESULT __stdcall get_Cursor (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall put_Cursor (
        /*[in]*/ long val ) = 0;
      virtual HRESULT __stdcall get_HorizLines (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_HorizLines (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_VertLines (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_VertLines (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_CommentsOffset (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall put_CommentsOffset (
        /*[in]*/ long val ) = 0;
      virtual HRESULT __stdcall get_AutoSizeColumns (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_AutoSizeColumns (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall raw_HitTest (
        /*[in]*/ long x,
        /*[in]*/ long y,
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall get_ItemBackColorExpression (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_ItemBackColorExpression (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_ItemTextColorExpression (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_ItemTextColorExpression (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall raw_Localize (
        /*[in]*/ BSTR sectionName ) = 0;
      virtual HRESULT __stdcall get_IconSize (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall put_IconSize (
        /*[in]*/ long val ) = 0;
      virtual HRESULT __stdcall get_HeaderFontSource (
        /*[out,retval]*/ enum FontSources * val ) = 0;
      virtual HRESULT __stdcall put_HeaderFontSource (
        /*[in]*/ enum FontSources val ) = 0;
      virtual HRESULT __stdcall get_CommentsFontSource (
        /*[out,retval]*/ enum FontSources * val ) = 0;
      virtual HRESULT __stdcall put_CommentsFontSource (
        /*[in]*/ enum FontSources val ) = 0;
      virtual HRESULT __stdcall get_TextFontSource (
        /*[out,retval]*/ enum FontSources * val ) = 0;
      virtual HRESULT __stdcall put_TextFontSource (
        /*[in]*/ enum FontSources val ) = 0;
      virtual HRESULT __stdcall get_ScaleWithDPI (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_ScaleWithDPI (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_ShadeAlternateColumns (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_ShadeAlternateColumns (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_RoundItemRects (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_RoundItemRects (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_Borders (
        /*[out,retval]*/ struct Borders * * val ) = 0;
      virtual HRESULT __stdcall get_StepIconsEnabled (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_StepIconsEnabled (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_BlockDisplayOptions (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall put_BlockDisplayOptions (
        /*[in]*/ long val ) = 0;
      virtual HRESULT __stdcall get_EditingFlags (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall put_EditingFlags (
        /*[in]*/ long val ) = 0;
      virtual HRESULT __stdcall raw_ItemIndexToStep (
        /*[in]*/ long ItemIndex,
        /*[out]*/ enum TS::StepGroups * group,
        /*[out]*/ long * stepIndex,
        /*[out,retval]*/ VARIANT_BOOL * isStep ) = 0;
      virtual HRESULT __stdcall raw_StepToItemIndex (
        /*[in]*/ enum TS::StepGroups group,
        /*[in]*/ long stepIndex,
        /*[out,retval]*/ long * ItemIndex ) = 0;
      virtual HRESULT __stdcall get_CanEditLabel (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall raw_EditLabel ( ) = 0;
      virtual HRESULT __stdcall raw_BeginUpdate ( ) = 0;
      virtual HRESULT __stdcall raw_EndUpdate ( ) = 0;
      virtual HRESULT __stdcall get_FocusIndex (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall put_FocusIndex (
        /*[in]*/ long val ) = 0;
};

struct __declspec(uuid("00fd8004-a80b-4e62-b7b9-2d824e77e68c"))
_SequenceViewEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT CursorMoved (
        long itemIdx );
    HRESULT ColumnResized (
        long columnIndex,
        long newSize );
    HRESULT KeyDown (
        short * keyCode,
        short shift );
    HRESULT MouseMove (
        short btn,
        short shift,
        OLE_XPOS_PIXELS x,
        OLE_YPOS_PIXELS y );
    HRESULT MouseDown (
        short btn,
        short shift,
        OLE_XPOS_PIXELS x,
        OLE_YPOS_PIXELS y );
    HRESULT MouseUp (
        short btn,
        short shift,
        OLE_XPOS_PIXELS x,
        OLE_YPOS_PIXELS y );
    HRESULT DblClick ( );
    HRESULT CreateContextMenu (
        long menuHandle,
        OLE_XPOS_PIXELS x,
        OLE_YPOS_PIXELS y );
    HRESULT BorderDragged (
        long bordersChanged,
        OLE_XPOS_PIXELS newX,
        OLE_YPOS_PIXELS newY,
        OLE_XPOS_PIXELS newWidth,
        OLE_YPOS_PIXELS newHeight,
        VARIANT_BOOL finalResize );
    HRESULT ConnectionActivity (
        enum ConnectionActivityTypes activity );
};

struct __declspec(uuid("716aae6d-648d-490d-9b7e-a46ba1282a9a"))
SequenceFiles : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    TS::SequenceFilePtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    TS::SequenceFilePtr GetItem (
        const _variant_t & fileIndex );
    IUnknownPtr Get_NewEnum ( );
    long GetCount ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT fileIndex,
        /*[out,retval]*/ struct TS::SequenceFile * * val ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * val ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * val ) = 0;
};

struct __declspec(uuid("d6dd2bc7-e039-4a49-bae3-f40741fccb3e"))
Executions : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    TS::ExecutionPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetNumIncomplete))
    long NumIncomplete;
    __declspec(property(get=GetNumPaused))
    long NumPaused;
    __declspec(property(get=GetNumRunning))
    long NumRunning;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    TS::ExecutionPtr GetItem (
        long itemIdx );
    IUnknownPtr Get_NewEnum ( );
    long GetCount ( );
    long GetNumIncomplete ( );
    long GetNumPaused ( );
    long GetNumRunning ( );
    HRESULT ResumeAll ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long itemIdx,
        /*[out,retval]*/ struct TS::Execution * * val ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * val ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall get_NumIncomplete (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall get_NumPaused (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall get_NumRunning (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall raw_ResumeAll ( ) = 0;
};

struct __declspec(uuid("118435e6-7858-4797-9957-171a95e95a2b"))
EntryPoint : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetInteractiveExecutionAllowed))
    VARIANT_BOOL InteractiveExecutionAllowed;
    __declspec(property(get=GetSequence))
    TS::SequencePtr Sequence;

    //
    // Wrapper methods for error-handling
    //

    TS::ExecutionPtr Run (
        const _variant_t & editArgsVal = vtMissing );
    TS::ExecutionPtr RunSelectedSteps (
        const _variant_t & interactiveArgsVal = vtMissing,
        const _variant_t & editArgsVal = vtMissing );
    TS::ExecutionPtr LoopOnSelectedSteps (
        const _variant_t & interactiveArgsVal = vtMissing,
        const _variant_t & editArgsVal = vtMissing );
    _bstr_t GetName ( );
    VARIANT_BOOL GetEnabled ( );
    VARIANT_BOOL GetInteractiveExecutionAllowed ( );
    TS::SequencePtr GetSequence ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Run (
        /*[in]*/ VARIANT editArgsVal,
        /*[out,retval]*/ struct TS::Execution * * val ) = 0;
      virtual HRESULT __stdcall raw_RunSelectedSteps (
        /*[in]*/ VARIANT interactiveArgsVal,
        /*[in]*/ VARIANT editArgsVal,
        /*[out,retval]*/ struct TS::Execution * * val ) = 0;
      virtual HRESULT __stdcall raw_LoopOnSelectedSteps (
        /*[in]*/ VARIANT interactiveArgsVal,
        /*[in]*/ VARIANT editArgsVal,
        /*[out,retval]*/ struct TS::Execution * * val ) = 0;
      virtual HRESULT __stdcall get_Name (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall get_InteractiveExecutionAllowed (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall get_Sequence (
        /*[out,retval]*/ struct TS::Sequence * * val ) = 0;
};

struct __declspec(uuid("7a948c8c-1956-4dca-a293-f285ca3bdcb8"))
EntryPoints : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    EntryPointPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    EntryPointPtr GetItem (
        const _variant_t & entryPointIndexParam );
    IUnknownPtr Get_NewEnum ( );
    long GetCount ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Item (
        /*[in]*/ VARIANT entryPointIndexParam,
        /*[out,retval]*/ struct EntryPoint * * val ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * val ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * val ) = 0;
};

struct __declspec(uuid("40d0b561-b231-4a3c-80b8-0f4f0b76b18c"))
_ApplicationMgrEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT ExitApplication ( );
    HRESULT UIMessageEvent (
        struct TS::UIMessage * uiMsg,
        VARIANT_BOOL * cancel );
    HRESULT SequenceFileOpened (
        struct TS::SequenceFile * file,
        VARIANT_BOOL alreadyLoaded );
    HRESULT SequenceFileClosed (
        _bstr_t pathName );
    HRESULT UserChanged (
        struct TS::User * user );
    HRESULT Wait (
        VARIANT_BOOL showWait );
    HRESULT ReportError (
        long errorCode,
        _bstr_t errorMessage );
    HRESULT PreCommandExecute (
        struct Command * Command,
        VARIANT_BOOL * cancel );
    HRESULT PostCommandExecute (
        struct Command * Command );
    HRESULT QueryCloseExecution (
        struct TS::Execution * exec,
        enum TS::ExecutionRunStates RunState,
        enum QueryCloseExecutionOptions * opt );
    HRESULT ExecutionClosed (
        struct TS::Execution * exec );
    HRESULT QueryCloseSequenceFile (
        struct TS::SequenceFile * file,
        VARIANT_BOOL * cancel );
    HRESULT QueryShutdown (
        enum QueryShutdownOptions * opt );
    HRESULT DisplaySequenceFile (
        struct TS::SequenceFile * file,
        enum SequenceFileDisplayReasons reason );
    HRESULT DisplayExecution (
        struct TS::Execution * exec,
        enum ExecutionDisplayReasons reason );
    HRESULT DisplayReport (
        struct TS::Execution * exec );
    HRESULT AfterUIMessageEvent (
        struct TS::UIMessage * uiMsg );
    HRESULT ShutDownCompleted ( );
    HRESULT ShutDownCancelled ( );
    HRESULT StartExecution (
        struct TS::Execution * exec,
        struct TS::Thread * thrd,
        VARIANT_BOOL initiallyHidden );
    HRESULT EndExecution (
        struct TS::Execution * exec );
    HRESULT BreakOnRunTimeError (
        struct TS::Execution * exec,
        struct TS::Thread * initiatingThread,
        VARIANT_BOOL * showDialog,
        VARIANT_BOOL * BreakExecution );
    HRESULT UserMessage (
        struct TS::UIMessage * uiMsg );
    HRESULT RefreshWindows (
        IUnknown * activeXData );
    HRESULT Break (
        struct TS::Execution * exec );
    HRESULT QueryReloadSequenceFile (
        struct TS::SequenceFile * file,
        enum QueryReloadSequenceFileOptions * opt );
    HRESULT ProcessUserCommands (
        struct Strings * cmds );
    HRESULT EditModeChanged ( );
    HRESULT ProcessUserCommandLineArguments (
        VARIANT_BOOL processCommand,
        struct Strings * arguments,
        long * currentArgument,
        enum ProcessCommandLineErrors * errorProcessing,
        BSTR * errorMessage );
    HRESULT CanEdit (
        struct TS::PropertyObjectFile * editedFile,
        enum TS::EditKinds editKind,
        VARIANT_BOOL * canEditValue,
        long * editDenialReasons );
    HRESULT BeginEdit (
        struct TS::PropertyObjectFile * editedFile,
        enum TS::EditKinds editKind,
        struct TS::PropertyObject * objectsToEdit,
        VARIANT_BOOL * cancel,
        long * editDenialReasons );
    HRESULT EndEdit (
        struct TS::PropertyObjectFile * editedFile,
        enum TS::EditKinds editKind,
        struct TS::PropertyObject * editedObjects,
        VARIANT_BOOL cancelled );
    HRESULT DropFile (
        _bstr_t file,
        VARIANT_BOOL * handled );
    HRESULT SequenceFileClosing (
        struct TS::SequenceFile * file );
};

struct __declspec(uuid("868bf492-2c67-497c-8b53-9f5407c77236"))
_SequenceFileViewMgrEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT SequenceFileChanged (
        struct TS::SequenceFile * newFile );
    HRESULT SelectionChanged ( );
    HRESULT SequenceChanged (
        struct TS::Sequence * newSequence );
    HRESULT StepGroupChanged (
        enum TS::StepGroups newGroup );
    HRESULT RefreshWindow ( );
    HRESULT SequenceSelectionChanged ( );
    HRESULT PropertyObjectSelectionChanged ( );
};

struct __declspec(uuid("f0d4f1ee-eec3-4f36-9b50-9beb2321804a"))
_ExecutionViewMgrEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT ExecutionChanged (
        struct TS::Execution * exec );
    HRESULT RunStateChanged (
        enum TS::ExecutionRunStates newRunState );
    HRESULT EndExecution (
        struct TS::Execution * exec );
    HRESULT TerminationStateChanged (
        enum TS::ExecutionTerminationStates newTermState );
    HRESULT SelectionChanged ( );
    HRESULT UserMessage (
        struct TS::UIMessage * uiMsg );
    HRESULT RefreshWindow (
        struct TS::SequenceContext * ctxt );
    HRESULT Break (
        struct TS::Execution * exec,
        struct TS::Thread * thrd,
        struct TS::SequenceContext * ctxt );
    HRESULT Trace (
        struct TS::Execution * exec,
        struct TS::Thread * thrd,
        struct TS::SequenceContext * ctxt );
    HRESULT DisplayReport (
        struct TS::Execution * exec );
    HRESULT ContextChanged (
        struct TS::SequenceContext * ctxt );
    HRESULT ThreadChanged (
        struct TS::Thread * thrd );
    HRESULT PropertyObjectSelectionChanged ( );
};

struct __declspec(uuid("661bd29b-11cc-4666-b4b8-c9de53e5f1ab"))
ICheckBox : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetTextAlign,put=PutTextAlign))
    enum ContentAlignmentStyles TextAlign;
    __declspec(property(get=GetChecked,put=PutChecked))
    VARIANT_BOOL Checked;
    __declspec(property(get=GetUseMaskColor,put=PutUseMaskColor))
    VARIANT_BOOL UseMaskColor;
    __declspec(property(get=GetMaskColor,put=PutMaskColor))
    OLE_COLOR MaskColor;
    __declspec(property(get=GetStyle,put=PutStyle))
    enum CheckBoxStyles Style;
    __declspec(property(get=GetFontSource,put=PutFontSource))
    enum FontSources FontSource;
    __declspec(property(get=GetScaleWithDPI,put=PutScaleWithDPI))
    VARIANT_BOOL ScaleWithDPI;
    __declspec(property(get=GetImageAlign,put=PutImageAlign))
    enum ContentAlignmentStyles ImageAlign;
    __declspec(property(get=GetBackColor,put=PutBackColor))
    OLE_COLOR BackColor;
    __declspec(property(get=GetCaption,put=PutCaption))
    _bstr_t Caption;
    __declspec(property(get=GethWnd))
    long hWnd;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetForeColor,put=PutForeColor))
    OLE_COLOR ForeColor;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL val );
    IFontDisp * GetFont ( );
    void PutFont (
        IFontDisp * val );
    void PutRefFont (
        IFontDisp * val );
    OLE_COLOR GetBackColor ( );
    void PutBackColor (
        OLE_COLOR val );
    OLE_COLOR GetForeColor ( );
    void PutForeColor (
        OLE_COLOR val );
    _bstr_t GetCaption ( );
    void PutCaption (
        _bstr_t val );
    long GethWnd ( );
    IPictureDisp * GetImage ( );
    void PutImage (
        IPictureDisp * val );
    void PutRefImage (
        IPictureDisp * val );
    enum ContentAlignmentStyles GetTextAlign ( );
    void PutTextAlign (
        enum ContentAlignmentStyles val );
    VARIANT_BOOL GetChecked ( );
    void PutChecked (
        VARIANT_BOOL pVal );
    VARIANT_BOOL GetUseMaskColor ( );
    void PutUseMaskColor (
        VARIANT_BOOL val );
    OLE_COLOR GetMaskColor ( );
    void PutMaskColor (
        OLE_COLOR val );
    enum CheckBoxStyles GetStyle ( );
    void PutStyle (
        enum CheckBoxStyles val );
    enum FontSources GetFontSource ( );
    void PutFontSource (
        enum FontSources val );
    VARIANT_BOOL GetScaleWithDPI ( );
    void PutScaleWithDPI (
        VARIANT_BOOL val );
    enum ContentAlignmentStyles GetImageAlign ( );
    void PutImageAlign (
        enum ContentAlignmentStyles val );
    HRESULT Localize (
        _bstr_t sectionName );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_Font (
        /*[out,retval]*/ IFontDisp * * val ) = 0;
      virtual HRESULT __stdcall put_Font (
        /*[in]*/ IFontDisp * val ) = 0;
      virtual HRESULT __stdcall putref_Font (
        /*[in]*/ IFontDisp * val ) = 0;
      virtual HRESULT __stdcall get_BackColor (
        /*[out,retval]*/ OLE_COLOR * val ) = 0;
      virtual HRESULT __stdcall put_BackColor (
        /*[in]*/ OLE_COLOR val ) = 0;
      virtual HRESULT __stdcall get_ForeColor (
        /*[out,retval]*/ OLE_COLOR * val ) = 0;
      virtual HRESULT __stdcall put_ForeColor (
        /*[in]*/ OLE_COLOR val ) = 0;
      virtual HRESULT __stdcall get_Caption (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_Caption (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_hWnd (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall get_Image (
        /*[out,retval]*/ IPictureDisp * * val ) = 0;
      virtual HRESULT __stdcall put_Image (
        /*[in]*/ IPictureDisp * val ) = 0;
      virtual HRESULT __stdcall putref_Image (
        /*[in]*/ IPictureDisp * val ) = 0;
      virtual HRESULT __stdcall get_TextAlign (
        /*[out,retval]*/ enum ContentAlignmentStyles * val ) = 0;
      virtual HRESULT __stdcall put_TextAlign (
        /*[in]*/ enum ContentAlignmentStyles val ) = 0;
      virtual HRESULT __stdcall get_Checked (
        /*[out,retval]*/ VARIANT_BOOL * pVal ) = 0;
      virtual HRESULT __stdcall put_Checked (
        /*[in]*/ VARIANT_BOOL pVal ) = 0;
      virtual HRESULT __stdcall get_UseMaskColor (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_UseMaskColor (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_MaskColor (
        /*[out,retval]*/ OLE_COLOR * val ) = 0;
      virtual HRESULT __stdcall put_MaskColor (
        /*[in]*/ OLE_COLOR val ) = 0;
      virtual HRESULT __stdcall get_Style (
        /*[out,retval]*/ enum CheckBoxStyles * val ) = 0;
      virtual HRESULT __stdcall put_Style (
        /*[in]*/ enum CheckBoxStyles val ) = 0;
      virtual HRESULT __stdcall get_FontSource (
        /*[out,retval]*/ enum FontSources * val ) = 0;
      virtual HRESULT __stdcall put_FontSource (
        /*[in]*/ enum FontSources val ) = 0;
      virtual HRESULT __stdcall get_ScaleWithDPI (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_ScaleWithDPI (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_ImageAlign (
        /*[out,retval]*/ enum ContentAlignmentStyles * val ) = 0;
      virtual HRESULT __stdcall put_ImageAlign (
        /*[in]*/ enum ContentAlignmentStyles val ) = 0;
      virtual HRESULT __stdcall raw_Localize (
        /*[in]*/ BSTR sectionName ) = 0;
};

struct __declspec(uuid("19551b0f-e624-4e2a-9073-03fa7b50899d"))
_CheckBoxEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT Click ( );
    HRESULT KeyDown (
        short * keyCode,
        short shift );
    HRESULT KeyPress (
        short * keyAscii );
    HRESULT KeyUp (
        short keyCode,
        short shift );
    HRESULT MouseDown (
        short btn,
        short shift,
        OLE_XPOS_PIXELS x,
        OLE_YPOS_PIXELS y );
    HRESULT MouseMove (
        short btn,
        short shift,
        OLE_XPOS_PIXELS x,
        OLE_YPOS_PIXELS y );
    HRESULT MouseUp (
        short btn,
        short shift,
        OLE_XPOS_PIXELS x,
        OLE_YPOS_PIXELS y );
    HRESULT ConnectionActivity (
        enum ConnectionActivityTypes activity );
};

struct __declspec(uuid("aabdf204-cd20-4fdf-822e-5db98192a4b9"))
IVariablesView : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetScaleWithDPI,put=PutScaleWithDPI))
    VARIANT_BOOL ScaleWithDPI;
    __declspec(property(get=GetBorders))
    BordersPtr Borders;
    __declspec(property(get=GethWnd))
    long hWnd;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetScaleWithDPI ( );
    void PutScaleWithDPI (
        VARIANT_BOOL val );
    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL val );
    long GethWnd ( );
    BordersPtr GetBorders ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_ScaleWithDPI (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_ScaleWithDPI (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_hWnd (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall get_Borders (
        /*[out,retval]*/ struct Borders * * val ) = 0;
};

struct __declspec(uuid("53456b04-11fa-4127-a941-626c0ba61c95"))
_VariablesViewEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT BorderDragged (
        long bordersChanged,
        OLE_XPOS_PIXELS newX,
        OLE_YPOS_PIXELS newY,
        OLE_XPOS_PIXELS newWidth,
        OLE_YPOS_PIXELS newHeight,
        VARIANT_BOOL finalResize );
    HRESULT ConnectionActivity (
        enum ConnectionActivityTypes activity );
    HRESULT KeyDown (
        short * keyCode,
        short shift );
};

struct __declspec(uuid("80abaef2-fde0-4178-b2bd-bf7ab69bf5b6"))
InsertionPalettePage : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIndex))
    long Index;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetSplitterRatio,put=PutSplitterRatio))
    float SplitterRatio;
    __declspec(property(get=GetExpanded,put=PutExpanded))
    VARIANT_BOOL Expanded;

    //
    // Wrapper methods for error-handling
    //

    long GetIndex ( );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL val );
    float GetSplitterRatio ( );
    void PutSplitterRatio (
        float ratio );
    VARIANT_BOOL GetExpanded ( );
    void PutExpanded (
        VARIANT_BOOL val );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Index (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_SplitterRatio (
        /*[out,retval]*/ float * ratio ) = 0;
      virtual HRESULT __stdcall put_SplitterRatio (
        /*[in]*/ float ratio ) = 0;
      virtual HRESULT __stdcall get_Expanded (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_Expanded (
        /*[in]*/ VARIANT_BOOL val ) = 0;
};

struct __declspec(uuid("56b8e2d2-1795-4644-ad26-639f29e32b78"))
InsertionPalettePages : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    InsertionPalettePagePtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    InsertionPalettePagePtr GetItem (
        long itemIdx );
    IUnknownPtr Get_NewEnum ( );
    long GetCount ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long itemIdx,
        /*[out,retval]*/ struct InsertionPalettePage * * val ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * val ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * val ) = 0;
};

struct __declspec(uuid("7575abc2-9520-4ef4-9df8-2c33b6da18bc"))
IInsertionPalette : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBorders))
    BordersPtr Borders;
    __declspec(property(get=GetScaleWithDPI,put=PutScaleWithDPI))
    VARIANT_BOOL ScaleWithDPI;
    __declspec(property(get=GetAllowEditing,put=PutAllowEditing))
    VARIANT_BOOL AllowEditing;
    __declspec(property(get=GetPaletteLayout,put=PutPaletteLayout))
    _bstr_t PaletteLayout;
    __declspec(property(get=GetPages))
    InsertionPalettePagesPtr Pages;
    __declspec(property(get=GethWnd))
    long hWnd;
    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL val );
    long GethWnd ( );
    BordersPtr GetBorders ( );
    VARIANT_BOOL GetScaleWithDPI ( );
    void PutScaleWithDPI (
        VARIANT_BOOL val );
    VARIANT_BOOL GetAllowEditing ( );
    void PutAllowEditing (
        VARIANT_BOOL val );
    _bstr_t GetPaletteLayout ( );
    void PutPaletteLayout (
        _bstr_t val );
    InsertionPalettePagesPtr GetPages ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_hWnd (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall get_Borders (
        /*[out,retval]*/ struct Borders * * val ) = 0;
      virtual HRESULT __stdcall get_ScaleWithDPI (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_ScaleWithDPI (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_AllowEditing (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_AllowEditing (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_PaletteLayout (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_PaletteLayout (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_Pages (
        /*[out,retval]*/ struct InsertionPalettePages * * val ) = 0;
};

struct __declspec(uuid("4f7ea0b7-3db3-49b2-9dc2-264659a50890"))
_InsertionPaletteEvents : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT BorderDragged (
        long bordersChanged,
        OLE_XPOS_PIXELS newX,
        OLE_YPOS_PIXELS newY,
        OLE_XPOS_PIXELS newWidth,
        OLE_YPOS_PIXELS newHeight,
        VARIANT_BOOL finalResize );
    HRESULT ConnectionActivity (
        enum ConnectionActivityTypes activity );
    HRESULT KeyDown (
        short * keyCode,
        short shift );
};

struct __declspec(uuid("0004483b-7cbc-4fa1-b92c-19028a66ed74"))
ApplicationMgr;
    // [ default ] interface IApplicationMgr
    // [ default, source ] dispinterface _ApplicationMgrEvents

struct __declspec(uuid("000b3658-d95b-4a86-9f36-144e104fb691"))
SequenceFileViewMgr;
    // [ default ] interface ISequenceFileViewMgr
    // [ default, source ] dispinterface _SequenceFileViewMgrEvents

struct __declspec(uuid("000a407a-72e9-415c-8334-032f1eb446ba"))
ExecutionViewMgr;
    // [ default ] interface IExecutionViewMgr
    // [ default, source ] dispinterface _ExecutionViewMgrEvents

struct __declspec(uuid("a6fa998f-98ef-11d2-93b7-00a02411ebe6"))
Button;
    // [ default ] interface IButton
    // [ default, source ] dispinterface _ButtonEvents

struct __declspec(uuid("a5bf99d8-9325-4168-8c33-0d80bff39ad8"))
ExpressionEdit;
    // [ default ] interface IExpressionEdit
    // [ default, source ] dispinterface _ExpressionEditEvents

struct __declspec(uuid("1af48f36-313b-4990-a8e3-ff4f94c28459"))
ListBar;
    // [ default ] interface IListBar
    // [ default, source ] dispinterface _ListBarEvents

struct __declspec(uuid("c485d2f6-dedb-4208-b55e-513892238f79"))
StatusBar;
    // [ default ] interface IStatusBar
    // [ default, source ] dispinterface _StatusBarEvents

struct __declspec(uuid("c50fd122-99bf-11d2-93b7-00a02411ebe6"))
Label;
    // [ default ] interface ILabel
    // [ default, source ] dispinterface _LabelEvents

struct __declspec(uuid("be676082-61ac-11d5-8efa-0050dac50018"))
ComboBox;
    // [ default ] interface IComboBox
    // [ default, source ] dispinterface _ComboBoxEvents

struct __declspec(uuid("a6fa998c-98ef-11d2-93b7-00a02411ebe6"))
ListBox;
    // [ default ] interface IListBox
    // [ default, source ] dispinterface _ListBoxEvents

struct __declspec(uuid("f54f4ebb-497c-11d5-8eeb-0050dac50018"))
ReportView;
    // [ default ] interface IReportView
    // [ default, source ] dispinterface _ReportViewEvents

struct __declspec(uuid("e7c507ab-84b7-4ee4-9eb9-24ff67f2973c"))
SequenceView;
    // [ default ] interface ISequenceView
    // [ default, source ] dispinterface _SequenceViewEvents

struct __declspec(uuid("0d3bb107-b7b8-4a4c-94e3-530d3dc7daec"))
CheckBox;
    // [ default ] interface ICheckBox
    // [ default, source ] dispinterface _CheckBoxEvents

struct __declspec(uuid("9acce118-25b6-46fd-8ab2-268db286c765"))
VariablesView;
    // [ default ] interface IVariablesView
    // [ default, source ] dispinterface _VariablesViewEvents

struct __declspec(uuid("cd5dc5b7-7866-455e-b4a2-643fbbdf8bc9"))
InsertionPalette;
    // [ default ] interface IInsertionPalette
    // [ default, source ] dispinterface _InsertionPaletteEvents

struct __declspec(uuid("817d7c9a-8f4b-4bb7-aea6-e118ceb0f823"))
ISequenceFileViewMgr : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetConnections))
    SequenceFileViewMgrConnectionsPtr Connections;
    __declspec(property(get=GetExecutionEntryPoints))
    EntryPointsPtr ExecutionEntryPoints;
    __declspec(property(get=GetSequenceFile,put=PutRefSequenceFile))
    TS::SequenceFilePtr SequenceFile;
    __declspec(property(get=GetSequence,put=PutRefSequence))
    TS::SequencePtr Sequence;
    __declspec(property(get=GetConfigurationEntryPoints))
    EntryPointsPtr ConfigurationEntryPoints;
    __declspec(property(get=GetSelectedSteps))
    SelectedStepsPtr SelectedSteps;
    __declspec(property(get=GetReplaceSequenceFileOnClose,put=PutReplaceSequenceFileOnClose))
    VARIANT_BOOL ReplaceSequenceFileOnClose;
    __declspec(property(get=GetApplicationMgr))
    IDispatchPtr ApplicationMgr;
    __declspec(property(get=GetUserData,put=PutUserData))
    _variant_t UserData;
    __declspec(property(get=GetStepGroupMode,put=PutStepGroupMode))
    enum StepGroupModes StepGroupMode;
    __declspec(property(get=GetUndoStack))
    TS::UndoStackPtr UndoStack;
    __declspec(property(get=GetSelectedSequences))
    SelectedSequencesPtr SelectedSequences;
    __declspec(property(get=GetSelectedPropertyObjects))
    SelectedPropertyObjectsPtr SelectedPropertyObjects;

    //
    // Wrapper methods for error-handling
    //

    SequenceFileViewMgrConnectionsPtr GetConnections ( );
    EntryPointsPtr GetExecutionEntryPoints ( );
    TS::SequenceFilePtr GetSequenceFile ( );
    void PutRefSequenceFile (
        struct TS::SequenceFile * val );
    TS::SequencePtr GetSequence ( );
    void PutRefSequence (
        struct TS::Sequence * val );
    enum TS::StepGroups GetStepGroup ( );
    void PutStepGroup (
        enum TS::StepGroups val );
    EntryPointsPtr GetConfigurationEntryPoints ( );
    SelectedStepsPtr GetSelectedSteps ( );
    VARIANT_BOOL GetReplaceSequenceFileOnClose ( );
    void PutReplaceSequenceFileOnClose (
        VARIANT_BOOL val );
    IDispatchPtr GetApplicationMgr ( );
    _variant_t GetUserData ( );
    void PutUserData (
        const _variant_t & val );
    TS::EditArgsPtr BuildEditArgs ( );
    HRESULT SetSequenceAndGroup (
        struct TS::Sequence * newSequence,
        enum TS::StepGroups newGroup );
    TS::ExecutionPtr Run (
        const _variant_t & editArgsVal = vtMissing );
    TS::ExecutionPtr RunSelectedSteps (
        const _variant_t & interactiveArgsVal = vtMissing,
        const _variant_t & editArgsVal = vtMissing );
    TS::InteractiveArgsPtr BuildInteractiveArgs (
        const _variant_t & createLoopArgs,
        VARIANT * cancel );
    TS::ExecutionPtr LoopOnSelectedSteps (
        const _variant_t & interactiveArgsVal = vtMissing,
        const _variant_t & editArgsVal = vtMissing );
    HRESULT Refresh ( );
    HRESULT RefreshStep (
        long stepIndex );
    CommandPtr GetCommand (
        enum CommandKinds cmdKind,
        long Index );
    _bstr_t GetCaptionText (
        enum CaptionSources captionSource,
        VARIANT_BOOL longName,
        _bstr_t formatExpression );
    _bstr_t GetImageName (
        enum ImageSources imageSource );
    CommandConnectionPtr ConnectCommand (
        IDispatch * uiObj,
        enum CommandKinds cmdKind,
        long Index,
        long opts );
    CaptionConnectionPtr ConnectCaption (
        IDispatch * uiObj,
        enum CaptionSources captionSource,
        VARIANT_BOOL longName );
    SequenceFileListConnectionPtr ConnectSequenceFileList (
        IDispatch * uiObj,
        VARIANT_BOOL fullPath );
    SequenceListConnectionPtr ConnectSequenceList (
        IDispatch * uiObj );
    StepGroupListConnectionPtr ConnectStepGroupList (
        IDispatch * uiObj );
    SequenceViewConnectionPtr ConnectSequenceView (
        IDispatch * uiObj );
    ImageConnectionPtr ConnectImage (
        IDispatch * uiObj,
        enum ImageSources imageSource );
    enum StepGroupModes GetStepGroupMode ( );
    void PutStepGroupMode (
        enum StepGroupModes val );
    TS::UndoStackPtr GetUndoStack ( );
    SelectedSequencesPtr GetSelectedSequences ( );
    SelectedPropertyObjectsPtr GetSelectedPropertyObjects ( );
    HRESULT RefreshStepEx (
        enum TS::StepGroups group,
        long stepIndex );
    TS::SequenceContextPtr NewEditContext ( );
    VariablesConnectionPtr ConnectVariables (
        IDispatch * uiObj );
    InsertionPaletteConnectionPtr ConnectInsertionPalette (
        IDispatch * uiObj );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Connections (
        /*[out,retval]*/ struct SequenceFileViewMgrConnections * * val ) = 0;
      virtual HRESULT __stdcall get_ExecutionEntryPoints (
        /*[out,retval]*/ struct EntryPoints * * val ) = 0;
      virtual HRESULT __stdcall get_SequenceFile (
        /*[out,retval]*/ struct TS::SequenceFile * * val ) = 0;
      virtual HRESULT __stdcall putref_SequenceFile (
        /*[in]*/ struct TS::SequenceFile * val ) = 0;
      virtual HRESULT __stdcall get_Sequence (
        /*[out,retval]*/ struct TS::Sequence * * val ) = 0;
      virtual HRESULT __stdcall putref_Sequence (
        /*[in]*/ struct TS::Sequence * val ) = 0;
      virtual HRESULT __stdcall get_StepGroup (
        /*[out,retval]*/ enum TS::StepGroups * val ) = 0;
      virtual HRESULT __stdcall put_StepGroup (
        /*[in]*/ enum TS::StepGroups val ) = 0;
      virtual HRESULT __stdcall get_ConfigurationEntryPoints (
        /*[out,retval]*/ struct EntryPoints * * val ) = 0;
      virtual HRESULT __stdcall get_SelectedSteps (
        /*[out,retval]*/ struct SelectedSteps * * val ) = 0;
      virtual HRESULT __stdcall get_ReplaceSequenceFileOnClose (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_ReplaceSequenceFileOnClose (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_ApplicationMgr (
        /*[out,retval]*/ IDispatch * * val ) = 0;
      virtual HRESULT __stdcall get_UserData (
        /*[out,retval]*/ VARIANT * val ) = 0;
      virtual HRESULT __stdcall put_UserData (
        /*[in]*/ VARIANT val ) = 0;
      virtual HRESULT __stdcall raw_BuildEditArgs (
        /*[out,retval]*/ struct TS::EditArgs * * val ) = 0;
      virtual HRESULT __stdcall raw_SetSequenceAndGroup (
        /*[in]*/ struct TS::Sequence * newSequence,
        /*[in]*/ enum TS::StepGroups newGroup ) = 0;
      virtual HRESULT __stdcall raw_Run (
        /*[in]*/ VARIANT editArgsVal,
        /*[out,retval]*/ struct TS::Execution * * val ) = 0;
      virtual HRESULT __stdcall raw_RunSelectedSteps (
        /*[in]*/ VARIANT interactiveArgsVal,
        /*[in]*/ VARIANT editArgsVal,
        /*[out,retval]*/ struct TS::Execution * * val ) = 0;
      virtual HRESULT __stdcall raw_BuildInteractiveArgs (
        /*[in]*/ VARIANT createLoopArgs,
        /*[out]*/ VARIANT * cancel,
        /*[out,retval]*/ struct TS::InteractiveArgs * * val ) = 0;
      virtual HRESULT __stdcall raw_LoopOnSelectedSteps (
        /*[in]*/ VARIANT interactiveArgsVal,
        /*[in]*/ VARIANT editArgsVal,
        /*[out,retval]*/ struct TS::Execution * * val ) = 0;
      virtual HRESULT __stdcall raw_Refresh ( ) = 0;
      virtual HRESULT __stdcall raw_RefreshStep (
        /*[in]*/ long stepIndex ) = 0;
      virtual HRESULT __stdcall raw_GetCommand (
        /*[in]*/ enum CommandKinds cmdKind,
        /*[in]*/ long Index,
        /*[out,retval]*/ struct Command * * val ) = 0;
      virtual HRESULT __stdcall raw_GetCaptionText (
        /*[in]*/ enum CaptionSources captionSource,
        VARIANT_BOOL longName,
        /*[in]*/ BSTR formatExpression,
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall raw_GetImageName (
        /*[in]*/ enum ImageSources imageSource,
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall raw_ConnectCommand (
        /*[in]*/ IDispatch * uiObj,
        /*[in]*/ enum CommandKinds cmdKind,
        /*[in]*/ long Index,
        /*[in]*/ long opts,
        /*[out,retval]*/ struct CommandConnection * * val ) = 0;
      virtual HRESULT __stdcall raw_ConnectCaption (
        /*[in]*/ IDispatch * uiObj,
        /*[in]*/ enum CaptionSources captionSource,
        VARIANT_BOOL longName,
        /*[out,retval]*/ struct CaptionConnection * * val ) = 0;
      virtual HRESULT __stdcall raw_ConnectSequenceFileList (
        /*[in]*/ IDispatch * uiObj,
        VARIANT_BOOL fullPath,
        /*[out,retval]*/ struct SequenceFileListConnection * * val ) = 0;
      virtual HRESULT __stdcall raw_ConnectSequenceList (
        /*[in]*/ IDispatch * uiObj,
        /*[out,retval]*/ struct SequenceListConnection * * val ) = 0;
      virtual HRESULT __stdcall raw_ConnectStepGroupList (
        /*[in]*/ IDispatch * uiObj,
        /*[out,retval]*/ struct StepGroupListConnection * * val ) = 0;
      virtual HRESULT __stdcall raw_ConnectSequenceView (
        /*[in]*/ IDispatch * uiObj,
        /*[out,retval]*/ struct SequenceViewConnection * * val ) = 0;
      virtual HRESULT __stdcall raw_ConnectImage (
        /*[in]*/ IDispatch * uiObj,
        /*[in]*/ enum ImageSources imageSource,
        /*[out,retval]*/ struct ImageConnection * * val ) = 0;
      virtual HRESULT __stdcall get_StepGroupMode (
        /*[out,retval]*/ enum StepGroupModes * val ) = 0;
      virtual HRESULT __stdcall put_StepGroupMode (
        /*[in]*/ enum StepGroupModes val ) = 0;
      virtual HRESULT __stdcall get_UndoStack (
        /*[out,retval]*/ struct TS::UndoStack * * val ) = 0;
      virtual HRESULT __stdcall get_SelectedSequences (
        /*[out,retval]*/ struct SelectedSequences * * val ) = 0;
      virtual HRESULT __stdcall get_SelectedPropertyObjects (
        /*[out,retval]*/ struct SelectedPropertyObjects * * val ) = 0;
      virtual HRESULT __stdcall raw_RefreshStepEx (
        /*[in]*/ enum TS::StepGroups group,
        /*[in]*/ long stepIndex ) = 0;
      virtual HRESULT __stdcall raw_NewEditContext (
        /*[out,retval]*/ struct TS::SequenceContext * * val ) = 0;
      virtual HRESULT __stdcall raw_ConnectVariables (
        /*[in]*/ IDispatch * uiObj,
        /*[out,retval]*/ struct VariablesConnection * * val ) = 0;
      virtual HRESULT __stdcall raw_ConnectInsertionPalette (
        /*[in]*/ IDispatch * uiObj,
        /*[out,retval]*/ struct InsertionPaletteConnection * * val ) = 0;
};

struct __declspec(uuid("48318ebf-0fff-4750-94b7-a4e10643460a"))
Command : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEnabled,put=PutEnabled))
    VARIANT_BOOL Enabled;
    __declspec(property(get=GetVisible,put=PutVisible))
    VARIANT_BOOL Visible;
    __declspec(property(get=GetIsSeparator,put=PutIsSeparator))
    VARIANT_BOOL IsSeparator;
    __declspec(property(get=GetIsToggle,put=PutIsToggle))
    VARIANT_BOOL IsToggle;
    __declspec(property(get=GetToggleState,put=PutToggleState))
    VARIANT_BOOL ToggleState;
    __declspec(property(get=GetShortcutKey,put=PutShortcutKey))
    enum ShortcutKeys ShortcutKey;
    __declspec(property(get=GetShortcutModifier,put=PutShortcutModifier))
    long ShortcutModifier;
    __declspec(property(get=GetUserData,put=PutUserData))
    _variant_t UserData;
    __declspec(property(get=GetUserObject,put=PutRefUserObject))
    IUnknownPtr UserObject;
    __declspec(property(get=GetSequenceFileViewMgr,put=PutRefSequenceFileViewMgr))
    ISequenceFileViewMgrPtr SequenceFileViewMgr;
    __declspec(property(get=GetExecutionViewMgr,put=PutRefExecutionViewMgr))
    IExecutionViewMgrPtr ExecutionViewMgr;
    __declspec(property(get=GetKind))
    enum CommandKinds Kind;
    __declspec(property(get=GetSubsidiaryCommands,put=PutRefSubsidiaryCommands))
    CommandsPtr SubsidiaryCommands;
    __declspec(property(get=GetLVShortcutKey,put=PutLVShortcutKey))
    _bstr_t LVShortcutKey;
    __declspec(property(get=GetLVShortcutModifier,put=PutLVShortcutModifier))
    VARIANT_BOOL LVShortcutModifier;
    __declspec(property(get=GetIconName,put=PutIconName))
    _bstr_t IconName;
    __declspec(property(get=GetEntryPointIndex))
    long EntryPointIndex;
    __declspec(property(get=GetEntryPoint))
    EntryPointPtr EntryPoint;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetEnabled ( );
    void PutEnabled (
        VARIANT_BOOL val );
    VARIANT_BOOL GetVisible ( );
    void PutVisible (
        VARIANT_BOOL val );
    VARIANT_BOOL GetIsSeparator ( );
    void PutIsSeparator (
        VARIANT_BOOL val );
    VARIANT_BOOL GetIsToggle ( );
    void PutIsToggle (
        VARIANT_BOOL val );
    VARIANT_BOOL GetToggleState ( );
    void PutToggleState (
        VARIANT_BOOL val );
    enum ShortcutKeys GetShortcutKey ( );
    void PutShortcutKey (
        enum ShortcutKeys val );
    long GetShortcutModifier ( );
    void PutShortcutModifier (
        long val );
    _variant_t GetUserData ( );
    void PutUserData (
        const _variant_t & val );
    IUnknownPtr GetUserObject ( );
    void PutRefUserObject (
        IUnknown * val );
    ISequenceFileViewMgrPtr GetSequenceFileViewMgr ( );
    void PutRefSequenceFileViewMgr (
        struct ISequenceFileViewMgr * val );
    IExecutionViewMgrPtr GetExecutionViewMgr ( );
    void PutRefExecutionViewMgr (
        struct IExecutionViewMgr * val );
    enum CommandKinds GetKind ( );
    CommandsPtr GetSubsidiaryCommands ( );
    void PutRefSubsidiaryCommands (
        struct Commands * val );
    _bstr_t GetDisplayName (
        _bstr_t acceleratorPrefix,
        VARIANT_BOOL includeShortcutText );
    HRESULT SetDisplayName (
        _bstr_t val );
    HRESULT Execute (
        VARIANT_BOOL applicationHandlesError );
    _bstr_t GetLVShortcutKey ( );
    void PutLVShortcutKey (
        _bstr_t val );
    VARIANT_BOOL GetLVShortcutModifier ( );
    void PutLVShortcutModifier (
        VARIANT_BOOL val );
    _bstr_t GetIconName ( );
    void PutIconName (
        _bstr_t val );
    long GetEntryPointIndex ( );
    EntryPointPtr GetEntryPoint ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Enabled (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_Enabled (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_Visible (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_Visible (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_IsSeparator (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_IsSeparator (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_IsToggle (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_IsToggle (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_ToggleState (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_ToggleState (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_ShortcutKey (
        /*[out,retval]*/ enum ShortcutKeys * val ) = 0;
      virtual HRESULT __stdcall put_ShortcutKey (
        /*[in]*/ enum ShortcutKeys val ) = 0;
      virtual HRESULT __stdcall get_ShortcutModifier (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall put_ShortcutModifier (
        /*[in]*/ long val ) = 0;
      virtual HRESULT __stdcall get_UserData (
        /*[out,retval]*/ VARIANT * val ) = 0;
      virtual HRESULT __stdcall put_UserData (
        /*[in]*/ VARIANT val ) = 0;
      virtual HRESULT __stdcall get_UserObject (
        /*[out,retval]*/ IUnknown * * val ) = 0;
      virtual HRESULT __stdcall putref_UserObject (
        /*[in]*/ IUnknown * val ) = 0;
      virtual HRESULT __stdcall get_SequenceFileViewMgr (
        /*[out,retval]*/ struct ISequenceFileViewMgr * * val ) = 0;
      virtual HRESULT __stdcall putref_SequenceFileViewMgr (
        /*[in]*/ struct ISequenceFileViewMgr * val ) = 0;
      virtual HRESULT __stdcall get_ExecutionViewMgr (
        /*[out,retval]*/ struct IExecutionViewMgr * * val ) = 0;
      virtual HRESULT __stdcall putref_ExecutionViewMgr (
        /*[in]*/ struct IExecutionViewMgr * val ) = 0;
      virtual HRESULT __stdcall get_Kind (
        /*[out,retval]*/ enum CommandKinds * val ) = 0;
      virtual HRESULT __stdcall get_SubsidiaryCommands (
        /*[out,retval]*/ struct Commands * * val ) = 0;
      virtual HRESULT __stdcall putref_SubsidiaryCommands (
        /*[in]*/ struct Commands * val ) = 0;
      virtual HRESULT __stdcall raw_GetDisplayName (
        /*[in]*/ BSTR acceleratorPrefix,
        /*[in]*/ VARIANT_BOOL includeShortcutText,
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall raw_SetDisplayName (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall raw_Execute (
        /*[in]*/ VARIANT_BOOL applicationHandlesError ) = 0;
      virtual HRESULT __stdcall get_LVShortcutKey (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_LVShortcutKey (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_LVShortcutModifier (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_LVShortcutModifier (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_IconName (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall put_IconName (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_EntryPointIndex (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall get_EntryPoint (
        /*[out,retval]*/ struct EntryPoint * * val ) = 0;
};

struct __declspec(uuid("0b2d723f-0a05-40fe-a0fc-362ef92a1dcb"))
IExecutionViewMgr : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetSelectedPropertyObjects))
    SelectedPropertyObjectsPtr SelectedPropertyObjects;
    __declspec(property(get=GetExecution,put=PutRefExecution))
    TS::ExecutionPtr Execution;
    __declspec(property(get=GetConnections))
    ExecutionViewMgrConnectionsPtr Connections;
    __declspec(property(get=GetRunState))
    enum TS::ExecutionRunStates RunState;
    __declspec(property(get=GetTerminationState))
    enum TS::ExecutionTerminationStates TerminationState;
    __declspec(property(get=GetExecutionEntryPoints))
    EntryPointsPtr ExecutionEntryPoints;
    __declspec(property(get=GetConfigurationEntryPoints))
    EntryPointsPtr ConfigurationEntryPoints;
    __declspec(property(get=GetSelectedSteps))
    SelectedStepsPtr SelectedSteps;
    __declspec(property(get=GetSequenceContext,put=PutRefSequenceContext))
    TS::SequenceContextPtr SequenceContext;
    __declspec(property(get=GetThread,put=PutRefThread))
    TS::ThreadPtr Thread;
    __declspec(property(get=GetReplaceExecutionOnClose,put=PutReplaceExecutionOnClose))
    VARIANT_BOOL ReplaceExecutionOnClose;
    __declspec(property(get=GetApplicationMgr))
    IDispatchPtr ApplicationMgr;
    __declspec(property(get=GetUserData,put=PutUserData))
    _variant_t UserData;
    __declspec(property(get=GetStepGroupMode,put=PutStepGroupMode))
    enum StepGroupModes StepGroupMode;

    //
    // Wrapper methods for error-handling
    //

    TS::ExecutionPtr GetExecution ( );
    void PutRefExecution (
        struct TS::Execution * val );
    ExecutionViewMgrConnectionsPtr GetConnections ( );
    enum TS::ExecutionRunStates GetRunState ( );
    enum TS::ExecutionTerminationStates GetTerminationState ( );
    EntryPointsPtr GetExecutionEntryPoints ( );
    EntryPointsPtr GetConfigurationEntryPoints ( );
    SelectedStepsPtr GetSelectedSteps ( );
    TS::SequenceContextPtr GetSequenceContext ( );
    void PutRefSequenceContext (
        struct TS::SequenceContext * val );
    TS::ThreadPtr GetThread ( );
    void PutRefThread (
        struct TS::Thread * val );
    VARIANT_BOOL GetReplaceExecutionOnClose ( );
    void PutReplaceExecutionOnClose (
        VARIANT_BOOL val );
    IDispatchPtr GetApplicationMgr ( );
    _variant_t GetUserData ( );
    void PutUserData (
        const _variant_t & val );
    HRESULT TerminateExecution ( );
    HRESULT BreakExecution ( );
    HRESULT ResumeExecution ( );
    HRESULT RestartExecution ( );
    HRESULT AbortExecution ( );
    TS::EditArgsPtr BuildEditArgs ( );
    TS::InteractiveArgsPtr BuildInteractiveArgs (
        const _variant_t & createLoopArgs,
        VARIANT * cancel );
    HRESULT Refresh (
        const _variant_t & seqCtxt = vtMissing );
    HRESULT RefreshStep (
        long stepIndex );
    CommandPtr GetCommand (
        enum CommandKinds cmdKind,
        long commandIndex );
    _bstr_t GetCaptionText (
        enum CaptionSources captionSource,
        VARIANT_BOOL longName,
        _bstr_t formatExpression );
    _bstr_t GetImageName (
        enum ImageSources imageSource );
    double GetNumericValue (
        enum NumericSources numericSource );
    HRESULT RunSelectedSteps (
        const _variant_t & interArgs = vtMissing );
    HRESULT LoopOnSelectedSteps (
        const _variant_t & interArgs = vtMissing );
    CommandConnectionPtr ConnectCommand (
        IDispatch * uiObj,
        enum CommandKinds cmdKind,
        long Index,
        long opts );
    CaptionConnectionPtr ConnectCaption (
        IDispatch * uiObj,
        enum CaptionSources captionSource,
        VARIANT_BOOL longName );
    ExecutionViewConnectionPtr ConnectExecutionView (
        IDispatch * uiObj,
        long opts );
    ReportViewConnectionPtr ConnectReportView (
        IDispatch * uiObj );
    ExecutionListConnectionPtr ConnectExecutionList (
        IDispatch * uiObj );
    CallStackConnectionPtr ConnectCallStack (
        IDispatch * uiObj );
    ThreadListConnectionPtr ConnectThreadList (
        IDispatch * uiObj );
    ImageConnectionPtr ConnectImage (
        IDispatch * uiObj,
        enum ImageSources imageSource );
    NumericConnectionPtr ConnectNumeric (
        IDispatch * uiObj,
        enum NumericSources numericSource );
    enum StepGroupModes GetStepGroupMode ( );
    void PutStepGroupMode (
        enum StepGroupModes val );
    SelectedPropertyObjectsPtr GetSelectedPropertyObjects ( );
    HRESULT RefreshStepEx (
        enum TS::StepGroups group,
        long stepIndex );
    TS::SequenceContextPtr NewEditContext ( );
    VariablesConnectionPtr ConnectVariables (
        IDispatch * uiObj );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Execution (
        /*[out,retval]*/ struct TS::Execution * * val ) = 0;
      virtual HRESULT __stdcall putref_Execution (
        /*[in]*/ struct TS::Execution * val ) = 0;
      virtual HRESULT __stdcall get_Connections (
        /*[out,retval]*/ struct ExecutionViewMgrConnections * * val ) = 0;
      virtual HRESULT __stdcall get_RunState (
        /*[out,retval]*/ enum TS::ExecutionRunStates * val ) = 0;
      virtual HRESULT __stdcall get_TerminationState (
        /*[out,retval]*/ enum TS::ExecutionTerminationStates * val ) = 0;
      virtual HRESULT __stdcall get_ExecutionEntryPoints (
        /*[out,retval]*/ struct EntryPoints * * val ) = 0;
      virtual HRESULT __stdcall get_ConfigurationEntryPoints (
        /*[out,retval]*/ struct EntryPoints * * val ) = 0;
      virtual HRESULT __stdcall get_SelectedSteps (
        /*[out,retval]*/ struct SelectedSteps * * val ) = 0;
      virtual HRESULT __stdcall get_SequenceContext (
        /*[out,retval]*/ struct TS::SequenceContext * * val ) = 0;
      virtual HRESULT __stdcall putref_SequenceContext (
        /*[in]*/ struct TS::SequenceContext * val ) = 0;
      virtual HRESULT __stdcall get_Thread (
        /*[out,retval]*/ struct TS::Thread * * val ) = 0;
      virtual HRESULT __stdcall putref_Thread (
        /*[in]*/ struct TS::Thread * val ) = 0;
      virtual HRESULT __stdcall get_ReplaceExecutionOnClose (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_ReplaceExecutionOnClose (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_ApplicationMgr (
        /*[out,retval]*/ IDispatch * * val ) = 0;
      virtual HRESULT __stdcall get_UserData (
        /*[out,retval]*/ VARIANT * val ) = 0;
      virtual HRESULT __stdcall put_UserData (
        /*[in]*/ VARIANT val ) = 0;
      virtual HRESULT __stdcall raw_TerminateExecution ( ) = 0;
      virtual HRESULT __stdcall raw_BreakExecution ( ) = 0;
      virtual HRESULT __stdcall raw_ResumeExecution ( ) = 0;
      virtual HRESULT __stdcall raw_RestartExecution ( ) = 0;
      virtual HRESULT __stdcall raw_AbortExecution ( ) = 0;
      virtual HRESULT __stdcall raw_BuildEditArgs (
        /*[out,retval]*/ struct TS::EditArgs * * val ) = 0;
      virtual HRESULT __stdcall raw_BuildInteractiveArgs (
        /*[in]*/ VARIANT createLoopArgs,
        /*[out]*/ VARIANT * cancel,
        /*[out,retval]*/ struct TS::InteractiveArgs * * val ) = 0;
      virtual HRESULT __stdcall raw_Refresh (
        /*[in]*/ VARIANT seqCtxt = vtMissing ) = 0;
      virtual HRESULT __stdcall raw_RefreshStep (
        /*[in]*/ long stepIndex ) = 0;
      virtual HRESULT __stdcall raw_GetCommand (
        /*[in]*/ enum CommandKinds cmdKind,
        /*[in]*/ long commandIndex,
        /*[out,retval]*/ struct Command * * val ) = 0;
      virtual HRESULT __stdcall raw_GetCaptionText (
        /*[in]*/ enum CaptionSources captionSource,
        VARIANT_BOOL longName,
        /*[in]*/ BSTR formatExpression,
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall raw_GetImageName (
        /*[in]*/ enum ImageSources imageSource,
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall raw_GetNumericValue (
        /*[in]*/ enum NumericSources numericSource,
        /*[out,retval]*/ double * val ) = 0;
      virtual HRESULT __stdcall raw_RunSelectedSteps (
        /*[in]*/ VARIANT interArgs = vtMissing ) = 0;
      virtual HRESULT __stdcall raw_LoopOnSelectedSteps (
        /*[in]*/ VARIANT interArgs = vtMissing ) = 0;
      virtual HRESULT __stdcall raw_ConnectCommand (
        /*[in]*/ IDispatch * uiObj,
        /*[in]*/ enum CommandKinds cmdKind,
        /*[in]*/ long Index,
        /*[in]*/ long opts,
        /*[out,retval]*/ struct CommandConnection * * val ) = 0;
      virtual HRESULT __stdcall raw_ConnectCaption (
        /*[in]*/ IDispatch * uiObj,
        /*[in]*/ enum CaptionSources captionSource,
        VARIANT_BOOL longName,
        /*[out,retval]*/ struct CaptionConnection * * val ) = 0;
      virtual HRESULT __stdcall raw_ConnectExecutionView (
        /*[in]*/ IDispatch * uiObj,
        /*[in]*/ long opts,
        /*[out,retval]*/ struct ExecutionViewConnection * * val ) = 0;
      virtual HRESULT __stdcall raw_ConnectReportView (
        /*[in]*/ IDispatch * uiObj,
        /*[out,retval]*/ struct ReportViewConnection * * val ) = 0;
      virtual HRESULT __stdcall raw_ConnectExecutionList (
        /*[in]*/ IDispatch * uiObj,
        /*[out,retval]*/ struct ExecutionListConnection * * val ) = 0;
      virtual HRESULT __stdcall raw_ConnectCallStack (
        /*[in]*/ IDispatch * uiObj,
        /*[out,retval]*/ struct CallStackConnection * * val ) = 0;
      virtual HRESULT __stdcall raw_ConnectThreadList (
        /*[in]*/ IDispatch * uiObj,
        /*[out,retval]*/ struct ThreadListConnection * * val ) = 0;
      virtual HRESULT __stdcall raw_ConnectImage (
        /*[in]*/ IDispatch * uiObj,
        /*[in]*/ enum ImageSources imageSource,
        /*[out,retval]*/ struct ImageConnection * * val ) = 0;
      virtual HRESULT __stdcall raw_ConnectNumeric (
        /*[in]*/ IDispatch * uiObj,
        /*[in]*/ enum NumericSources numericSource,
        /*[out,retval]*/ struct NumericConnection * * val ) = 0;
      virtual HRESULT __stdcall get_StepGroupMode (
        /*[out,retval]*/ enum StepGroupModes * val ) = 0;
      virtual HRESULT __stdcall put_StepGroupMode (
        /*[in]*/ enum StepGroupModes val ) = 0;
      virtual HRESULT __stdcall get_SelectedPropertyObjects (
        /*[out,retval]*/ struct SelectedPropertyObjects * * val ) = 0;
      virtual HRESULT __stdcall raw_RefreshStepEx (
        /*[in]*/ enum TS::StepGroups group,
        /*[in]*/ long stepIndex ) = 0;
      virtual HRESULT __stdcall raw_NewEditContext (
        /*[out,retval]*/ struct TS::SequenceContext * * val ) = 0;
      virtual HRESULT __stdcall raw_ConnectVariables (
        /*[in]*/ IDispatch * uiObj,
        /*[out,retval]*/ struct VariablesConnection * * val ) = 0;
};

struct __declspec(uuid("f1558bb2-66ec-46de-86f1-7aa80f65f356"))
Commands : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    CommandPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    CommandPtr GetItem (
        long itemIdx );
    IUnknownPtr Get_NewEnum ( );
    long GetCount ( );
    HRESULT Clear ( );
    HRESULT Remove (
        long itemIdx );
    HRESULT Insert (
        struct Command * Item,
        long insertBefore );
    HRESULT InsertKind (
        enum CommandKinds cmdKind,
        IDispatch * managerControl,
        long insertBefore,
        _bstr_t currentMenuName,
        _bstr_t allMenuNames,
        long * numInserted );
    HRESULT InsertIntoWin32Menu (
        long menuHandle,
        long menuItemToInsertBefore,
        VARIANT_BOOL byPosition,
        VARIANT_BOOL useShortcutKeys );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall get_Item (
        /*[in]*/ long itemIdx,
        /*[out,retval]*/ struct Command * * val ) = 0;
      virtual HRESULT __stdcall get__NewEnum (
        /*[out,retval]*/ IUnknown * * val ) = 0;
      virtual HRESULT __stdcall get_Count (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall raw_Clear ( ) = 0;
      virtual HRESULT __stdcall raw_Remove (
        /*[in]*/ long itemIdx ) = 0;
      virtual HRESULT __stdcall raw_Insert (
        /*[in]*/ struct Command * Item,
        /*[in]*/ long insertBefore ) = 0;
      virtual HRESULT __stdcall raw_InsertKind (
        enum CommandKinds cmdKind,
        /*[in]*/ IDispatch * managerControl,
        /*[in]*/ long insertBefore,
        /*[in]*/ BSTR currentMenuName,
        /*[in]*/ BSTR allMenuNames,
        /*[out]*/ long * numInserted ) = 0;
      virtual HRESULT __stdcall raw_InsertIntoWin32Menu (
        /*[in]*/ long menuHandle,
        /*[in]*/ long menuItemToInsertBefore,
        /*[in]*/ VARIANT_BOOL byPosition,
        /*[in]*/ VARIANT_BOOL useShortcutKeys ) = 0;
};

struct __declspec(uuid("d0743b7d-50bf-409d-87df-49983721dfdc"))
IApplicationMgr : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetExecuting))
    VARIANT_BOOL Executing;
    __declspec(property(get=GetLoginRunning))
    VARIANT_BOOL LoginRunning;
    __declspec(property(get=GetConfigFile))
    TS::PropertyObjectFilePtr ConfigFile;
    __declspec(property(get=GetConfigFilePath,put=PutConfigFilePath))
    _bstr_t ConfigFilePath;
    __declspec(property(get=GetMRUFiles))
    MRUFilesPtr MRUFiles;
    __declspec(property(get=GetReloadSequenceFilesOnStart,put=PutReloadSequenceFilesOnStart))
    enum ReloadFiles ReloadSequenceFilesOnStart;
    __declspec(property(get=GetUserData,put=PutUserData))
    _variant_t UserData;
    __declspec(property(get=GetCurrentUIMessage))
    TS::UIMessagePtr CurrentUIMessage;
    __declspec(property(get=GetLogoutClosesSeqFilesAndExecs,put=PutLogoutClosesSeqFilesAndExecs))
    VARIANT_BOOL LogoutClosesSeqFilesAndExecs;
    __declspec(property(get=GetReloadModifiedFilesInterval,put=PutReloadModifiedFilesInterval))
    long ReloadModifiedFilesInterval;
    __declspec(property(get=GetIsShuttingDown))
    VARIANT_BOOL IsShuttingDown;
    __declspec(property(get=GetIsStarted))
    VARIANT_BOOL IsStarted;
    __declspec(property(get=GetLogoutRunning))
    VARIANT_BOOL LogoutRunning;
    __declspec(property(get=GetUndoStack,put=PutUndoStack))
    TS::UndoStackPtr UndoStack;
    __declspec(property(get=GetIsEditor,put=PutIsEditor))
    VARIANT_BOOL IsEditor;
    __declspec(property(get=GetEditReadOnlyFiles,put=PutEditReadOnlyFiles))
    VARIANT_BOOL EditReadOnlyFiles;
    __declspec(property(get=GetMakeStepNamesUnique,put=PutMakeStepNamesUnique))
    VARIANT_BOOL MakeStepNamesUnique;
    __declspec(property(get=GetAutomaticallyReloadModifiedFiles,put=PutAutomaticallyReloadModifiedFiles))
    enum AutomaticallyReloadModifiedFilesOptions AutomaticallyReloadModifiedFiles;
    __declspec(property(get=GetCreateEmptySequenceFileOnStart,put=PutCreateEmptySequenceFileOnStart))
    VARIANT_BOOL CreateEmptySequenceFileOnStart;
    __declspec(property(get=GetSelectedPropertyObjects))
    SelectedPropertyObjectsPtr SelectedPropertyObjects;
    __declspec(property(get=GetSelectedPropertyObjectFile,put=PutSelectedPropertyObjectFile))
    TS::PropertyObjectFilePtr SelectedPropertyObjectFile;
    __declspec(property(get=GetEditModeShortcutKey,put=PutEditModeShortcutKey))
    enum ShortcutKeys EditModeShortcutKey;
    __declspec(property(get=GetEditModeShortcutModifier,put=PutEditModeShortcutModifier))
    long EditModeShortcutModifier;
    __declspec(property(get=GetCommandLineCanChangeEditMode,put=PutCommandLineCanChangeEditMode))
    VARIANT_BOOL CommandLineCanChangeEditMode;
    __declspec(property(get=GetUseStepListConfigurations,put=PutUseStepListConfigurations))
    VARIANT_BOOL UseStepListConfigurations;
    __declspec(property(get=GetApplicationWillExitOnStart))
    VARIANT_BOOL ApplicationWillExitOnStart;
    __declspec(property(get=GetExecutionEntryPoints))
    EntryPointsPtr ExecutionEntryPoints;
    __declspec(property(get=GetConfigurationEntryPoints))
    EntryPointsPtr ConfigurationEntryPoints;
    __declspec(property(get=GetLoginOnStart,put=PutLoginOnStart))
    VARIANT_BOOL LoginOnStart;
    __declspec(property(get=GetBreakOnStepFailure,put=PutBreakOnStepFailure))
    VARIANT_BOOL BreakOnStepFailure;
    __declspec(property(get=GetConnections))
    ApplicationMgrConnectionsPtr Connections;
    __declspec(property(get=GetBreakOnFirstStep,put=PutBreakOnFirstStep))
    VARIANT_BOOL BreakOnFirstStep;
    __declspec(property(get=GetBreakOnSequenceFailure,put=PutBreakOnSequenceFailure))
    VARIANT_BOOL BreakOnSequenceFailure;
    __declspec(property(get=GetCommandLineArguments))
    StringsPtr CommandLineArguments;
    __declspec(property(get=GetProcessCommandLine,put=PutProcessCommandLine))
    VARIANT_BOOL ProcessCommandLine;
    __declspec(property(get=GetSequenceFiles))
    SequenceFilesPtr SequenceFiles;
    __declspec(property(get=GetExecutions))
    ExecutionsPtr Executions;
    __declspec(property(get=GetLoginLogoutRunning))
    VARIANT_BOOL LoginLogoutRunning;

    //
    // Wrapper methods for error-handling
    //

    HRESULT Start ( );
    VARIANT_BOOL Shutdown ( );
    HRESULT Login ( );
    HRESULT Logout ( );
    HRESULT CloseAllSequenceFiles ( );
    TS::SequenceFilePtr OpenSequenceFile (
        _bstr_t sequenceFilePath );
    VARIANT_BOOL CloseSequenceFile (
        struct TS::SequenceFile * file );
    TS::SequenceFilePtr OpenSequenceFileDialog ( );
    CommandsPtr NewCommands ( );
    HRESULT RaiseError (
        long errorCode,
        _bstr_t errorMessage );
    VARIANT_BOOL CloseExecution (
        struct TS::Execution * exec );
    HRESULT SetAutoCloseExecution (
        struct TS::Execution * exec,
        VARIANT_BOOL val );
    VARIANT_BOOL GetAutoCloseExecution (
        struct TS::Execution * exec );
    HRESULT SetVisible (
        struct TS::Execution * exec,
        VARIANT_BOOL val );
    VARIANT_BOOL GetVisible (
        struct TS::Execution * exec );
    TS::IEnginePtr GetEngine ( );
    CommandPtr GetCommand (
        enum CommandKinds cmdKind,
        long commandIndex );
    _bstr_t GetCaptionText (
        enum CaptionSources captionSource,
        VARIANT_BOOL longName,
        _bstr_t formatExpression );
    _bstr_t GetImageName (
        enum ImageSources imageSource );
    HRESULT ReloadModifiedSequenceFiles ( );
    HRESULT CloseAllExecutions ( );
    CommandConnectionPtr ConnectCommand (
        IDispatch * uiObj,
        enum CommandKinds cmdKind,
        long Index,
        long opts );
    CaptionConnectionPtr ConnectCaption (
        IDispatch * uiObj,
        enum CaptionSources captionSource,
        VARIANT_BOOL longName );
    IDispatchPtr GetSequenceFileViewMgr (
        struct TS::SequenceFile * file );
    IDispatchPtr GetExecutionViewMgr (
        struct TS::Execution * exec );
    HRESULT LocalizeAllControls (
        _bstr_t sectionName );
    HRESULT RefreshAllViewMgrs ( );
    VARIANT_BOOL GetLoginOnStart ( );
    void PutLoginOnStart (
        VARIANT_BOOL val );
    VARIANT_BOOL GetBreakOnStepFailure ( );
    void PutBreakOnStepFailure (
        VARIANT_BOOL val );
    ApplicationMgrConnectionsPtr GetConnections ( );
    VARIANT_BOOL GetBreakOnFirstStep ( );
    void PutBreakOnFirstStep (
        VARIANT_BOOL val );
    VARIANT_BOOL GetBreakOnSequenceFailure ( );
    void PutBreakOnSequenceFailure (
        VARIANT_BOOL val );
    StringsPtr GetCommandLineArguments ( );
    VARIANT_BOOL GetProcessCommandLine ( );
    void PutProcessCommandLine (
        VARIANT_BOOL val );
    SequenceFilesPtr GetSequenceFiles ( );
    ExecutionsPtr GetExecutions ( );
    VARIANT_BOOL GetLoginLogoutRunning ( );
    VARIANT_BOOL GetExecuting ( );
    TS::PropertyObjectFilePtr GetConfigFile ( );
    void PutConfigFilePath (
        _bstr_t val );
    _bstr_t GetConfigFilePath ( );
    MRUFilesPtr GetMRUFiles ( );
    void PutReloadSequenceFilesOnStart (
        enum ReloadFiles val );
    enum ReloadFiles GetReloadSequenceFilesOnStart ( );
    _variant_t GetUserData ( );
    void PutUserData (
        const _variant_t & val );
    TS::UIMessagePtr GetCurrentUIMessage ( );
    VARIANT_BOOL GetLogoutClosesSeqFilesAndExecs ( );
    void PutLogoutClosesSeqFilesAndExecs (
        VARIANT_BOOL val );
    long GetReloadModifiedFilesInterval ( );
    void PutReloadModifiedFilesInterval (
        long val );
    VARIANT_BOOL GetIsShuttingDown ( );
    VARIANT_BOOL GetIsStarted ( );
    SequenceFilesPtr OpenSequenceFilesDialog ( );
    VARIANT_BOOL GetApplicationWillExitOnStart ( );
    EntryPointsPtr GetExecutionEntryPoints ( );
    EntryPointsPtr GetConfigurationEntryPoints ( );
    TS::SequenceFilePtr GetModelFile (
        struct TS::SequenceFile * clientFile,
        VARIANT_BOOL loadIfNotAlreadyLoaded );
    AdapterListConnectionPtr ConnectAdapterList (
        IDispatch * uiObj );
    HRESULT Refresh (
        long opts );
    HRESULT RefreshFile (
        struct TS::PropertyObjectFile * file,
        long opts );
    HRESULT ReloadConfigFile ( );
    HRESULT AddCommandLineArgumentsHelp (
        _bstr_t usage,
        _bstr_t parameterHelp,
        _bstr_t notes );
    VARIANT_BOOL CanEdit (
        struct TS::PropertyObjectFile * editedFile,
        enum TS::EditKinds editKind );
    VARIANT_BOOL BeginEdit (
        struct TS::PropertyObjectFile * editedFile,
        enum TS::EditKinds editKind,
        SAFEARRAY * objectsToEdit );
    HRESULT EndEdit (
        struct TS::PropertyObjectFile * editedFile,
        enum TS::EditKinds editKind,
        SAFEARRAY * editedObjects,
        VARIANT_BOOL cancelled );
    VARIANT_BOOL ReloadFile (
        struct TS::PropertyObjectFile * * file,
        long options );
    VARIANT_BOOL GetLoginRunning ( );
    VARIANT_BOOL GetLogoutRunning ( );
    TS::UndoStackPtr GetUndoStack ( );
    void PutUndoStack (
        struct TS::UndoStack * val );
    VARIANT_BOOL GetIsEditor ( );
    void PutIsEditor (
        VARIANT_BOOL val );
    VARIANT_BOOL GetEditReadOnlyFiles ( );
    void PutEditReadOnlyFiles (
        VARIANT_BOOL val );
    VARIANT_BOOL GetMakeStepNamesUnique ( );
    void PutMakeStepNamesUnique (
        VARIANT_BOOL val );
    enum TS::PerformActionOptions GetPromptForOverwrite ( );
    void PutPromptForOverwrite (
        enum TS::PerformActionOptions val );
    enum TS::PerformActionOptions GetSaveOnClose ( );
    void PutSaveOnClose (
        enum TS::PerformActionOptions val );
    enum AutomaticallyReloadModifiedFilesOptions GetAutomaticallyReloadModifiedFiles ( );
    void PutAutomaticallyReloadModifiedFiles (
        enum AutomaticallyReloadModifiedFilesOptions val );
    VARIANT_BOOL GetCreateEmptySequenceFileOnStart ( );
    void PutCreateEmptySequenceFileOnStart (
        VARIANT_BOOL val );
    SelectedPropertyObjectsPtr GetSelectedPropertyObjects ( );
    TS::PropertyObjectFilePtr GetSelectedPropertyObjectFile ( );
    void PutSelectedPropertyObjectFile (
        struct TS::PropertyObjectFile * val );
    enum ShortcutKeys GetEditModeShortcutKey ( );
    void PutEditModeShortcutKey (
        enum ShortcutKeys val );
    long GetEditModeShortcutModifier ( );
    void PutEditModeShortcutModifier (
        long val );
    VARIANT_BOOL GetCommandLineCanChangeEditMode ( );
    void PutCommandLineCanChangeEditMode (
        VARIANT_BOOL val );
    enum TS::ExecutionRunStates GetRunState (
        struct TS::Execution * exec );
    enum TS::ExecutionTerminationStates GetTerminationState (
        struct TS::Execution * exec );
    VARIANT_BOOL GetUseStepListConfigurations ( );
    void PutUseStepListConfigurations (
        VARIANT_BOOL val );
    VARIANT_BOOL ReloadModifiedSequenceFilesEx ( );

    //
    // Raw methods provided by interface
    //

      virtual HRESULT __stdcall raw_Start ( ) = 0;
      virtual HRESULT __stdcall raw_Shutdown (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall raw_Login ( ) = 0;
      virtual HRESULT __stdcall raw_Logout ( ) = 0;
      virtual HRESULT __stdcall raw_CloseAllSequenceFiles ( ) = 0;
      virtual HRESULT __stdcall raw_OpenSequenceFile (
        /*[in]*/ BSTR sequenceFilePath,
        /*[out,retval]*/ struct TS::SequenceFile * * val ) = 0;
      virtual HRESULT __stdcall raw_CloseSequenceFile (
        /*[in]*/ struct TS::SequenceFile * file,
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall raw_OpenSequenceFileDialog (
        /*[out,retval]*/ struct TS::SequenceFile * * val ) = 0;
      virtual HRESULT __stdcall raw_NewCommands (
        /*[out,retval]*/ struct Commands * * val ) = 0;
      virtual HRESULT __stdcall raw_RaiseError (
        /*[in]*/ long errorCode,
        /*[in]*/ BSTR errorMessage ) = 0;
      virtual HRESULT __stdcall raw_CloseExecution (
        /*[in]*/ struct TS::Execution * exec,
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall raw_SetAutoCloseExecution (
        /*[in]*/ struct TS::Execution * exec,
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall raw_GetAutoCloseExecution (
        /*[in]*/ struct TS::Execution * exec,
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall raw_SetVisible (
        /*[in]*/ struct TS::Execution * exec,
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall raw_GetVisible (
        /*[in]*/ struct TS::Execution * exec,
        /*[out,retval]*/ VARIANT_BOOL * execVisible ) = 0;
      virtual HRESULT __stdcall raw_GetEngine (
        /*[out,retval]*/ struct TS::IEngine * * val ) = 0;
      virtual HRESULT __stdcall raw_GetCommand (
        /*[in]*/ enum CommandKinds cmdKind,
        /*[in]*/ long commandIndex,
        /*[out,retval]*/ struct Command * * val ) = 0;
      virtual HRESULT __stdcall raw_GetCaptionText (
        /*[in]*/ enum CaptionSources captionSource,
        /*[in]*/ VARIANT_BOOL longName,
        /*[in]*/ BSTR formatExpression,
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall raw_GetImageName (
        /*[in]*/ enum ImageSources imageSource,
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall raw_ReloadModifiedSequenceFiles ( ) = 0;
      virtual HRESULT __stdcall raw_CloseAllExecutions ( ) = 0;
      virtual HRESULT __stdcall raw_ConnectCommand (
        /*[in]*/ IDispatch * uiObj,
        /*[in]*/ enum CommandKinds cmdKind,
        /*[in]*/ long Index,
        /*[in]*/ long opts,
        /*[out,retval]*/ struct CommandConnection * * val ) = 0;
      virtual HRESULT __stdcall raw_ConnectCaption (
        /*[in]*/ IDispatch * uiObj,
        /*[in]*/ enum CaptionSources captionSource,
        VARIANT_BOOL longName,
        /*[out,retval]*/ struct CaptionConnection * * val ) = 0;
      virtual HRESULT __stdcall raw_GetSequenceFileViewMgr (
        /*[in]*/ struct TS::SequenceFile * file,
        /*[out,retval]*/ IDispatch * * val ) = 0;
      virtual HRESULT __stdcall raw_GetExecutionViewMgr (
        /*[in]*/ struct TS::Execution * exec,
        /*[out,retval]*/ IDispatch * * val ) = 0;
      virtual HRESULT __stdcall raw_LocalizeAllControls (
        /*[in]*/ BSTR sectionName ) = 0;
      virtual HRESULT __stdcall raw_RefreshAllViewMgrs ( ) = 0;
      virtual HRESULT __stdcall get_LoginOnStart (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_LoginOnStart (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_BreakOnStepFailure (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_BreakOnStepFailure (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_Connections (
        /*[out,retval]*/ struct ApplicationMgrConnections * * val ) = 0;
      virtual HRESULT __stdcall get_BreakOnFirstStep (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_BreakOnFirstStep (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_BreakOnSequenceFailure (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_BreakOnSequenceFailure (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_CommandLineArguments (
        /*[out,retval]*/ struct Strings * * val ) = 0;
      virtual HRESULT __stdcall get_ProcessCommandLine (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_ProcessCommandLine (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_SequenceFiles (
        /*[out,retval]*/ struct SequenceFiles * * val ) = 0;
      virtual HRESULT __stdcall get_Executions (
        /*[out,retval]*/ struct Executions * * val ) = 0;
      virtual HRESULT __stdcall get_LoginLogoutRunning (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall get_Executing (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall get_ConfigFile (
        /*[out,retval]*/ struct TS::PropertyObjectFile * * val ) = 0;
      virtual HRESULT __stdcall put_ConfigFilePath (
        /*[in]*/ BSTR val ) = 0;
      virtual HRESULT __stdcall get_ConfigFilePath (
        /*[out,retval]*/ BSTR * val ) = 0;
      virtual HRESULT __stdcall get_MRUFiles (
        /*[out,retval]*/ struct MRUFiles * * val ) = 0;
      virtual HRESULT __stdcall put_ReloadSequenceFilesOnStart (
        /*[in]*/ enum ReloadFiles val ) = 0;
      virtual HRESULT __stdcall get_ReloadSequenceFilesOnStart (
        /*[out,retval]*/ enum ReloadFiles * val ) = 0;
      virtual HRESULT __stdcall get_UserData (
        /*[out,retval]*/ VARIANT * val ) = 0;
      virtual HRESULT __stdcall put_UserData (
        /*[in]*/ VARIANT val ) = 0;
      virtual HRESULT __stdcall get_CurrentUIMessage (
        /*[out,retval]*/ struct TS::UIMessage * * val ) = 0;
      virtual HRESULT __stdcall get_LogoutClosesSeqFilesAndExecs (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_LogoutClosesSeqFilesAndExecs (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_ReloadModifiedFilesInterval (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall put_ReloadModifiedFilesInterval (
        /*[in]*/ long val ) = 0;
      virtual HRESULT __stdcall get_IsShuttingDown (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall get_IsStarted (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall raw_OpenSequenceFilesDialog (
        /*[out,retval]*/ struct SequenceFiles * * val ) = 0;
      virtual HRESULT __stdcall get_ApplicationWillExitOnStart (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall get_ExecutionEntryPoints (
        /*[out,retval]*/ struct EntryPoints * * val ) = 0;
      virtual HRESULT __stdcall get_ConfigurationEntryPoints (
        /*[out,retval]*/ struct EntryPoints * * val ) = 0;
      virtual HRESULT __stdcall raw_GetModelFile (
        /*[in]*/ struct TS::SequenceFile * clientFile,
        /*[in]*/ VARIANT_BOOL loadIfNotAlreadyLoaded,
        /*[out,retval]*/ struct TS::SequenceFile * * val ) = 0;
      virtual HRESULT __stdcall raw_ConnectAdapterList (
        /*[in]*/ IDispatch * uiObj,
        /*[out,retval]*/ struct AdapterListConnection * * val ) = 0;
      virtual HRESULT __stdcall raw_Refresh (
        /*[in]*/ long opts ) = 0;
      virtual HRESULT __stdcall raw_RefreshFile (
        /*[in]*/ struct TS::PropertyObjectFile * file,
        /*[in]*/ long opts ) = 0;
      virtual HRESULT __stdcall raw_ReloadConfigFile ( ) = 0;
      virtual HRESULT __stdcall raw_AddCommandLineArgumentsHelp (
        /*[in]*/ BSTR usage,
        /*[in]*/ BSTR parameterHelp,
        /*[in]*/ BSTR notes ) = 0;
      virtual HRESULT __stdcall raw_CanEdit (
        /*[in]*/ struct TS::PropertyObjectFile * editedFile,
        /*[in]*/ enum TS::EditKinds editKind,
        /*[out,retval]*/ VARIANT_BOOL * cancel ) = 0;
      virtual HRESULT __stdcall raw_BeginEdit (
        /*[in]*/ struct TS::PropertyObjectFile * editedFile,
        /*[in]*/ enum TS::EditKinds editKind,
        /*[in]*/ SAFEARRAY * objectsToEdit,
        /*[out,retval]*/ VARIANT_BOOL * cancel ) = 0;
      virtual HRESULT __stdcall raw_EndEdit (
        /*[in]*/ struct TS::PropertyObjectFile * editedFile,
        /*[in]*/ enum TS::EditKinds editKind,
        /*[in]*/ SAFEARRAY * editedObjects,
        /*[in]*/ VARIANT_BOOL cancelled ) = 0;
      virtual HRESULT __stdcall raw_ReloadFile (
        /*[in,out]*/ struct TS::PropertyObjectFile * * file,
        /*[in]*/ long options,
        /*[out,retval]*/ VARIANT_BOOL * reloaded ) = 0;
      virtual HRESULT __stdcall get_LoginRunning (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall get_LogoutRunning (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall get_UndoStack (
        /*[out,retval]*/ struct TS::UndoStack * * val ) = 0;
      virtual HRESULT __stdcall put_UndoStack (
        /*[in]*/ struct TS::UndoStack * val ) = 0;
      virtual HRESULT __stdcall get_IsEditor (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_IsEditor (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_EditReadOnlyFiles (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_EditReadOnlyFiles (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_MakeStepNamesUnique (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_MakeStepNamesUnique (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_PromptForOverwrite (
        /*[out,retval]*/ enum TS::PerformActionOptions * val ) = 0;
      virtual HRESULT __stdcall put_PromptForOverwrite (
        /*[in]*/ enum TS::PerformActionOptions val ) = 0;
      virtual HRESULT __stdcall get_SaveOnClose (
        /*[out,retval]*/ enum TS::PerformActionOptions * val ) = 0;
      virtual HRESULT __stdcall put_SaveOnClose (
        /*[in]*/ enum TS::PerformActionOptions val ) = 0;
      virtual HRESULT __stdcall get_AutomaticallyReloadModifiedFiles (
        /*[out,retval]*/ enum AutomaticallyReloadModifiedFilesOptions * val ) = 0;
      virtual HRESULT __stdcall put_AutomaticallyReloadModifiedFiles (
        /*[in]*/ enum AutomaticallyReloadModifiedFilesOptions val ) = 0;
      virtual HRESULT __stdcall get_CreateEmptySequenceFileOnStart (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_CreateEmptySequenceFileOnStart (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall get_SelectedPropertyObjects (
        /*[out,retval]*/ struct SelectedPropertyObjects * * val ) = 0;
      virtual HRESULT __stdcall get_SelectedPropertyObjectFile (
        /*[out,retval]*/ struct TS::PropertyObjectFile * * val ) = 0;
      virtual HRESULT __stdcall put_SelectedPropertyObjectFile (
        /*[in]*/ struct TS::PropertyObjectFile * val ) = 0;
      virtual HRESULT __stdcall get_EditModeShortcutKey (
        /*[out,retval]*/ enum ShortcutKeys * val ) = 0;
      virtual HRESULT __stdcall put_EditModeShortcutKey (
        /*[in]*/ enum ShortcutKeys val ) = 0;
      virtual HRESULT __stdcall get_EditModeShortcutModifier (
        /*[out,retval]*/ long * val ) = 0;
      virtual HRESULT __stdcall put_EditModeShortcutModifier (
        /*[in]*/ long val ) = 0;
      virtual HRESULT __stdcall get_CommandLineCanChangeEditMode (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_CommandLineCanChangeEditMode (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall raw_GetRunState (
        /*[in]*/ struct TS::Execution * exec,
        /*[out,retval]*/ enum TS::ExecutionRunStates * val ) = 0;
      virtual HRESULT __stdcall raw_GetTerminationState (
        /*[in]*/ struct TS::Execution * exec,
        /*[out,retval]*/ enum TS::ExecutionTerminationStates * val ) = 0;
      virtual HRESULT __stdcall get_UseStepListConfigurations (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
      virtual HRESULT __stdcall put_UseStepListConfigurations (
        /*[in]*/ VARIANT_BOOL val ) = 0;
      virtual HRESULT __stdcall raw_ReloadModifiedSequenceFilesEx (
        /*[out,retval]*/ VARIANT_BOOL * val ) = 0;
};

} // namespace TSUI

#pragma pack(pop)
